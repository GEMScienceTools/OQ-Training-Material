%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: ssa_area_sources.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Marco Pagani
%%CreationDate: 1/07/12
%%BoundingBox: 0 0 438 606
%%HiResBoundingBox: 0 0 437.2109 605.9268
%%CropBox: 0 0 437.2109 605.9268
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 92 128 8%%BeginData: 17932 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0BFF527D52AFFD06FF7D5252A8FD06FF527D5284FD06FF7D5252%A8FD07FF7D537DFD07FF7D527DA8FD06FF52527DA8FD1AFFA852527EFD07%FF7D527DFD07FF7D527DFD07FF7D527DA8FD06FFA8277DA8FD07FF27527D%FD07FF52527DFD1CFFA8FD09FFA8FD09FFA8FFA8FD07FFA8FFA8FD09FFA8%FD09FFA8FD09FFA8FD1AFFA8AFA8FFA8FFA8FFA8AFA8FFA8FFA8FFA8AFA8%FFA8AFA8FFA8A8A8FFA8AFA8FFA8FFA8A8A8AFA8FFA8FFA8FFA9A9A8FFA8%AFA8FFA8FFA8A8A8A9A8FFA8AFA8FFA8A8A8FFA8AFA8FFA8FFA8FD10FF7D%A87DA884A87DA884A87DA87D7D7DA87EA87DA884A87DA884A87DA884A87D%A884A87DA87DA87DA87D845A857E7E7E847DA87DA884A87DA87DA87DA884%A87DA884A87DA884A87DA8A8A87D7DA8FD0EFFA8A8FD0CFFA8FD1AFFA884%5A84AF845A84A8FD16FFA8FFA8FFA8A8FD0EFFA8A8FD27FFA884847E84AF%5A857DFD12FFA9A8FFA8A8A9FFFFFF7DFD0EFFA8A8FD0CFFA8FD1BFFA884%5A8484855A847DFD0DFFFD05A8FFA8FFA8FFFFFFA8A8FD0EFFA9A8FD29FF%A8845AAF85857EA8FD0CFFA8FD08FFA8FD04FF7EFD0EFFA8A8FD0CFFA8FD%1BFFA8A8A87E5AAF847E8484FFFF7D7EA8A8A8FFA8FFA8AFFD08FFA8A8FF%FFA8A8FD0FFFA8FD0CFFA8A8FD19FFA8A8FFFF597E7EAF7E8584A87EA87E%FFFFA8A8A9A8A8FD0AFFA8FFA8A87EFD0EFFA8A8FD0CFFA8FD19FFA8A8FF%FFA87E5A5A848B5A8553A8A8A97EFD05FFA8FD09FFA8A87D8460A8FD0FFF%A8FD0CFFA8A8FD19FFA8FFFFFF7E855A8585857E84A8FFFFA9FD0FFFA884%8B5A85A8FD0CFFA8FFA8A8FD0AFFA8A87EFD19FFA8FFFFFFA9A87D7E5A85%845A59A9FFFF7EFD0EFFA87E855A7E5AA8FFFFAFFFA8FD04FFA87D52A8FF%A8A8FD0AFFA8A8FD1AFFA8FD04FF7EA8597E5AAF847EA8FFFFA9A8FD0BFF%A8A87E7E5A8B857E84FFA87D52A8FD04FFA85252A8FF7DA8FD09FFA8A8FD%1BFFA8FFA8A8A87EA8A87D5A5AAF537DFFFFA9A8FD08FF84A87E845A7E84%8B848B5A7EFFA85352A8FD06FFA8FFFFFFA8FD09FFA8FD1CFFA8A8A8FFA8%7EA8A8FF7E7E847E7DFFFFFF7EFD07FF848584855A8585AF84AF85857EFF%FFFFA8FD0AFFA8A8FD08FFA8A8FD1CFFA8FD04FFA9A8FFFFA87D7E5A7EA8%FFA8A9FFFFA8FFA8847E845A845A85848B848B84855AA8FD0FFFA8FD09FF%A8FD1BFFA8FD05FFA9A9FFFFFFA87E845AFFA8A9FFFF84A884845A855A85%84AF85AF84857E7E5A8BA8FD0EFFA8A8FD08FF7DA8FD1AFFA8A8A8FD05FF%A8FFFFFFA97E7D597D7EA87E59845A845A8484AF848B8485847E5A858484%7EA8FD0FFFA8FD09FF7DFD1AFFA8FFFFA8FFFFFFA9A9FD04FFA87E7E5A59%845A85848B84AF85AF84857E855A8584AF85A87D84A8FD0EFFA8A8FD09FF%A8A8FD18FFA8FFFFA87D84FFFFFFA8FD04FFA8A87E5A85848B8485848584%845A845A8459848485848B848484A8FD0EFFA8A8FD0AFFA8FD18FFA8FFFF%FFA8FFFFFFA9A9FD04FFA8A8537E7E855A855A855AFD0684A8A884858B84%AF858B84FD0EFFA8A8FD08FFA8A87DFD17FFA8A8FD07FFA9A8FFFFFFA8A8%7E7E7D848485FD04847DFD04A8FFFFFF7E858485848584A8FD09FFA8A87E%A8FFFFA8FD07FFA8A8FFFFA8FD15FFA8A8FD08FFA9FD07FF7EFFA88484AF%A8A8A8FD07FFA87E85AF84AF858BA8FFA8A87DA8FD04FFA852527DFF7EA8%FD06FFA8A8A8FFFFA8A8FD14FFA8FD0AFF7EFD06FF7EFFFFA8FD0CFF8484%AF848584AF84A8FFA852527DFD04FFA8A87DFFFFA8A8FD05FFA8A8FD04FF%A8FD15FFA8FD09FFA8A97EA9A9FFA8A97EA8FD0EFF848B84AF85AF84AFA8%FFA8A87DFD0AFFA8A8FFFFFD05A8FD04FFA8A8FD14FFA8FD08FFA8A9FFFF%A87E7EA9A8FFA8A8A8FD0BFFA88484858485848584A8FD0FFFA8FFFFA8A8%FD07FFA8A8A8FD11FFA8A8A8FD08FFA9FFFFFFA9A9FD07FFA8A8A8FD08FF%A885AF84AF85AF84AFA8FD0EFFFD05A8FD0AFFA8A8FD0FFFA8A8A8FD08FF%A9A8FFA97EA8FD09FFFD06A8FFFFFFA87E8B8485848B848584A8FD0EFFA8%7DFD0FFF7DFD0FFFA8AFFD08FF7EFFA8A9FD0FFFA8A8FFFFFF848B84AF85%8B84AF858B84FD0EFFA8A8FD0FFFA8A8FD0FFFA8A8FD06FF7EFFA8A8FD0F%FFAFA8FFFFFF8485848584858485848584A8FD0EFFA9A8FD11FFA8FD0FFF%A9A8FD04FFA9A9A8A9FD10FFA8FFFFFFA88485AF84AF85AF84AF858BA8FD%0EFFA8A8FD11FFA8A8FD09FFA8FD05FFA8FFFFFFA97E7D7E7EFD0FFFA8FD%04FFA884AF8485848B8485848B84A8FD0FFFA8FD12FFA8A8FD07FF7EA97E%FD05FFA8FFA8A9FFFF7EFD0FFFA8FD05FF848B84AF858B84AF858B848BA8%FFFFFFA8FD06FFA8527DFFA8A8FFFFA8A8A8FD08FFFD06A87EFD06FFA8A9%FFA9A8FD04FFA87DA8FFFFA8A8FD0CFFA8FFA8FD05FF7E85848584858485%8485848584A8FF7D2EA8FD07FF52FFFFA8A8FFFFA8A8A9A8FD04FFA9FD04%A8AFFFA8FFA8A8FFFFA8AFFFFFA9FFA8FFFFFFA8A87D53A8FFFFA9FD0BFF%A8A8A9A8FD05FFA88585AF84AF85AF84AF85AF84AF84FF7D7DFD0BFFA8A8%FFA8A8FFFFFD06A8FD09FFFD07A8A9FFA8A9FFA8A8A8A97D53537EA8FD05%FFA8AFFFA8A8A8FD08FFA884848B8485848B8485848B848584A8FFFFA8FD%0BFFA87DFFA8FD05FFA8FD11FFA87EA8A87EA8A8FF7EFFA8AF7E7E7EFFA8%A9FFFFA8FFA8A8A8FD0AFFA8848B84AF85AF84AF858B84AF858B84FD0EFF%FD05A8FD17FF7DA87EA8A8FFFFA8A8A9A87DA8A8FFFFA8A8A8FFFFFFA8FD%09FFAF84848584858485848584858485848584A8FD0EFFA9A8FFA8FD18FF%A8FFA9A9FD04FFA8A8FFA87DA9FD07FFA8FD0AFFA884AF85AF84AF85AF84%AF85AF84AF858BA8FD0EFFA8A884A8FD04FFA8A87DA8FD0FFFA97E7D7EFD%05FFA8A8FFFF7DFD08FFA8FD08FFA8848485848B848584AF8485848B8485%848B84A8FD0FFFA8A8FFFF847E7DA884A87D7EAFFD0CFFA9A8A852A9FFFF%A8FFFFFF7EFFFFA9FD08FFA8FD07FF848484AF858B84AF858B84AF858B84%AF858B848BA8FD0EFFA8A87DFF7DA8A8FD05FFA884A8FD0AFFA97EA8527E%FFFF5252A8FF7EA8FFFF7EFD08FFA8FD06FF7D8584858485848584858485%848584858485848584A8FD0FFF7D7D7DFD09FFAFA87DFD09FFA8FF7DA8A9%FD05FFA8AFA8FFA9A9FD08FFA8FD05FF84AF85AF84AF85AF84AF85AF84AF%85AF84AF85AF84AFA8FD0AFFA8A87DFFA8A852A8FD0BFFA8A9FD07FFA8A9%A8A87EFFA9FFA8847D7E7EA9FFFF7EFD08FFA8FD04FF7E85848B8485848B%8485848B8485848B8485848B848584A8FFA87DA8FD06FFA828A8FFA87D7D%A8FD14FFA9A87D7EA9A8A9597E7E7E53A87EFFFFA9FD08FFA8FFFFFF848B%858B84AF858B84AF858B84AF85AF84AF858B84AF858B84FF7D53A8FD06FF%A87DA8FFA8527DFD15FF7EA8537EFFFF7D8584857E7D7DA87EFFA8A9FD07%FFA8FFFF7E858485848584858485848584858485848584858485848584A8%FFA87DFD0CFF7DFD15FFA9A9A8FD057EFD04847DFF7EA9FFFFA8FD07FFA8%FF7E8B84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF858BA8FD0E%FFFD04A8FD13FFA9A87E7DA87DCB5384848452A87EA8A8FFA8FD09FF7D84%8485848B8485848B8485848B848584AF8485848B8485848B84A8FD0FFFA8%A852FD13FF7EA853FFFFA9FF845A85597D7EFF7E7EA8A9FD08FF7D8484AF%858B84AF858B84AF858B84AF858B84AF858B84AF858B848BA8FD0EFFA8A8%A87EFD11FFA97E7E527D7E7D7DFF537D52597EFF7EA87E7E7D7EA8FD05FF%7D84848584858485848584858485848584858485848584858485848584A8%FD0FFFA8FD13FF7EFF7EFF7DA8A8A8FFA8FFA8A8A97EFD05FFA8A8FD04FF%7D8585AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF%A8FD0EFFA8A8FD12FFA8A9FFA8A87DA8FF7DFFFFFFA8A9A8FFA884FD04FF%7DFFFFFFA87E848B8485848B8485848B8485848B8485848B8485848B8485%848B848584A8FD0EFFA8A8FD12FFA9FFFF7EFF52A9A8FFFFFF7EA9FFFFFF%A8A8FD04FFA9A8FFFFA8848B84AF858B84AF858B84AF858B84AF858B84AF%85AF84AF858B84AF858B84FD0CFFA8FFA8A8FD11FFA9A8FFFFA8A85253FF%FFFF7E7EA8FD09FFA8A9A8A87D8584858485848584858485848584858485%84858485848584858485848584A8FD04FFA8FD05FFA952A8FFA8A8FD11FF%7EFFFFFFA8A97D7EFD05FFA984A9A9FD07FFA8FF7D8585AF84AF85AF84AF%85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF858B84FFFFFF527EFD04%FFA87D52A8FFA8A8FD10FF7EA9FD04FF7E8459A9FD06FFA8A97EA9A8FD04%FFA9CB84848B8485848B8485848B8485848B8485848B848584AF8485848B%8485848B84A8FFA87D52A8FD06FFA8FFFFFFA8FD10FFA9FD05FFA9537EA8%A9FD08FFA9A97EA9FFFFA8FF7D8484AF858B84AF858B84AF858B84AF858B%84AF858B84AF858B84AF858B848BA8FFFFFFA8FD0AFFA8A8FD10FF7EFD05%FFA85353FFA87EA9FD08FFA9FD057E7D5985848584858485848584858485%8485848584858485848584858485848584A8FD0FFFA8FD04FFA8A8FD09FF%A9A9FD06FF7E7D7DFFA9A9FD08FFA8FFFFA97EA97E8484AF85AF84AF85AF%84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AFA8FD0EFFA8A8FFFF%FFA8FFA87DA8A8FD07FFA8FD04FFA954FF7E59A8FFA8A8FD07FFA97EFD05%FF597E848B8485848B8485848B8485848B8485848B8485848B8485848B84%8584A8FD0EFFA87DFFA8FFA8FFFFFFA8A8FD06FFA9A9FFFFA9A97EA97EFF%7D7EFFA859A9FD08FFA8A9A8FFA8847EAF84AF858B84AF858B84AF858B84%AF858B84AF85AF84AF858B84AF858B84FD0EFFA87DA8A8A8FD05FFA8FD07%FFA8FFA8A87EFFA8A87D845284FFA87EA8FD08FFA9A97E7E598484857E85%84858485848584858485848584858485848584858485848584A8FD0EFFA9%A8FD0FFFA9A9A8A97EFFFF7D7D7E7E847DA8A9FFA8A9A9FD09FFA87E5A85%7E855A8584AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF858BA8FD%0CFFA8FFA8A8FD08FFA8FD07FF7EFFA8A9FF7D59FFA8FF7EFFA87E7EFFA8%A97EA9FD08FF5984848B84858485848B8485848B8485848B848584AF8485%848B8485848B84A8FD06FFA8FFFF847D7D7DFFA8A8FD08FFA8FD08FF7EFF%FFFF7DA8FD04FF7EFFFFA8537E7DFFA87EFD07FFA85A8B85AF5A8585AF84%AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AFA8FFFFFF7D7D52FFFF%7D84527DA8FF7DA8FD08FFA8A8FD06FF7EA9FD04FFA8FFFFFF7EA9FFA97E%A8537E7DA8A8FD07FFA8597E858484848B84858485848584858485848584%85848584858485848584A8FFA87D7D527DFD05FFA8FFFFFFA8FD09FFA8FD%05FF7EFD05FFA8FFFFA97EFFFFFF7EFFA8A8537E7EFD09FF7D7D85AF7E8B%85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AFA8FD0EFFA8A8%FD08FFA8A884A87DA87DA8FD05FFA8A8A852A8FFFF7EA9FFA8A8537DFF7E%FD04FFFD05A87D8B8484848B8485848B8485848B8485848B8485848B8485%848B848584A8FD0EFFA8A8FD0CFFA97DA8A8FFFFA8A8FF7EA8A8FFFFFFA9%A9FFFFA87E7E7D7DA97EFD04A8FFA8FF7E8484AF7E858484858B84AF858B%84AF858B848B85AF84AF858B84AF858B84FD0EFFA8A8FD0CFF7DA9FFFFA8%A884A87DFD04A8FFFFA9A8FFFF7E538452A8FFA9A8FFA8FD04FFA97E85FD%04847D85848584858485848584845985848584858485848584A8FD0EFFA9%A8FD0BFF7EA9FD05FFA97EA8A8FFA8A8FFFF7EFFFFA97DA97D84FFFFA8FD%07FFA88484AF848584AF85AF84AF85AF84AF85857DA884AF84AF85AF84AF%858BA8FD0EFFA8A8FD08FFA8A87DA87DFFFFFFA87EA8A9A8FFA8FF7DFF7E%A9FFFF7EA8A8A859FFFFA9A9FD06FFA9598584858485848B8485848B8485%848584A8AF848485848B8485848B84A8FD0FFFA8FD08FFA87DFD05FFA8A9%A9FFA9A9FFFFA8A8A8A9FFFF7EA8FFCB7E7DA8FFA8FD07FFA8A885AF5A85%858B84AF858B84AF858B7E7DA8FF8485858B84AF858B848BA8FD0EFFA8A8%FD08FF7DFD05FF7EA9FD04FF7EFFFFFFA87EFFFF7EA97DA8A8A9597DA8A9%A8FD06FFA97D858484848B848584858485848584597DFFFFAF7E85848584%85848584A8FD0FFFA8FD08FFA8A8FFFFA97EFD06FFA9FFFFFFA9FFFFA8A8%A8FFA8A87EFD04A8FD07FFA87E84AF7EAF85AF84AF85AF84AF858B7DFFFF%FFA8A985AF84AF85AF84AFA8FD05FFA8FFFFA8A853537DFF7DA8FD08FF7E%FFA8A97EA8A9FD05FFA8A9FFA9A9A87E7EFD04FFA8A8A8FFA8A8A8FD06FF%A97DFD04848B8485848B8485848553FD05FF7E8B8485848B848584A8FFFF%A87D5252A8FFA87D7D52FFFFA8A8FD08FFA87EA9FFFFFFA9A8FFFFFFA8A9%A9A9A8FFA8A8A8FFA8FFFFFFA8A8FFFFA8FD07FFA87E84AF7E8584AF858B%848B848459A8FD04FFA8A884AF858B84AF858B84FFA8A87D7D7DFD04FFA8%A9FFFFA8A8FD08FF7EA9FD05FFA87EA97EA9FFA97EA8A87E537D7DA8A8FF%FFA8A8FF7DA8A8FD06FF7E7E858484848584858484597D7DFD05FFA87D7E%8584858485848584A8FD04FFA8FD09FFA9A8FD09FFA9FD07FFA9FFFFA9A8%A8FFFFA8FFA8FFA8FFFFFFFD05A8FD07FF598B84AF848584AF8584A8A8FD%08FF848B84AF85AF84AF858BA8FD0EFFA8A8FD08FFA8A8FD09FFA9535252%FF7EFD05FF7DFFFFA9A87DFFA9A9FD04FFA87D84848584858485848584FD%09FFA8848485848B8485848B84A8FD0FFF7DFFA8FD11FF5953A8FF7EFD07%FFA8FFA8FFA8FFA8FFFFFF7EA8848B5AAF85AF5A85858B84FD0AFFA884AF%858B84AF858B848BA8FD0EFFA8A8FFA87EA8A8FFA8FFA8A87DA8A8A87DA8%A8A87D59A8FF7EA9FD06FFA8A9A9A8FFFFA9A9FFA87E848485847E848584%84848B8484FD0AFF8485848584858485848584A8FD0FFFA8FD04FFA9A8A8%7DFD04A8FFA8A97DFD04A8FF7EFD09FFA8FFA8FFFFFFA8FF7E8B84AF85AF%5AAF85AF5A85858B84FD0AFFA884AF85AF84AF85AF84AFA8FD0EFFA8A8FD%06FFA8FD05FF7EA87EFFA8FFA8A97EFD09FFA8AFA8A9FFFFA8A27D858485%848B84845A855A7E848B8484A8FD09FF7E85848B8485848B848584A8FD0E%FFA8A8FD06FFA8FFFFFFA97EA9FFFFFFA8A8A9A9FD0AFFA87EA9FFFFA97E%7E8B84AF858B84AF858584AF85AF848B84FD09FFA88585AF84AF858B84AF%858B84FD09FFA87D847DFFA8A8FD06FFA8FFA8A9A8FD04FFA97E7EFD0BFF%A97DA8FFFFA87E5A8B848584858485848584858485848584857EFD08FFA8%8485848584858485848584A8FFFFFF7D7D7DA8FFA87D5252A8FFA8A8FD06%FFA87EFD05FFA9A9A8FFA8A8A8FD07FFA8A97EA9A8FFA97E84AF85AF84AF%85AF84AF85AF84AF85AF84AF85A8FD08FF7EAF85AF84AF85AF84AF85AF84%FFA8A8525252FFFFA8847D7DA8FFA8A8FD06FF7DFD05FF7EA9A9FFFFFFA8%A8A8FFFFFFA8A97EA9FFA97EFFA8A97D84848B8485848B8485848B848584%8B84858484A8FD07FFA88484AF8485848B8485848B84A8FFFF847D7DA8FD%09FFA8FD06FFA8A8FFFFA97EFD07FFA8A8FFA9A8A9A9FFFFA97EA9FFA9A9%A87D8B84AF858B84AF858B84AF858B84AF858B7EFD08FFA8848B84AF858B%84AF858B848BA8FD0EFFA8A8FD06FFA8A9A8A8A8FD08FFAF7D7EA8FFFFA9%7EA9A87EA8FFA8A9A8848485848584858485848584858485848559A9FD08%FF7E858485848584858485848584A8FD0FFFA8FD05FFA8A8A9A9FD08FFA8%A9A8FFA8A8A8A9A8FFFFFF7EFFFFA9A9FFA88584AF85AF84AF85AF84AF85%AF84AF84A8FD08FFA88485AF84AF85AF84AF85AF84AFA8FD0EFFA8A8FD04%FFA8A8A8FD0AFFA9A9FFA8A87D7DFD05A8A9A8FFA8FFFFA87D85848B8485%848B8485848B84858484A8FD08FFA8848B8485848B8485848B848584A8FD%0EFFA8A8FD04FFA8FD0CFF7EA97EFFA8A8FD04FFA8FFA9FFFFA9FFFFA9A8%848B84AF858B84AF858B84AF858B84FD09FF848B84AF85AF84AF858B84AF%858B84FD0EFFA8A8FD04FFA8FD0DFFA8FF7DFD06FFA8A8A9A8FF7EFFFFFF%7D8584858485848584858485848584857DFD07FFA8848485848584858485%8485848584A8FD0EFFA9A8FD04FFAFFD0EFFA8FD07FFA8FFA8A9A9A9FFFF%A88485AF84AF85AF84AF85AF84AF85AF8484A8FD07FF84AF84AF85AF84AF%85AF84AF858BA8FD0EFFA8A8FD04FFA8FD0DFFA8FD09FFA8A9A8A9A8FFFF%A87D8B8485848B8485848B8485848B84857EFD07FF7D85848584AF848584%8B8485848B84A8FD0FFFA8FD04FFA8FD0CFFA8AFFD0AFFA8FD05FFA88584%AF858B84AF858B84AF858B84AF8584A8FD06FF8484AF858B84AF858B84AF%858B848BA8FD05FFA8FFFFA8A828527DFF7DA8FD04FF7DFD0BFF84A8FD0A%FFA8FFFFFFA8A87D84848584858485848584858485848584858484A8FFFF%FFA8A8848584858485848584858485848584A8A8FFA87D2753A8FFA85953%52FFFFA9A8FD04FFA8A8FD05FFA8FD04FFA9FD0CFFA8FFA88484AF85AF84%AF85AF84AF85AF84AF85AF84AF85AF8484A8FFA884848B84AF85AF84AF85%AF84AF85AF84AFA8FFA87E52527DFD04FFA8FFFFFFA8A8FD04FFA8A8A8FF%FFFF7DFFFD05A8FD0BFF7DA87D848485848B8485848B8485848B8485848B%8485848B848584847E84848B8485848B8485848B8485848B848584A8FFFF%AFA9A8FD09FFA8A8FD04FFA9FFA8FFFFA8FD11FFA8FFA87E84AF858B84AF%858B84AF858B84AF858B84AF858B84AF858B848B858B84AF858B84AF85AF%84AF858B84AF858B84FD0EFFA8A8FD04FFA8A9A8FF7DFD0FFFA8A97DA97E%A27D7E848584858485848584858485848584858485848584858485848584%85848584858485848584858485848584A8FD0EFFA9A8FD06FFA8A8FD11FF%A8FFA8FFA8A85AAF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF%84AF85AF84AF85AF84AF85AF84AF85AF84AF858BA8FD0EFFA8A8FD04FFA8%FD14FFA9FFA8A8FF845A848B8485848B8485848B8485848B8485848B8485%848B8485848B8485848B848584AF8485848B8485848B84A8FD0FFFA8FD04%FFA8FD14FF7EFD04FF845AAF84AF858B84AF858B84AF858B84AF858B84AF%858B84AF858B84AF858B84AF858B84AF858B84AF858B848BA8FD0EFFA8A8%FD04FF7DA8FD10FFA8FFFFA9A8FFFFA85984848584858485848584858485%848584858485848584858485848584858485848584858485848584858485%84A8FD0FFF7DFFA8A97DA9A8A9A9FD05FFA9FFA9A9A8FFFFFFA8A8FFFF7E%FFFFFF848584AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85%AF84AF85AF84AF85AF84AF85AF84AF85AF84AFA8FD0EFFA8A8FFA87EAFFF%FFA8A9A8FFFFA97EA97EA97EA8FFFFA8FFFFA87EA9FFFF7E7E5A8B848584%8B8485848B8485848B8485848B8485848B8485848B8485848B8485848B84%85848B8485848B848584A8FD09FFA8A87DA8FFAFA8FFA8A9FD05FFA97EFF%A9A9FFFFFFA9FFFFA8FFFFFF7DFFFFFF84855AAF84AF858B84AF858B84AF%858B84AF858B84AF858B84AF858B84AF858B84AF858B84AF85AF84AF858B%84AF858BA8FFFFFF7DA87DA8FF7D7D27527DFF7DA8FFFFA8A8FD04FFA87E%A8FFA8A8A9A97EFFA8A8FFFF7DA8FFFFA85A5A8B84858485848584858485%848584858485848584858485848584858485848584858485848584858485%8485848584A8A8A87D52277DA8FFFF7DA87DFFFFA884FFFFFFA8A9FFFF7E%A9FD04FFA9A9A8FFFFFFA8A97EFD04FF7E5AAF85AF84AF85AF84AF85AF84%AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85%AF84AF858BA8FFA8A87DA8A8FD08FFA87EFD04FFA8A87EA9FD0CFF7DA8FF%FFCB7E5A8B848B8485848B8485848B8485848B8485848B8485848B848584%8B8485848B8485848B848584AF8485848B8485848B84A8FD0FFF84A9FFFF%A9FD11FF7EA9FF7E7EAF858B84AF858B84AF858B84AF858B84AF858B84AF%858B84AF858B84AF858B84AF858B84AF858B84AF858B84AF858B848BA8FD%0EFFA88484FF7EA87EA9FD10FF7E7E7E8584858485848584858485848584%858485848584858485848584858485848584858485848584858485848584%858485848584A8FD0FFF84857EA9FFFF7EA9FFFFA9FD0DFF84AF84AF85AF%84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF%85AF84AF85AF84AF85AF84AF85AF84AFA8FD0EFFA88459A8FD04FFA8A9A8%A97EA9A8A8A9FD07FF7E8B8485848B8485848B8485848B8485848B848584%8B8485848B8485848B8485848B8485848B8485848B8485848B8485848B84%8584A8FD0FFF5384FD0CFFA8FD07FF848B84AF858B84AF858B84AF858B84%AF858B84AF858B84AF858B84AF858B84AF858B84AF858B84AF858B84AF85%AF84AF858B84AF858B84FD0EFFA85A59FD0BFFA9A9FD05FFA87E85848584%858485848584858485848584858485848584858485848584858485848584%8584858485848584858485848584858485848584A8FD0FFF847EA8FD0BFF%A8FFFD04A884AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84%AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85AF84AF85%8BA8FD0EFFA884607DA8FD05FFA8847E84598484845A8584858485848584%8B848584858485848584858485848584858485848B848584858485848584%858485848584858485848B848584858485848584A8FD0FFF84A8597D7EA8%7E7E7D7E59845A7E59FD0484A8848484A8848484A8848484A8848484A884%8484A8848484A8848484A8848484A8848484A8848484A8848484A8848484%A8848484A8FD0484A8FD10FFA8FFA8FFA8FFA8FFA9FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8A8A8FF%A8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFA9A8FFA8FFA8FFA8FFA8FD16FF%A8FD58FFA87D5253A8FD06FF7D277DA8FD06FF7D597D7DFD06FF7D52537D%FD07FF527D52FD07FF525252A9FD06FF525952A8FD1AFFAF527D7DFD07FF%525259FD07FF537D7DFD07FF7D5252FD07FFA85252A8FD06FFA85252A8FD%06FFA87D527DFD1BFFA8A8A8FD07FFA8A8A8FD08FFAFA8FD09FFA8A8FD08%FFA8FD09FFAFA8A8FD07FFA8FFA8FD10FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2012-07-01T08:38:15+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>188</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUl85aDPr/lq90i&#xA;CSKGW6CASXEQniAWRXPKIkK9QtKNUeII2KrHvy9/LSx8s3U9+9wmoXRT6vbTmNvUjVZHaUmSRpHZ&#xA;2LLDyrUxRRKa8a4qzvFXnP5mfla3m/VLe8muraG1hhjgEU0DyO0gmLDk6SRkxtzAMf2Sd25UXiqz&#xA;jRNIttI0uCwgVAIwTK6IsQklcl5ZSiUUNJIxdqdziqKuofXtpYOXH1UZOXhyFK7EYq868q/lHb6X&#xA;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&#xA;Hk0UfBV/dxk8UrVqDcnFUxxV2KuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>7.0d20e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -605.927 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 605.927 li
437.211 605.927 li
437.211 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.48 lw
0 lc
0 lj
3.32551 ml
[] 0 dsh
true sadj
402.902 71.27 mo
407.883 71.27 li
34.3828 71.27 mo
29.4028 71.27 li
402.902 121.43 mo
407.883 121.43 li
34.3828 121.43 mo
29.4028 121.43 li
402.902 170.87 mo
407.883 170.87 li
34.3828 170.87 mo
29.4028 170.87 li
402.902 219.89 mo
407.883 219.89 li
34.3828 219.89 mo
29.4028 219.89 li
402.902 268.85 mo
407.883 268.85 li
34.3828 268.85 mo
29.4028 268.85 li
402.902 318.29 mo
407.883 318.29 li
34.3828 318.29 mo
29.4028 318.29 li
402.902 368.45 mo
407.883 368.45 li
34.3828 368.45 mo
29.4028 368.45 li
402.902 419.81 mo
407.883 419.81 li
34.3828 419.81 mo
29.4028 419.81 li
402.902 472.85 mo
407.883 472.85 li
34.3828 472.85 mo
29.4028 472.85 li
402.902 528.17 mo
407.883 528.17 li
34.3828 528.17 mo
29.4028 528.17 li
356.643 20.3301 mo
356.643 15.3501 li
356.643 580.61 mo
356.643 585.59 li
307.383 20.3301 mo
307.383 15.3501 li
307.383 580.61 mo
307.383 585.59 li
258.123 20.3301 mo
258.123 15.3501 li
258.123 580.61 mo
258.123 585.59 li
208.803 20.3301 mo
208.803 15.3501 li
208.803 580.61 mo
208.803 585.59 li
159.543 20.3301 mo
159.543 15.3501 li
159.543 580.61 mo
159.543 585.59 li
110.283 20.3301 mo
110.283 15.3501 li
110.283 580.61 mo
110.283 585.59 li
61.0229 20.3301 mo
61.0229 15.3501 li
61.0229 580.61 mo
61.0229 585.59 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 127 /minus putdup 251 /ring putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings9 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/minus <1C60D8A8C9B7F374C6243061E982D378A14DF0A305> |-/ring <1C60D8A8C9B81F2C3AB44AC12D2792C5C9C4C9726AF3A30C75C2002BD256DEE864B42A7E10A3F44E1A0920781479F8D91E388D682AF8CAC1C75A63FC68C20F32FEA658E7339C978AFADE2A05264581CAB3B8593B6C2665E475B9C7F32C41F29DCD9F00B190D61EFC5EE5413665DB414D1515D74272573B0A559908AF01E929263C20E7F7> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/COQVUO+Helvetica /Helvetica findfont ct_VMDictPut/COQVUO+Helvetica*1 [48{/.notdef}rp /zero /one /two /three /four /five 73{/.notdef}rp /minus 123{/.notdef}rp /ring 4{/.notdef}rp]COQVUO+Helvetica nfCOQVUO+Helvetica*1 [12 0 0 -12 0 0 ]msf52.3438 600.155 mo(20\373)sh52.3438 10.3037 mo(20\373)sh101.609 600.155 mo(25\373)sh101.609 10.3037 mo(25\373)sh150.867 600.155 mo(30\373)sh150.867 10.3037 mo(30\373)sh200.125 600.155 mo(35\373)sh200.125 10.3037 mo(35\373)sh249.445 600.155 mo(40\373)sh249.445 10.3037 mo(40\373)sh298.711 600.155 mo(45\373)sh298.711 10.3037 mo(45\373)sh347.969 600.155 mo(50\373)sh347.969 10.3037 mo(50\373)sh0 532.929 mo(\17730\373)sh412.859 532.929 mo(\17730\373)sh0 477.601 mo(\17725\373)sh412.859 477.601 mo(\17725\373)sh0 424.569 mo(\17720\373)sh412.859 424.569 mo(\17720\373)sh0 373.21 mo(\17715\373)sh412.859 373.21 mo(\17715\373)sh0 323.046 mo(\17710\373)sh412.859 323.046 mo(\17710\373)sh6.6875 273.601 mo(\1775\373)sh412.859 273.601 mo(\1775\373)sh13.6875 224.647 mo(0\373)[6.67383 0 ]xsh412.859 224.647 mo(0\373)[6.67383 0 ]xsh13.6875 175.632 mo(5\373)[6.67383 0 ]xsh412.859 175.632 mo(5\373)[6.67383 0 ]xsh7.02344 126.187 mo(10\373)sh412.859 126.187 mo(10\373)sh7.02344 76.0225 mo(15\373)sh412.859 76.0225 mo(15\373)sh1.5 lw
34.3828 20.3301 mo
402.902 20.3301 li
34.3828 580.61 mo
402.902 580.61 li
402.902 580.61 mo
402.902 20.3301 li
34.3828 580.61 mo
34.3828 20.3301 li
@
258.123 67.1899 mo
256.863 66.1099 li
255.902 67.25 li
256.683 69.5898 li
256.263 70.5498 li
255.243 70.3101 li
254.402 66.4102 li
252.843 65.9902 li
252.603 63.23 li
251.283 62.21 li
250.623 60.3501 li
249.663 53.9902 li
247.503 46.6699 li
243.902 40.0098 li
242.522 39.5303 li
242.163 38.5098 li
241.022 38.5098 li
241.203 37.6099 li
240.482 38.3301 li
239.163 37.6699 li
239.463 36.3501 li
235.803 33.29 li
233.463 33.1099 li
232.623 31.6099 li
231.543 25.73 li
230.522 23.6899 li
230.823 24.0498 li
231.183 23.0898 li
230.463 20.3301 li
258.123 20.3301 li
258.123 67.1899 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
231.723 105.17 mo
231.303 103.43 li
229.743 102.95 li
229.383 103.49 li
228.423 102.59 li
228.663 99.8301 li
229.863 98.75 li
231.183 99.4697 li
231.723 98.6299 li
233.283 98.4502 li
234.303 101.33 li
232.563 104.99 li
231.723 105.17 li
f
.72 lw
231.723 105.17 mo
231.303 103.43 li
229.743 102.95 li
229.383 103.49 li
228.423 102.59 li
228.663 99.8301 li
229.863 98.75 li
231.183 99.4697 li
231.723 98.6299 li
233.283 98.4502 li
234.303 101.33 li
232.563 104.99 li
231.723 105.17 li
cp
258.123 67.1899 mo
256.863 66.1099 li
255.902 67.25 li
256.683 69.5898 li
256.263 70.5498 li
255.243 70.3101 li
254.402 66.4102 li
252.843 65.9902 li
252.603 63.23 li
251.283 62.21 li
250.623 60.3501 li
249.663 53.9902 li
247.503 46.6699 li
243.902 40.0098 li
242.522 39.5303 li
242.163 38.5098 li
241.022 38.5098 li
241.203 37.6099 li
240.482 38.3301 li
239.163 37.6699 li
239.463 36.3501 li
235.803 33.29 li
233.463 33.1099 li
232.623 31.6099 li
231.543 25.73 li
230.522 23.6899 li
230.823 24.0498 li
231.183 23.0898 li
230.463 20.3301 li
0 0 0 1 cmyk
@
263.402 20.3301 mo
264.363 22.25 li
265.323 21.9502 li
265.923 22.73 li
265.743 23.9902 li
267.543 25.1899 li
267.482 26.6299 li
268.623 29.0303 li
269.522 29.3901 li
269.223 30.77 li
270.363 31.9102 li
270.003 33.3501 li
272.103 35.27 li
274.263 40.6099 li
280.863 46.25 li
281.463 50.75 li
281.463 49.0098 li
283.263 50.8701 li
283.083 52.0698 li
284.763 53.5698 li
286.083 60.4697 li
285.843 62.3901 li
284.583 64.1899 li
285.783 68.4502 li
285.423 69.1699 li
284.703 67.5498 li
284.522 68.75 li
283.743 68.9302 li
286.143 69.71 li
287.163 72.0498 li
287.043 73.1899 li
286.383 72.3501 li
287.883 76.9697 li
287.402 76.4902 li
290.522 84.5298 li
290.043 88.9102 li
292.563 93.23 li
292.263 94.73 li
293.583 94.0098 li
297.183 95.5698 li
301.683 94.79 li
303.363 93.3501 li
306.183 94.25 li
306.663 93.8301 li
305.942 93.5298 li
307.383 92.9902 li
307.083 93.71 li
307.803 93.9502 li
308.703 91.6699 li
311.163 90.8901 li
313.863 88.0098 li
324.063 87.1699 li
330.963 84.9502 li
336.723 80.9302 li
338.823 81.71 li
343.863 80.9902 li
346.803 78.1099 li
347.522 76.3101 li
350.163 74.9302 li
355.982 72.8301 li
356.643 72.8901 li
356.643 106.13 li
352.442 106.97 li
351.003 108.11 li
346.442 109.07 li
342.183 108.35 li
338.463 110.21 li
334.022 110.57 li
331.143 109.73 li
323.823 113.99 li
321.603 114.65 li
315.303 112.79 li
306.963 117.41 li
303.183 117.71 li
300.482 117.23 li
296.522 114.17 li
292.683 109.31 li
292.563 107.57 li
290.043 106.79 li
289.203 105.35 li
285.723 105.65 li
283.982 106.85 li
283.022 106.25 li
283.022 105.59 li
284.522 105.95 li
285.543 104.03 li
288.243 103.43 li
289.442 101.99 li
291.363 101.63 li
291.783 99.8901 li
290.883 96.71 li
287.703 92.5098 li
286.923 93.6499 li
285.543 93.0498 li
285.123 91.0698 li
283.263 89.1499 li
281.643 89.3901 li
280.143 85.0698 li
279.423 84.8301 li
280.143 86.0298 li
277.503 82.9102 li
274.743 82.0698 li
269.823 75.1099 li
265.803 74.27 li
265.203 72.29 li
264.183 72.3501 li
264.363 71.6899 li
263.343 71.0898 li
263.163 71.75 li
261.902 71.3301 li
261.183 72.23 li
260.163 71.8101 li
258.303 68.8701 li
258.963 67.9102 li
258.123 67.1899 li
258.123 20.3301 li
263.402 20.3301 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
356.643 106.13 mo
352.442 106.97 li
351.003 108.11 li
346.442 109.07 li
342.183 108.35 li
338.463 110.21 li
334.022 110.57 li
331.143 109.73 li
323.823 113.99 li
321.603 114.65 li
315.303 112.79 li
306.963 117.41 li
303.183 117.71 li
300.482 117.23 li
296.522 114.17 li
292.683 109.31 li
292.563 107.57 li
290.043 106.79 li
289.203 105.35 li
285.723 105.65 li
283.982 106.85 li
283.022 106.25 li
283.022 105.59 li
284.522 105.95 li
285.543 104.03 li
288.243 103.43 li
289.442 101.99 li
291.363 101.63 li
291.783 99.8901 li
290.883 96.71 li
287.703 92.5098 li
286.923 93.6499 li
285.543 93.0498 li
285.123 91.0698 li
283.263 89.1499 li
281.643 89.3901 li
280.143 85.0698 li
279.423 84.8301 li
280.143 86.0298 li
277.503 82.9102 li
274.743 82.0698 li
269.823 75.1099 li
265.803 74.27 li
265.203 72.29 li
264.183 72.3501 li
264.363 71.6899 li
263.343 71.0898 li
263.163 71.75 li
261.902 71.3301 li
261.183 72.23 li
260.163 71.8101 li
258.303 68.8701 li
258.963 67.9102 li
258.123 67.1899 li
263.402 20.3301 mo
264.363 22.25 li
265.323 21.9502 li
265.923 22.73 li
265.743 23.9902 li
267.543 25.1899 li
267.482 26.6299 li
268.623 29.0303 li
269.522 29.3901 li
269.223 30.77 li
270.363 31.9102 li
270.003 33.3501 li
272.103 35.27 li
274.263 40.6099 li
280.863 46.25 li
281.463 50.75 li
281.463 49.0098 li
283.263 50.8701 li
283.083 52.0698 li
284.763 53.5698 li
286.083 60.4697 li
285.843 62.3901 li
284.583 64.1899 li
285.783 68.4502 li
285.423 69.1699 li
284.703 67.5498 li
284.522 68.75 li
283.743 68.9302 li
286.143 69.71 li
287.163 72.0498 li
287.043 73.1899 li
286.383 72.3501 li
287.883 76.9697 li
287.402 76.4902 li
290.522 84.5298 li
290.043 88.9102 li
292.563 93.23 li
292.263 94.73 li
293.583 94.0098 li
297.183 95.5698 li
301.683 94.79 li
303.363 93.3501 li
306.183 94.25 li
306.663 93.8301 li
305.942 93.5298 li
307.383 92.9902 li
307.083 93.71 li
307.803 93.9502 li
308.703 91.6699 li
311.163 90.8901 li
313.863 88.0098 li
324.063 87.1699 li
330.963 84.9502 li
336.723 80.9302 li
338.823 81.71 li
343.863 80.9902 li
346.803 78.1099 li
347.522 76.3101 li
350.163 74.9302 li
355.982 72.8301 li
356.643 72.8901 li
0 0 0 1 cmyk
@
396.063 98.27 mo
401.402 95.9297 li
397.143 94.4902 li
393.843 95.5098 li
392.643 94.4297 li
391.203 94.3701 li
389.223 96.1099 li
391.683 98.0898 li
396.063 98.27 li
365.283 121.43 mo
365.583 118.31 li
368.402 117.23 li
370.203 117.83 li
370.623 117.05 li
368.283 115.85 li
368.823 117.11 li
366.723 117.29 li
368.223 115.73 li
367.683 111.89 li
368.343 110.09 li
367.503 109.73 li
367.323 108.35 li
369.363 103.19 li
364.503 101.63 li
362.343 102.47 li
361.442 104.33 li
359.283 105.65 li
356.643 106.13 li
356.643 72.8901 li
358.442 72.8901 li
361.383 71.0898 li
370.143 68.9297 li
378.303 65.0898 li
377.883 61.1299 li
379.022 58.6099 li
381.123 56.6299 li
388.863 53.8701 li
391.982 53.5098 li
396.603 50.9902 li
402.243 50.6299 li
402.902 50.9902 li
402.902 121.43 li
365.283 121.43 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
396.063 98.27 mo
401.402 95.9297 li
397.143 94.4902 li
393.843 95.5098 li
392.643 94.4297 li
391.203 94.3701 li
389.223 96.1099 li
391.683 98.0898 li
396.063 98.27 li
cp
365.283 121.43 mo
365.583 118.31 li
368.402 117.23 li
370.203 117.83 li
370.623 117.05 li
368.283 115.85 li
368.823 117.11 li
366.723 117.29 li
368.223 115.73 li
367.683 111.89 li
368.343 110.09 li
367.503 109.73 li
367.323 108.35 li
369.363 103.19 li
364.503 101.63 li
362.343 102.47 li
361.442 104.33 li
359.283 105.65 li
356.643 106.13 li
356.643 72.8901 mo
358.442 72.8901 li
361.383 71.0898 li
370.143 68.9302 li
378.303 65.0898 li
377.883 61.1299 li
379.022 58.6099 li
381.123 56.6299 li
388.863 53.8701 li
391.982 53.5098 li
396.603 50.9902 li
402.243 50.6299 li
402.902 50.9902 li
0 0 0 1 cmyk
@
45.2427 219.89 mo
43.6826 219.35 li
43.3228 219.89 li
42.7827 219.89 li
44.3428 212.03 li
45.7827 209.57 li
54.3628 202.79 li
61.0229 200.87 li
61.0229 201.53 li
55.9229 204.05 li
53.2827 204.41 li
46.9829 209.27 li
45.1826 211.49 li
43.9829 218.75 li
44.5229 218.57 li
44.3428 219.05 li
45.4829 219.89 li
45.2427 219.89 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
38.8228 219.89 mo
40.6826 215.81 li
39.7227 209.75 li
41.8828 204.59 li
42.063 197.87 li
43.4429 196.07 li
42.123 199.49 li
42.063 204.83 li
40.1426 209.93 li
40.9829 216.23 li
39.3628 219.89 li
38.8228 219.89 li
f
45.2427 219.89 mo
43.6826 219.35 li
43.3228 219.89 li
42.7827 219.89 mo
44.3428 212.03 li
45.7827 209.57 li
54.3628 202.79 li
61.0229 200.87 li
61.0229 201.53 mo
55.9229 204.05 li
53.2827 204.41 li
46.9829 209.27 li
45.1826 211.49 li
43.9829 218.75 li
44.5229 218.57 li
44.3428 219.05 li
45.4829 219.89 li
38.8228 219.89 mo
40.6826 215.81 li
39.7227 209.75 li
41.8828 204.59 li
42.063 197.87 li
43.4429 196.07 li
42.123 199.49 li
42.063 204.83 li
40.1426 209.93 li
40.9829 216.23 li
39.3628 219.89 li
0 0 0 1 cmyk
@
61.0229 200.87 mo
63.063 200.27 li
71.2227 199.85 li
81.7227 198.11 li
85.3828 198.59 li
87.2427 199.31 li
88.8027 200.93 li
90.4829 201.05 li
96.7227 208.37 li
102.063 210.41 li
103.503 212.39 li
105.543 212.45 li
106.263 213.17 li
103.143 212.45 li
101.643 210.41 li
97.1426 209.09 li
90.8428 202.01 li
87.543 200.99 li
84.4829 198.83 li
76.5029 199.07 li
71.9429 201.11 li
65.7026 200.51 li
61.623 201.17 li
61.0229 201.53 li
61.0229 200.87 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
61.0229 200.87 mo
63.063 200.27 li
71.2227 199.85 li
81.7227 198.11 li
85.3828 198.59 li
87.2427 199.31 li
88.8027 200.93 li
90.4829 201.05 li
96.7227 208.37 li
102.063 210.41 li
103.503 212.39 li
105.543 212.45 li
106.263 213.17 li
103.143 212.45 li
101.643 210.41 li
97.1426 209.09 li
90.8428 202.01 li
87.543 200.99 li
84.4829 198.83 li
76.5029 199.07 li
71.9429 201.11 li
65.7026 200.51 li
61.623 201.17 li
61.0229 201.53 li
0 0 0 1 cmyk
@
182.943 219.89 mo
182.883 219.05 li
183.663 218.69 li
183.543 219.53 li
184.863 219.41 li
184.803 218.03 li
185.703 217.01 li
185.703 218.21 li
186.543 218.15 li
185.763 218.99 li
187.923 217.97 li
188.103 219.17 li
188.883 218.99 li
190.083 218.03 li
189.843 217.31 li
190.443 217.79 li
190.683 216.77 li
191.763 216.23 li
190.983 215.69 li
192.723 215.03 li
192.243 216.41 li
193.743 216.41 li
194.163 217.13 li
193.023 217.07 li
193.923 218.09 li
193.983 217.61 li
194.283 218.15 li
195.123 217.79 li
195.423 216.71 li
196.563 216.77 li
196.083 217.91 li
196.923 217.55 li
197.163 218.33 li
198.843 217.19 li
198.903 219.89 li
182.943 219.89 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
181.983 219.89 mo
181.743 219.41 li
182.523 219.89 li
181.983 219.89 li
f
181.263 219.89 mo
181.323 219.53 li
181.803 219.89 li
181.263 219.89 li
f
184.803 205.97 mo
184.743 204.89 li
186.003 205.25 li
187.323 204.23 li
187.083 204.83 li
189.123 204.89 li
190.083 203.75 li
190.323 204.23 li
191.643 203.33 li
191.943 203.87 li
193.443 202.49 li
193.323 203.57 li
193.983 203.69 li
190.083 205.07 li
191.883 205.37 li
190.683 205.97 li
191.043 206.33 li
192.423 205.97 li
191.763 207.95 li
188.403 205.85 li
187.503 206.09 li
187.803 207.17 li
187.023 205.97 li
186.363 206.21 li
186.903 207.11 li
184.803 205.97 li
f
220.383 174.29 mo
221.103 179.27 li
220.442 181.13 li
221.283 183.11 li
220.803 187.31 li
222.902 190.67 li
225.482 191.63 li
225.603 195.59 li
224.823 196.37 li
223.982 196.25 li
222.482 191.99 li
221.103 190.67 li
219.963 190.61 li
220.143 188.39 li
218.223 187.31 li
218.103 185.15 li
217.803 185.75 li
217.083 184.31 li
218.163 175.01 li
218.703 174.47 li
219.063 175.49 li
219.063 174.47 li
220.383 174.23 li
220.383 174.29 li
f
164.763 209.99 mo
164.523 208.01 li
163.383 207.05 li
164.463 205.13 li
171.783 199.13 li
174.063 196.37 li
172.923 197.75 li
173.463 201.11 li
172.263 203.21 li
168.903 205.01 li
165.483 209.81 li
164.763 209.99 li
f
239.823 155.27 mo
236.883 160.55 li
235.323 160.91 li
235.383 159.89 li
237.303 158.93 li
237.003 156.11 li
238.442 154.91 li
239.043 155.57 li
239.763 155.15 li
239.823 155.27 li
f
181.983 219.89 mo
181.743 219.41 li
182.523 219.89 li
181.263 219.89 mo
181.323 219.53 li
181.803 219.89 li
239.823 155.27 mo
236.883 160.55 li
235.323 160.91 li
235.383 159.89 li
237.303 158.93 li
237.003 156.11 li
238.442 154.91 li
239.043 155.57 li
239.763 155.15 li
239.823 155.27 li
cp
164.763 209.99 mo
164.523 208.01 li
163.383 207.05 li
164.463 205.13 li
171.783 199.13 li
174.063 196.37 li
172.923 197.75 li
173.463 201.11 li
172.263 203.21 li
168.903 205.01 li
165.483 209.81 li
164.763 209.99 li
cp
220.383 174.29 mo
221.103 179.27 li
220.442 181.13 li
221.283 183.11 li
220.803 187.31 li
222.902 190.67 li
225.482 191.63 li
225.603 195.59 li
224.823 196.37 li
223.982 196.25 li
222.482 191.99 li
221.103 190.67 li
219.963 190.61 li
220.143 188.39 li
218.223 187.31 li
218.103 185.15 li
217.803 185.75 li
217.083 184.31 li
218.163 175.01 li
218.703 174.47 li
219.063 175.49 li
219.063 174.47 li
220.383 174.23 li
220.383 174.29 li
cp
184.803 205.97 mo
184.743 204.89 li
186.003 205.25 li
187.323 204.23 li
187.083 204.83 li
189.123 204.89 li
190.083 203.75 li
190.323 204.23 li
191.643 203.33 li
191.943 203.87 li
193.443 202.49 li
193.323 203.57 li
193.983 203.69 li
190.083 205.07 li
191.883 205.37 li
190.683 205.97 li
191.043 206.33 li
192.423 205.97 li
191.763 207.95 li
188.403 205.85 li
187.503 206.09 li
187.803 207.17 li
187.023 205.97 li
186.363 206.21 li
186.903 207.11 li
184.803 205.97 li
cp
182.943 219.89 mo
182.883 219.05 li
183.663 218.69 li
183.543 219.53 li
184.863 219.41 li
184.803 218.03 li
185.703 217.01 li
185.703 218.21 li
186.543 218.15 li
185.763 218.99 li
187.923 217.97 li
188.103 219.17 li
188.883 218.99 li
190.083 218.03 li
189.843 217.31 li
190.443 217.79 li
190.683 216.77 li
191.763 216.23 li
190.983 215.69 li
192.723 215.03 li
192.243 216.41 li
193.743 216.41 li
194.163 217.13 li
193.023 217.07 li
193.923 218.09 li
193.983 217.61 li
194.283 218.15 li
195.123 217.79 li
195.423 216.71 li
196.563 216.77 li
196.083 217.91 li
196.923 217.55 li
197.163 218.33 li
198.843 217.19 li
198.903 219.89 li
0 0 0 1 cmyk
@
286.803 219.89 mo
293.163 212.87 li
305.103 203.09 li
317.343 196.07 li
336.603 175.97 li
346.323 161.09 li
348.902 153.71 li
354.963 143.87 li
354.902 142.01 li
356.643 140.51 li
356.643 219.89 li
286.803 219.89 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
286.803 219.89 mo
293.163 212.87 li
305.103 203.09 li
317.343 196.07 li
336.603 175.97 li
346.323 161.09 li
348.902 153.71 li
354.963 143.87 li
354.902 142.01 li
356.643 140.51 li
0 0 0 1 cmyk
@
356.643 140.51 mo
357.902 139.37 li
360.783 132.77 li
362.883 130.79 li
363.183 129.29 li
364.863 127.25 li
365.283 121.43 li
402.902 121.43 li
402.902 219.89 li
356.643 219.89 li
356.643 140.51 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
356.643 140.51 mo
357.902 139.37 li
360.783 132.77 li
362.883 130.79 li
363.183 129.29 li
364.863 127.25 li
365.283 121.43 li
0 0 0 1 cmyk
@
39.3628 219.89 mo
38.6426 221.57 li
39.1826 224.03 li
42.6626 220.55 li
42.7827 219.89 li
43.3228 219.89 li
39.123 225.77 li
34.7427 230.15 li
34.3828 230.15 li
34.3828 229.13 li
35.5229 228.59 li
36.0029 227.33 li
37.563 226.25 li
38.3428 224.21 li
38.043 221.57 li
38.8228 219.89 li
39.3628 219.89 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
45.4829 219.89 mo
45.6626 220.01 li
45.2427 219.89 li
45.4829 219.89 li
f
43.1426 246.17 mo
44.2827 240.59 li
43.1426 239.69 li
42.9629 237.77 li
41.7627 237.35 li
41.8228 236.75 li
42.4829 236.03 li
43.3228 236.87 li
43.0229 235.91 li
43.6826 235.37 li
44.4629 236.21 li
46.3828 235.31 li
45.7227 236.69 li
44.2827 237.29 li
44.043 238.97 li
44.8228 239.63 li
45.603 239.21 li
45.3027 241.25 li
47.2227 240.53 li
45.603 241.67 li
46.1426 241.97 li
45.2427 242.33 li
44.103 244.01 li
43.6826 246.17 li
43.1426 246.17 li
f
45.4829 219.89 mo
45.6626 220.01 li
45.2427 219.89 li
39.3628 219.89 mo
38.6426 221.57 li
39.1826 224.03 li
42.6626 220.55 li
42.7827 219.89 li
34.3828 229.13 mo
35.5229 228.59 li
36.0029 227.33 li
37.563 226.25 li
38.3428 224.21 li
38.043 221.57 li
38.8228 219.89 li
43.3228 219.89 mo
39.123 225.77 li
34.7427 230.15 li
34.3828 230.15 li
43.1426 246.17 mo
44.2827 240.59 li
43.1426 239.69 li
42.9629 237.77 li
41.7627 237.35 li
41.8228 236.75 li
42.4829 236.03 li
43.3228 236.87 li
43.0229 235.91 li
43.6826 235.37 li
44.4629 236.21 li
46.3828 235.31 li
45.7227 236.69 li
44.2827 237.29 li
44.043 238.97 li
44.8228 239.63 li
45.603 239.21 li
45.3027 241.25 li
47.2227 240.53 li
45.603 241.67 li
46.1426 241.97 li
45.2427 242.33 li
44.103 244.01 li
43.6826 246.17 li
43.1426 246.17 li
cp
0 0 0 1 cmyk
@
159.543 289.97 mo
159.243 289.67 li
157.383 289.07 li
155.103 286.37 li
154.503 283.79 li
151.563 279.53 li
151.503 277.91 li
152.883 276.95 li
153.423 275.09 li
150.663 269.63 li
150.783 265.13 li
151.683 264.11 li
152.043 259.55 li
151.083 262.43 li
150.123 262.07 li
150.723 261.11 li
151.143 252.83 li
152.763 252.65 li
152.943 256.79 li
156.183 263.21 li
155.463 267.89 li
157.383 268.97 li
157.803 270.41 li
156.963 273.29 li
159.063 276.95 li
159.003 277.91 li
156.903 279.23 li
156.723 281.27 li
159.123 283.73 li
159.543 283.61 li
159.543 289.97 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
159.543 303.95 mo
158.643 304.25 li
156.303 306.89 li
156.363 307.85 li
154.023 307.85 li
156.603 303.229 li
159.543 303.53 li
159.543 303.95 li
f
148.143 244.01 mo
148.143 243.05 li
149.403 242.15 li
148.563 242.63 li
148.983 241.85 li
148.383 241.97 li
148.743 240.89 li
148.263 240.83 li
149.403 239.87 li
148.563 239.57 li
150.663 236.21 li
150.483 235.73 li
149.883 236.45 li
150.363 235.43 li
152.223 236.51 li
153.363 239.75 li
152.163 240.41 li
152.403 241.13 li
151.683 241.13 li
151.683 241.91 li
150.183 243.35 li
149.943 242.27 li
148.143 244.07 li
148.143 244.01 li
f
142.923 313.49 mo
143.163 309.17 li
148.563 303.29 li
150.723 304.37 li
151.203 304.97 li
150.603 306.71 li
146.883 311.45 li
146.943 312.77 li
145.023 312.65 li
144.723 311.99 li
144.363 313.01 li
145.023 313.43 li
142.923 313.55 li
142.923 313.49 li
f
153.423 226.31 mo
152.763 224.69 li
154.623 221.51 li
156.603 220.61 li
157.803 221.51 li
158.643 221.27 li
157.743 223.61 li
156.303 224.21 li
155.223 225.83 li
153.423 226.25 li
153.423 226.31 li
f
159.543 303.95 mo
158.643 304.25 li
156.303 306.89 li
156.363 307.85 li
154.023 307.85 li
156.603 303.229 li
159.543 303.53 li
153.423 226.31 mo
152.763 224.69 li
154.623 221.51 li
156.603 220.61 li
157.803 221.51 li
158.643 221.27 li
157.743 223.61 li
156.303 224.21 li
155.223 225.83 li
153.423 226.25 li
153.423 226.31 li
cp
142.923 313.49 mo
143.163 309.17 li
148.563 303.29 li
150.723 304.37 li
151.203 304.97 li
150.603 306.71 li
146.883 311.45 li
146.943 312.77 li
145.023 312.65 li
144.723 311.99 li
144.363 313.01 li
145.023 313.43 li
142.923 313.55 li
142.923 313.49 li
cp
148.143 244.01 mo
148.143 243.05 li
149.403 242.15 li
148.563 242.63 li
148.983 241.85 li
148.383 241.97 li
148.743 240.89 li
148.263 240.83 li
149.403 239.87 li
148.563 239.57 li
150.663 236.21 li
150.483 235.73 li
149.883 236.45 li
150.363 235.43 li
152.223 236.51 li
153.363 239.75 li
152.163 240.41 li
152.403 241.13 li
151.683 241.13 li
151.683 241.91 li
150.183 243.35 li
149.943 242.27 li
148.143 244.07 li
148.143 244.01 li
cp
159.543 289.97 mo
159.243 289.67 li
157.383 289.07 li
155.103 286.37 li
154.503 283.79 li
151.563 279.53 li
151.503 277.91 li
152.883 276.95 li
153.423 275.09 li
150.663 269.63 li
150.783 265.13 li
151.683 264.11 li
152.043 259.55 li
151.083 262.43 li
150.123 262.07 li
150.723 261.11 li
151.143 252.83 li
152.763 252.65 li
152.943 256.79 li
156.183 263.21 li
155.463 267.89 li
157.383 268.97 li
157.803 270.41 li
156.963 273.29 li
159.063 276.95 li
159.003 277.91 li
156.903 279.23 li
156.723 281.27 li
159.123 283.73 li
159.543 283.61 li
0 0 0 1 cmyk
@
252.003 278.69 mo
251.163 275.99 li
250.923 277.37 li
250.022 277.85 li
250.022 280.31 li
252.243 282.59 li
252.363 281.69 li
253.263 283.43 li
253.923 282.59 li
253.503 280.55 li
253.083 279.95 li
253.263 280.67 li
252.243 280.67 li
252.003 278.69 li
256.383 318.29 mo
255.723 318.05 li
255.482 318.29 li
255.303 318.29 li
256.022 316.61 li
255.243 315.71 li
254.942 313.31 li
253.442 312.05 li
254.643 311.93 li
254.283 308.99 li
253.563 308.69 li
254.103 309.83 li
253.563 309.29 li
253.143 310.25 li
253.083 307.67 li
251.823 307.79 li
252.123 307.07 li
253.743 307.61 li
252.482 305.75 li
251.522 305.45 li
251.823 304.61 li
250.743 301.31 li
251.703 301.19 li
251.283 300.41 li
251.763 300.53 li
252.603 298.61 li
252.063 297.65 li
252.663 296.57 li
252.063 296.81 li
251.823 296.15 li
250.923 297.71 li
251.463 295.73 li
251.283 296.03 li
250.923 294.53 li
251.703 291.71 li
252.482 290.33 li
253.683 289.85 li
253.683 288.71 li
252.783 287.15 li
251.343 286.73 li
251.103 287.27 li
251.043 285.95 li
248.703 283.37 li
246.723 282.59 li
246.843 280.43 li
246.003 279.23 li
248.223 273.59 li
247.683 272.93 li
248.463 272.87 li
249.603 270.05 li
249.063 269.51 li
249.902 269.03 li
249.303 268.07 li
249.963 267.41 li
249.963 268.31 li
250.383 267.41 li
249.843 266.75 li
250.263 265.73 li
250.982 264.89 li
252.123 265.43 li
252.063 264.71 li
252.723 264.71 li
254.883 259.97 li
253.803 259.91 li
253.803 259.31 li
255.183 259.61 li
256.803 256.13 li
255.963 255.29 li
256.803 255.47 li
257.763 252.47 li
257.823 253.07 li
258.123 252.89 li
258.123 318.29 li
256.383 318.29 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
198.843 318.29 mo
198.183 315.29 li
198.243 315.29 li
198.543 313.55 li
199.383 313.13 li
203.943 317.99 li
204.003 318.29 li
198.843 318.29 li
f
159.543 303.53 mo
160.563 303.59 li
159.543 303.95 li
159.543 303.53 li
f
159.543 283.61 mo
161.043 283.25 li
165.183 288.23 li
165.063 289.55 li
164.463 289.67 li
165.543 292.07 li
165.303 293.63 li
168.903 299.51 li
169.143 301.13 li
170.823 302.63 li
171.183 305.87 li
170.763 305.45 li
169.623 306.35 li
166.203 303.229 li
164.883 304.25 li
165.243 303.47 li
164.223 303.53 li
163.923 302.75 li
165.123 301.43 li
165.303 299.87 li
162.243 296.93 li
160.983 291.41 li
159.543 289.97 li
159.543 283.61 li
f
181.803 219.89 mo
182.103 220.07 li
181.983 219.89 li
182.523 219.89 li
182.943 220.13 li
182.943 219.89 li
198.903 219.89 li
198.963 220.25 li
199.563 220.97 li
200.283 220.43 li
199.803 221.39 li
201.423 222.35 li
201.723 223.73 li
202.803 222.71 li
202.383 221.75 li
206.223 220.73 li
207.243 222.89 li
203.463 223.25 li
203.943 224.45 li
203.163 225.05 li
202.863 224.27 li
202.323 224.63 li
201.063 223.97 li
199.563 225.41 li
199.323 227.03 li
200.763 228.41 li
200.283 229.73 li
199.383 229.67 li
199.923 229.85 li
197.643 232.13 li
198.843 233.27 li
197.043 232.85 li
197.583 233.69 li
196.803 233.57 li
198.543 234.77 li
195.543 234.29 li
195.903 234.83 li
195.183 235.19 li
196.023 236.27 li
194.403 236.33 li
195.483 237.23 li
193.803 238.01 li
192.783 237.47 li
191.943 238.73 li
193.623 238.31 li
194.583 239.69 li
193.143 239.15 li
192.843 239.99 li
191.223 239.87 li
191.283 240.83 li
192.663 241.13 li
195.063 241.25 li
196.623 240.29 li
197.343 241.67 li
193.083 244.07 li
193.623 244.31 li
193.323 244.91 li
191.103 244.49 li
190.143 243.29 li
188.283 243.53 li
187.803 245.69 li
188.403 247.49 li
189.363 248.09 li
188.103 247.31 li
186.723 249.41 li
187.083 248.45 li
186.363 247.91 li
187.563 247.55 li
187.803 246.77 li
187.083 245.75 li
187.503 244.49 li
185.943 244.55 li
185.703 243.17 li
184.383 244.97 li
184.683 243.77 li
182.943 243.71 li
182.343 242.15 li
181.443 241.91 li
180.903 243.23 li
179.823 243.41 li
180.843 244.85 li
179.523 244.13 li
178.563 245.33 li
179.523 246.89 li
178.263 245.69 li
177.243 247.61 li
176.943 245.93 li
177.903 245.45 li
176.883 245.57 li
176.463 244.79 li
177.243 244.07 li
176.883 242.69 li
175.683 243.05 li
176.403 239.51 li
175.443 239.87 li
177.963 231.23 li
177.963 229.97 li
177.543 229.55 li
177.003 230.21 li
177.003 228.41 li
176.283 227.75 li
177.663 224.63 li
179.643 223.01 li
178.503 221.81 li
178.503 221.15 li
180.003 220.85 li
179.463 220.37 li
181.143 220.61 li
181.263 219.89 li
181.803 219.89 li
f
206.403 256.91 mo
206.943 256.25 li
206.103 256.19 li
207.063 255.29 li
208.623 255.17 li
211.803 252.59 li
212.163 253.73 li
210.723 255.59 li
206.943 257.09 li
206.403 256.91 li
f
178.443 294.17 mo
184.203 298.61 li
184.563 299.63 li
180.663 297.77 li
178.623 298.43 li
177.003 295.19 li
178.443 294.17 li
f
182.523 219.89 mo
182.943 220.13 li
182.943 219.89 li
181.803 219.89 mo
182.103 220.07 li
181.983 219.89 li
159.543 303.53 mo
160.563 303.59 li
159.543 303.95 li
178.443 294.17 mo
184.203 298.61 li
184.563 299.63 li
180.663 297.77 li
178.623 298.43 li
177.003 295.19 li
178.443 294.17 li
cp
198.843 318.29 mo
198.183 315.29 li
198.243 315.29 li
198.543 313.55 li
199.383 313.13 li
203.943 317.99 li
204.003 318.29 li
206.403 256.91 mo
206.943 256.25 li
206.103 256.19 li
207.063 255.29 li
208.623 255.17 li
211.803 252.59 li
212.163 253.73 li
210.723 255.59 li
206.943 257.09 li
206.403 256.91 li
cp
159.543 283.61 mo
161.043 283.25 li
165.183 288.23 li
165.063 289.55 li
164.463 289.67 li
165.543 292.07 li
165.303 293.63 li
168.903 299.51 li
169.143 301.13 li
170.823 302.63 li
171.183 305.87 li
170.763 305.45 li
169.623 306.35 li
166.203 303.229 li
164.883 304.25 li
165.243 303.47 li
164.223 303.53 li
163.923 302.75 li
165.123 301.43 li
165.303 299.87 li
162.243 296.93 li
160.983 291.41 li
159.543 289.97 li
198.903 219.89 mo
198.963 220.25 li
199.563 220.97 li
200.283 220.43 li
199.803 221.39 li
201.423 222.35 li
201.723 223.73 li
202.803 222.71 li
202.383 221.75 li
206.223 220.73 li
207.243 222.89 li
203.463 223.25 li
203.943 224.45 li
203.163 225.05 li
202.863 224.27 li
202.323 224.63 li
201.063 223.97 li
199.563 225.41 li
199.323 227.03 li
200.763 228.41 li
200.283 229.73 li
199.383 229.67 li
199.923 229.85 li
197.643 232.13 li
198.843 233.27 li
197.043 232.85 li
197.583 233.69 li
196.803 233.57 li
198.543 234.77 li
195.543 234.29 li
195.903 234.83 li
195.183 235.19 li
196.023 236.27 li
194.403 236.33 li
195.483 237.23 li
193.803 238.01 li
192.783 237.47 li
191.943 238.73 li
193.623 238.31 li
194.583 239.69 li
193.143 239.15 li
192.843 239.99 li
191.223 239.87 li
191.283 240.83 li
192.663 241.13 li
195.063 241.25 li
196.623 240.29 li
197.343 241.67 li
193.083 244.07 li
193.623 244.31 li
193.323 244.91 li
191.103 244.49 li
190.143 243.29 li
188.283 243.53 li
187.803 245.69 li
188.403 247.49 li
189.363 248.09 li
188.103 247.31 li
186.723 249.41 li
187.083 248.45 li
186.363 247.91 li
187.563 247.55 li
187.803 246.77 li
187.083 245.75 li
187.503 244.49 li
185.943 244.55 li
185.703 243.17 li
184.383 244.97 li
184.683 243.77 li
182.943 243.71 li
182.343 242.15 li
181.443 241.91 li
180.903 243.23 li
179.823 243.41 li
180.843 244.85 li
179.523 244.13 li
178.563 245.33 li
179.523 246.89 li
178.263 245.69 li
177.243 247.61 li
176.943 245.93 li
177.903 245.45 li
176.883 245.57 li
176.463 244.79 li
177.243 244.07 li
176.883 242.69 li
175.683 243.05 li
176.403 239.51 li
175.443 239.87 li
177.963 231.23 li
177.963 229.97 li
177.543 229.55 li
177.003 230.21 li
177.003 228.41 li
176.283 227.75 li
177.663 224.63 li
179.643 223.01 li
178.503 221.81 li
178.503 221.15 li
180.003 220.85 li
179.463 220.37 li
181.143 220.61 li
181.263 219.89 li
256.383 318.29 mo
255.723 318.05 li
255.482 318.29 li
252.003 278.69 mo
251.163 275.99 li
250.923 277.37 li
250.022 277.85 li
250.022 280.31 li
252.243 282.59 li
252.363 281.69 li
253.263 283.43 li
253.923 282.59 li
253.503 280.55 li
253.083 279.95 li
253.263 280.67 li
252.243 280.67 li
252.003 278.69 li
cp
255.303 318.29 mo
256.022 316.61 li
255.243 315.71 li
254.942 313.31 li
253.442 312.05 li
254.643 311.93 li
254.283 308.99 li
253.563 308.69 li
254.103 309.83 li
253.563 309.29 li
253.143 310.25 li
253.083 307.67 li
251.823 307.79 li
252.123 307.07 li
253.743 307.61 li
252.482 305.75 li
251.522 305.45 li
251.823 304.61 li
250.743 301.31 li
251.703 301.19 li
251.283 300.41 li
251.763 300.53 li
252.603 298.61 li
252.063 297.65 li
252.663 296.57 li
252.063 296.81 li
251.823 296.15 li
250.923 297.71 li
251.463 295.73 li
251.283 296.03 li
250.923 294.53 li
251.703 291.71 li
252.482 290.33 li
253.683 289.85 li
253.683 288.71 li
252.783 287.15 li
251.343 286.73 li
251.103 287.27 li
251.043 285.95 li
248.703 283.37 li
246.723 282.59 li
246.843 280.43 li
246.003 279.23 li
248.223 273.59 li
247.683 272.93 li
248.463 272.87 li
249.603 270.05 li
249.063 269.51 li
249.902 269.03 li
249.303 268.07 li
249.963 267.41 li
249.963 268.31 li
250.383 267.41 li
249.843 266.75 li
250.263 265.73 li
250.982 264.89 li
252.123 265.43 li
252.063 264.71 li
252.723 264.71 li
254.883 259.97 li
253.803 259.91 li
253.803 259.31 li
255.183 259.61 li
256.803 256.13 li
255.963 255.29 li
256.803 255.47 li
257.763 252.47 li
257.823 253.07 li
258.123 252.89 li
0 0 0 1 cmyk
@
258.123 252.89 mo
259.323 252.11 li
259.623 250.07 li
260.463 249.11 li
259.743 249.23 li
259.923 246.65 li
261.902 245.03 li
264.123 244.97 li
265.683 243.89 li
266.223 243.11 li
265.503 241.97 li
266.043 242.45 li
266.942 241.61 li
267.243 242.63 li
267.843 242.03 li
267.183 241.49 li
267.003 239.51 li
265.743 238.79 li
266.763 238.91 li
267.423 240.29 li
268.442 238.13 li
268.022 239.99 li
268.982 239.15 li
269.703 239.51 li
269.823 238.91 li
269.343 239.03 li
270.183 238.31 li
271.083 239.09 li
275.763 232.91 li
276.243 231.77 li
275.703 231.11 li
276.723 231.65 li
278.522 228.11 li
279.603 227.75 li
286.803 219.89 li
356.643 219.89 li
356.643 318.29 li
258.123 318.29 li
258.123 252.89 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
258.123 252.89 mo
259.323 252.11 li
259.623 250.07 li
260.463 249.11 li
259.743 249.23 li
259.923 246.65 li
261.902 245.03 li
264.123 244.97 li
265.683 243.89 li
266.223 243.11 li
265.503 241.97 li
266.043 242.45 li
266.942 241.61 li
267.243 242.63 li
267.843 242.03 li
267.183 241.49 li
267.003 239.51 li
265.743 238.79 li
266.763 238.91 li
267.423 240.29 li
268.442 238.13 li
268.022 239.99 li
268.982 239.15 li
269.703 239.51 li
269.823 238.91 li
269.343 239.03 li
270.183 238.31 li
271.083 239.09 li
275.763 232.91 li
276.243 231.77 li
275.703 231.11 li
276.723 231.65 li
278.522 228.11 li
279.603 227.75 li
286.803 219.89 li
0 0 0 1 cmyk
@
402.902 318.29 mo
356.643 318.29 li
356.643 219.89 li
402.902 219.89 li
402.902 318.29 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
159.543 329.03 mo
159.303 329.63 li
159.363 328.97 li
158.523 329.51 li
159.003 331.13 li
157.683 332.51 li
155.523 332.33 li
155.103 331.37 li
156.603 328.729 li
155.163 330.77 li
154.803 330.53 li
156.723 327.59 li
157.203 327.53 li
156.903 328.19 li
157.563 327.29 li
156.663 328.729 li
158.463 326.99 li
158.883 326.93 li
159.543 327.65 li
159.543 329.03 li
f
130.203 398.81 mo
131.583 395.93 li
133.683 394.19 li
133.743 393.53 li
133.023 393.47 li
134.463 392.09 li
134.103 391.67 li
136.143 389.33 li
136.983 389.51 li
136.443 389.09 li
137.283 388.67 li
136.803 388.25 li
138.543 387.83 li
137.943 387.05 li
140.403 387.229 li
140.643 386.27 li
141.843 385.67 li
141.423 385.13 li
143.103 384.71 li
142.803 384.05 li
143.763 384.77 li
146.343 383.51 li
149.703 384.83 li
148.923 385.85 li
148.143 385.61 li
148.323 386.45 li
147.483 386.93 li
146.583 386.51 li
146.643 385.55 li
145.143 386.09 li
144.123 386.99 li
144.483 387.83 li
143.523 386.33 li
141.003 387.29 li
140.283 388.67 li
141.063 388.61 li
140.823 389.15 li
140.223 389.69 li
139.443 389.09 li
138.303 390.59 li
136.803 390.83 li
135.663 393.77 li
133.623 394.79 li
130.863 398.87 li
130.203 398.87 li
130.203 398.81 li
f
159.543 329.03 mo
159.303 329.63 li
159.363 328.97 li
158.523 329.51 li
159.003 331.13 li
157.683 332.51 li
155.523 332.33 li
155.103 331.37 li
156.603 328.729 li
155.163 330.77 li
154.803 330.53 li
156.723 327.59 li
157.203 327.53 li
156.903 328.19 li
157.563 327.29 li
156.663 328.729 li
158.463 326.99 li
158.883 326.93 li
159.543 327.65 li
130.203 398.81 mo
131.583 395.93 li
133.683 394.19 li
133.743 393.53 li
133.023 393.47 li
134.463 392.09 li
134.103 391.67 li
136.143 389.33 li
136.983 389.51 li
136.443 389.09 li
137.283 388.67 li
136.803 388.25 li
138.543 387.83 li
137.943 387.05 li
140.403 387.229 li
140.643 386.27 li
141.843 385.67 li
141.423 385.13 li
143.103 384.71 li
142.803 384.05 li
143.763 384.77 li
146.343 383.51 li
149.703 384.83 li
148.923 385.85 li
148.143 385.61 li
148.323 386.45 li
147.483 386.93 li
146.583 386.51 li
146.643 385.55 li
145.143 386.09 li
144.123 386.99 li
144.483 387.83 li
143.523 386.33 li
141.003 387.29 li
140.283 388.67 li
141.063 388.61 li
140.823 389.15 li
140.223 389.69 li
139.443 389.09 li
138.303 390.59 li
136.803 390.83 li
135.663 393.77 li
133.623 394.79 li
130.863 398.87 li
130.203 398.87 li
130.203 398.81 li
cp
0 0 0 1 cmyk
@
206.283 419.81 mo
206.043 418.729 li
206.703 418.25 li
205.203 416.15 li
207.723 418.25 li
212.223 414.71 li
217.443 408.95 li
218.883 408.229 li
218.643 408.77 li
221.583 408.229 li
221.343 407.45 li
221.763 408.17 li
223.383 405.11 li
222.843 404.75 li
223.683 404.87 li
223.503 404.27 li
226.982 401.15 li
226.203 401.21 li
227.283 401.09 li
228.243 399.65 li
227.103 397.85 li
228.363 399.229 li
230.343 396.11 li
230.763 396.47 li
232.683 394.729 li
238.623 391.79 li
239.223 392.03 li
238.982 390.83 li
239.643 390.77 li
239.823 391.79 li
244.083 389.45 li
244.143 389.93 li
245.043 389.63 li
245.103 389.09 li
245.343 389.63 li
248.942 388.91 li
249.423 387.29 li
250.803 386.63 li
250.143 386.51 li
250.503 385.79 li
251.043 386.51 li
256.683 383.09 li
256.083 383.27 li
256.503 382.97 li
255.603 381.83 li
256.143 381.47 li
255.482 381.41 li
256.623 381.29 li
256.923 380.33 li
257.163 381.05 li
258.123 380.63 li
258.123 419.81 li
206.283 419.81 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
255.482 318.29 mo
255.183 318.59 li
255.303 318.29 li
255.482 318.29 li
f
258.123 319.55 mo
258.003 319.55 li
257.823 320.45 li
256.863 318.41 li
256.383 318.29 li
258.123 318.29 li
258.123 319.55 li
f
159.543 327.65 mo
159.963 328.13 li
159.543 329.03 li
159.543 327.65 li
f
204.003 318.29 mo
204.723 323.87 li
205.623 325.67 li
205.023 329.27 li
206.523 331.67 li
207.483 331.79 li
208.443 333.11 li
208.383 336.229 li
207.663 338.57 li
205.803 340.07 li
205.803 342.47 li
207.063 345.229 li
206.403 347.81 li
207.003 349.07 li
206.763 351.47 li
207.543 352.13 li
207.303 355.01 li
209.523 355.729 li
211.683 361.79 li
211.203 362.39 li
207.483 358.25 li
206.823 360.83 li
205.923 361.13 li
204.543 359.45 li
204.123 358.07 li
205.203 355.37 li
202.203 352.43 li
202.263 347.27 li
200.883 344.87 li
200.643 342.229 li
198.963 340.729 li
199.443 338.81 li
202.203 334.67 li
201.063 330.229 li
201.483 327.83 li
200.643 323.99 li
201.603 322.37 li
199.143 319.61 li
198.843 318.29 li
204.003 318.29 li
f
167.103 374.99 mo
171.183 375.35 li
172.983 374.69 li
178.923 374.69 li
183.423 373.79 li
186.003 374.39 li
183.303 374.39 li
182.823 375.11 li
180.603 374.99 li
179.643 375.83 li
173.523 375.59 li
171.423 376.67 li
167.103 374.99 li
f
159.543 327.65 mo
159.963 328.13 li
159.543 329.03 li
167.103 374.99 mo
171.183 375.35 li
172.983 374.69 li
178.923 374.69 li
183.423 373.79 li
186.003 374.39 li
183.303 374.39 li
182.823 375.11 li
180.603 374.99 li
179.643 375.83 li
173.523 375.59 li
171.423 376.67 li
167.103 374.99 li
cp
204.003 318.29 mo
204.723 323.87 li
205.623 325.67 li
205.023 329.27 li
206.523 331.67 li
207.483 331.79 li
208.443 333.11 li
208.383 336.229 li
207.663 338.57 li
205.803 340.07 li
205.803 342.47 li
207.063 345.229 li
206.403 347.81 li
207.003 349.07 li
206.763 351.47 li
207.543 352.13 li
207.303 355.01 li
209.523 355.729 li
211.683 361.79 li
211.203 362.39 li
207.483 358.25 li
206.823 360.83 li
205.923 361.13 li
204.543 359.45 li
204.123 358.07 li
205.203 355.37 li
202.203 352.43 li
202.263 347.27 li
200.883 344.87 li
200.643 342.229 li
198.963 340.729 li
199.443 338.81 li
202.203 334.67 li
201.063 330.229 li
201.483 327.83 li
200.643 323.99 li
201.603 322.37 li
199.143 319.61 li
198.843 318.29 li
255.482 318.29 mo
255.183 318.59 li
255.303 318.29 li
258.123 319.55 mo
258.003 319.55 li
257.823 320.45 li
256.863 318.41 li
256.383 318.29 li
206.283 419.81 mo
206.043 418.729 li
206.703 418.25 li
205.203 416.15 li
207.723 418.25 li
212.223 414.71 li
217.443 408.95 li
218.883 408.229 li
218.643 408.77 li
221.583 408.229 li
221.343 407.45 li
221.763 408.17 li
223.383 405.11 li
222.843 404.75 li
223.683 404.87 li
223.503 404.27 li
226.982 401.15 li
226.203 401.21 li
227.283 401.09 li
228.243 399.65 li
227.103 397.85 li
228.363 399.229 li
230.343 396.11 li
230.763 396.47 li
232.683 394.729 li
238.623 391.79 li
239.223 392.03 li
238.982 390.83 li
239.643 390.77 li
239.823 391.79 li
244.083 389.45 li
244.143 389.93 li
245.043 389.63 li
245.103 389.09 li
245.343 389.63 li
248.942 388.91 li
249.423 387.29 li
250.803 386.63 li
250.143 386.51 li
250.503 385.79 li
251.043 386.51 li
256.683 383.09 li
256.083 383.27 li
256.503 382.97 li
255.603 381.83 li
256.143 381.47 li
255.482 381.41 li
256.623 381.29 li
256.923 380.33 li
257.163 381.05 li
258.123 380.63 li
0 0 0 1 cmyk
@
344.823 419.81 mo
345.183 419.15 li
345.303 416.27 li
347.823 409.25 li
347.283 408.65 li
347.823 409.19 li
351.063 400.79 li
350.703 399.77 li
351.963 395.75 li
350.823 392.57 li
351.183 391.01 li
352.563 387.89 li
355.083 387.17 li
353.883 386.21 li
355.083 384.35 li
355.263 380.87 li
353.643 379.729 li
354.003 377.57 li
352.923 373.91 li
353.823 372.89 li
355.683 372.83 li
356.643 376.49 li
356.643 419.81 li
344.823 419.81 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
344.583 419.81 mo
344.223 419.45 li
344.703 419.81 li
344.583 419.81 li
f
289.863 335.57 mo
290.402 336.65 li
292.083 337.61 li
292.683 337.19 li
291.482 334.67 li
291.363 331.91 li
290.283 332.33 li
289.863 335.57 li
258.123 380.63 mo
259.383 378.29 li
258.663 378.59 li
262.923 374.27 li
261.843 374.51 li
263.402 373.85 li
264.723 371.21 li
264.303 371.75 li
264.603 370.31 li
263.043 370.37 li
263.223 369.77 li
265.083 369.229 li
264.243 367.85 li
265.803 368.39 li
264.243 367.01 li
264.723 366.65 li
264.843 367.43 li
266.402 366.77 li
266.343 363.71 li
265.683 363.95 li
266.343 363.41 li
266.163 362.39 li
264.783 362.87 li
264.303 364.07 li
264.363 361.61 li
264.783 362.15 li
265.383 361.61 li
265.263 360.35 li
264.123 361.01 li
263.043 360.11 li
264.183 359.69 li
264.482 358.55 li
263.402 355.13 li
264.183 353.81 li
262.563 353.27 li
263.402 353.33 li
263.942 352.19 li
263.402 350.81 li
264.003 347.93 li
262.923 347.87 li
262.923 349.07 li
262.022 347.51 li
262.743 347.03 li
263.223 347.51 li
263.583 345.95 li
263.942 346.37 li
264.423 345.71 li
263.643 345.41 li
263.583 343.97 li
264.303 344.81 li
263.763 343.55 li
262.683 343.25 li
263.763 342.229 li
263.223 342.41 li
262.743 340.91 li
263.522 338.21 li
262.263 334.97 li
262.863 332.21 li
261.363 331.37 li
263.103 330.229 li
263.763 328.55 li
262.982 327.65 li
264.183 326.57 li
262.923 325.97 li
262.863 326.69 li
262.323 325.97 li
264.423 325.07 li
262.503 323.87 li
263.343 323.75 li
263.223 323.15 li
262.022 323.39 li
262.143 321.83 li
261.363 321.83 li
260.402 320.33 li
260.402 321.35 li
259.203 321.05 li
259.442 320.09 li
258.123 319.55 li
258.123 318.29 li
356.643 318.29 li
356.643 351.65 li
355.683 350.51 li
355.982 348.71 li
353.942 345.65 li
353.103 346.37 li
353.043 345.17 li
352.143 344.69 li
352.383 342.65 li
351.482 342.47 li
352.083 342.47 li
351.843 341.81 li
351.123 342.05 li
350.343 340.49 li
350.163 341.33 li
348.723 341.27 li
349.623 340.79 li
348.963 340.55 li
349.263 339.71 li
350.463 340.43 li
349.503 337.79 li
348.423 338.63 li
348.963 339.35 li
348.243 338.81 li
347.643 339.29 li
348.723 339.89 li
346.503 341.63 li
346.203 343.19 li
344.463 342.17 li
344.043 342.65 li
345.063 343.91 li
345.663 343.67 li
345.363 344.87 li
346.563 347.15 li
344.883 349.55 li
344.942 352.07 li
343.263 353.03 li
341.643 351.95 li
342.123 353.57 li
340.203 353.81 li
340.383 355.79 li
339.543 356.45 li
338.643 355.85 li
338.402 354.29 li
337.683 354.47 li
337.623 353.51 li
336.963 354.229 li
336.663 353.33 li
336.723 354.47 li
335.883 354.229 li
335.763 355.37 li
336.243 355.31 li
335.583 356.03 li
335.883 357.29 li
337.323 358.01 li
336.123 358.43 li
337.323 358.79 li
337.503 360.11 li
336.902 360.59 li
337.383 361.01 li
336.723 362.09 li
336.902 359.63 li
336.063 359.21 li
336.183 360.89 li
334.623 360.83 li
333.902 362.81 li
334.803 364.55 li
331.923 369.35 li
331.022 369.47 li
332.163 366.59 li
331.683 365.09 li
329.823 367.01 li
330.963 367.07 li
330.723 367.55 li
327.543 370.25 li
328.863 372.65 li
329.703 372.65 li
329.163 373.25 li
328.143 373.01 li
327.423 374.15 li
327.003 373.43 li
326.043 374.63 li
327.783 371.87 li
326.703 370.49 li
323.583 372.59 li
324.063 372.95 li
323.402 372.77 li
322.143 374.03 li
321.902 373.61 li
320.522 375.17 li
320.283 375.83 li
321.123 375.95 li
320.283 376.729 li
321.663 377.33 li
322.203 378.59 li
320.283 378.35 li
319.383 376.91 li
319.623 375.77 li
318.963 375.59 li
317.343 376.67 li
318.363 376.31 li
317.643 376.91 li
318.003 377.51 li
316.323 376.19 li
315.003 377.09 li
313.982 376.25 li
313.323 377.09 li
313.383 379.31 li
312.663 379.25 li
312.902 378.05 li
310.863 378.41 li
311.402 378.95 li
310.263 379.97 li
309.783 377.93 li
306.783 380.33 li
307.263 380.51 li
301.863 380.57 li
301.803 385.79 li
296.823 393.89 li
297.902 396.53 li
297.902 403.19 li
299.883 406.49 li
299.823 410.15 li
302.163 414.17 li
302.283 415.61 li
302.043 415.07 li
301.263 417.47 li
301.563 418.25 li
302.223 417.89 li
302.283 419.69 li
302.223 419.81 li
258.123 419.81 li
258.123 380.63 li
f
344.583 419.81 mo
344.223 419.45 li
344.703 419.81 li
289.863 335.57 mo
290.402 336.65 li
292.083 337.61 li
292.683 337.19 li
291.482 334.67 li
291.363 331.91 li
290.283 332.33 li
289.863 335.57 li
cp
344.823 419.81 mo
345.183 419.15 li
345.303 416.27 li
347.823 409.25 li
347.283 408.65 li
347.823 409.19 li
351.063 400.79 li
350.703 399.77 li
351.963 395.75 li
350.823 392.57 li
351.183 391.01 li
352.563 387.89 li
355.083 387.17 li
353.883 386.21 li
355.083 384.35 li
355.263 380.87 li
353.643 379.729 li
354.003 377.57 li
352.923 373.91 li
353.823 372.89 li
355.683 372.83 li
356.643 376.49 li
258.123 380.63 mo
259.383 378.29 li
258.663 378.59 li
262.923 374.27 li
261.843 374.51 li
263.402 373.85 li
264.723 371.21 li
264.303 371.75 li
264.603 370.31 li
263.043 370.37 li
263.223 369.77 li
265.083 369.229 li
264.243 367.85 li
265.803 368.39 li
264.243 367.01 li
264.723 366.65 li
264.843 367.43 li
266.402 366.77 li
266.343 363.71 li
265.683 363.95 li
266.343 363.41 li
266.163 362.39 li
264.783 362.87 li
264.303 364.07 li
264.363 361.61 li
264.783 362.15 li
265.383 361.61 li
265.263 360.35 li
264.123 361.01 li
263.043 360.11 li
264.183 359.69 li
264.482 358.55 li
263.402 355.13 li
264.183 353.81 li
262.563 353.27 li
263.402 353.33 li
263.942 352.19 li
263.402 350.81 li
264.003 347.93 li
262.923 347.87 li
262.923 349.07 li
262.022 347.51 li
262.743 347.03 li
263.223 347.51 li
263.583 345.95 li
263.942 346.37 li
264.423 345.71 li
263.643 345.41 li
263.583 343.97 li
264.303 344.81 li
263.763 343.55 li
262.683 343.25 li
263.763 342.229 li
263.223 342.41 li
262.743 340.91 li
263.522 338.21 li
262.263 334.97 li
262.863 332.21 li
261.363 331.37 li
263.103 330.229 li
263.763 328.55 li
262.982 327.65 li
264.183 326.57 li
262.923 325.97 li
262.863 326.69 li
262.323 325.97 li
264.423 325.07 li
262.503 323.87 li
263.343 323.75 li
263.223 323.15 li
262.022 323.39 li
262.143 321.83 li
261.363 321.83 li
260.402 320.33 li
260.402 321.35 li
259.203 321.05 li
259.442 320.09 li
258.123 319.55 li
356.643 351.65 mo
355.683 350.51 li
355.982 348.71 li
353.942 345.65 li
353.103 346.37 li
353.043 345.17 li
352.143 344.69 li
352.383 342.65 li
351.482 342.47 li
352.083 342.47 li
351.843 341.81 li
351.123 342.05 li
350.343 340.49 li
350.163 341.33 li
348.723 341.27 li
349.623 340.79 li
348.963 340.55 li
349.263 339.71 li
350.463 340.43 li
349.503 337.79 li
348.423 338.63 li
348.963 339.35 li
348.243 338.81 li
347.643 339.29 li
348.723 339.89 li
346.503 341.63 li
346.203 343.19 li
344.463 342.17 li
344.043 342.65 li
345.063 343.91 li
345.663 343.67 li
345.363 344.87 li
346.563 347.15 li
344.883 349.55 li
344.942 352.07 li
343.263 353.03 li
341.643 351.95 li
342.123 353.57 li
340.203 353.81 li
340.383 355.79 li
339.543 356.45 li
338.643 355.85 li
338.402 354.29 li
337.683 354.47 li
337.623 353.51 li
336.963 354.229 li
336.663 353.33 li
336.723 354.47 li
335.883 354.229 li
335.763 355.37 li
336.243 355.31 li
335.583 356.03 li
335.883 357.29 li
337.323 358.01 li
336.123 358.43 li
337.323 358.79 li
337.503 360.11 li
336.902 360.59 li
337.383 361.01 li
336.723 362.09 li
336.902 359.63 li
336.063 359.21 li
336.183 360.89 li
334.623 360.83 li
333.902 362.81 li
334.803 364.55 li
331.923 369.35 li
331.022 369.47 li
332.163 366.59 li
331.683 365.09 li
329.823 367.01 li
330.963 367.07 li
330.723 367.55 li
327.543 370.25 li
328.863 372.65 li
329.703 372.65 li
329.163 373.25 li
328.143 373.01 li
327.423 374.15 li
327.003 373.43 li
326.043 374.63 li
327.783 371.87 li
326.703 370.49 li
323.583 372.59 li
324.063 372.95 li
323.402 372.77 li
322.143 374.03 li
321.902 373.61 li
320.522 375.17 li
320.283 375.83 li
321.123 375.95 li
320.283 376.729 li
321.663 377.33 li
322.203 378.59 li
320.283 378.35 li
319.383 376.91 li
319.623 375.77 li
318.963 375.59 li
317.343 376.67 li
318.363 376.31 li
317.643 376.91 li
318.003 377.51 li
316.323 376.19 li
315.003 377.09 li
313.982 376.25 li
313.323 377.09 li
313.383 379.31 li
312.663 379.25 li
312.902 378.05 li
310.863 378.41 li
311.402 378.95 li
310.263 379.97 li
309.783 377.93 li
306.783 380.33 li
307.263 380.51 li
301.863 380.57 li
301.803 385.79 li
296.823 393.89 li
297.902 396.53 li
297.902 403.19 li
299.883 406.49 li
299.823 410.15 li
302.163 414.17 li
302.283 415.61 li
302.043 415.07 li
301.263 417.47 li
301.563 418.25 li
302.223 417.89 li
302.283 419.69 li
302.223 419.81 li
0 0 0 1 cmyk
@
402.902 419.81 mo
356.643 419.81 li
356.643 376.49 li
356.883 377.33 li
358.263 378.59 li
360.063 376.729 li
361.263 372.95 li
361.263 370.79 li
359.103 367.19 li
358.442 364.25 li
358.083 356.27 li
356.763 353.39 li
356.823 351.83 li
356.643 351.65 li
356.643 318.29 li
402.902 318.29 li
402.902 419.81 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
356.643 376.49 mo
356.883 377.33 li
358.263 378.59 li
360.063 376.729 li
361.263 372.95 li
361.263 370.79 li
359.103 367.19 li
358.442 364.25 li
358.083 356.27 li
356.763 353.39 li
356.823 351.83 li
356.643 351.65 li
0 0 0 1 cmyk
@
168.783 528.17 mo
172.083 521.99 li
176.883 516.53 li
179.403 515.51 li
183.063 511.85 li
187.803 494.81 li
188.763 484.67 li
187.503 486.95 li
186.423 485.75 li
186.003 486.05 li
184.203 483.29 li
185.103 483.59 li
186.123 482.45 li
186.123 481.07 li
186.663 482.33 li
187.383 479.27 li
192.003 475.67 li
191.643 476.33 li
209.823 468.71 li
213.783 463.25 li
214.143 459.83 li
213.423 460.79 li
212.643 460.37 li
212.103 462.05 li
212.583 458.81 li
212.043 458.99 li
212.763 458.45 li
212.883 459.11 li
213.603 453.29 li
214.803 450.59 li
213.843 448.85 li
214.203 442.61 li
214.023 444.05 li
213.663 441.83 li
212.943 442.97 li
211.923 442.85 li
211.503 436.97 li
210.003 434.21 li
210.063 431.93 li
209.763 433.729 li
209.163 432.89 li
209.883 432.47 li
208.803 431.45 li
210.003 429.53 li
208.503 428.27 li
209.103 428.09 li
208.743 427.19 li
207.723 427.37 li
207.783 426.47 li
207.363 427.19 li
206.223 425.15 li
205.503 425.63 li
206.043 424.729 li
205.443 423.71 li
206.343 422.09 li
205.563 421.31 li
206.643 421.31 li
206.283 419.81 li
258.123 419.81 li
258.123 528.17 li
168.783 528.17 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
168.783 528.17 mo
172.083 521.99 li
176.883 516.53 li
179.403 515.51 li
183.063 511.85 li
187.803 494.81 li
188.763 484.67 li
187.503 486.95 li
186.423 485.75 li
186.003 486.05 li
184.203 483.29 li
185.103 483.59 li
186.123 482.45 li
186.123 481.07 li
186.663 482.33 li
187.383 479.27 li
192.003 475.67 li
191.643 476.33 li
209.823 468.71 li
213.783 463.25 li
214.143 459.83 li
213.423 460.79 li
212.643 460.37 li
212.103 462.05 li
212.583 458.81 li
212.043 458.99 li
212.763 458.45 li
212.883 459.11 li
213.603 453.29 li
214.803 450.59 li
213.843 448.85 li
214.203 442.61 li
214.023 444.05 li
213.663 441.83 li
212.943 442.97 li
211.923 442.85 li
211.503 436.97 li
210.003 434.21 li
210.063 431.93 li
209.763 433.729 li
209.163 432.89 li
209.883 432.47 li
208.803 431.45 li
210.003 429.53 li
208.503 428.27 li
209.103 428.09 li
208.743 427.19 li
207.723 427.37 li
207.783 426.47 li
207.363 427.19 li
206.223 425.15 li
205.503 425.63 li
206.043 424.729 li
205.443 423.71 li
206.343 422.09 li
205.563 421.31 li
206.643 421.31 li
206.283 419.81 li
0 0 0 1 cmyk
@
302.223 419.81 mo
300.303 423.59 li
298.623 424.85 li
297.482 427.61 li
297.963 427.729 li
297.183 427.55 li
296.583 428.69 li
295.323 433.13 li
294.963 433.729 li
293.522 433.25 li
293.823 434.93 li
292.563 433.55 li
292.563 437.45 li
291.902 437.15 li
290.763 440.33 li
290.703 439.31 li
290.402 439.79 li
289.923 442.55 li
290.763 443.15 li
290.043 443.15 li
289.923 444.229 li
291.303 449.81 li
293.522 452.15 li
293.703 454.79 li
295.263 456.35 li
294.902 456.95 li
295.563 457.49 li
293.942 458.57 li
294.243 462.95 li
295.803 468.35 li
297.783 470.87 li
297.783 472.85 li
301.503 474.89 li
301.083 475.729 li
300.482 474.59 li
301.022 475.79 li
305.343 476.51 li
309.003 479.45 li
312.423 479.15 li
321.363 474.41 li
323.522 475.01 li
324.603 474.65 li
324.183 474.05 li
324.783 474.59 li
326.163 473.21 li
326.763 473.69 li
327.963 472.55 li
328.083 472.79 li
330.123 467.09 li
330.183 464.93 li
330.482 465.47 li
331.083 464.09 li
330.603 463.85 li
331.803 462.53 li
333.303 457.85 li
332.883 457.37 li
333.363 457.55 li
334.022 455.45 li
335.883 446.03 li
338.703 438.83 li
337.923 438.35 li
339.003 438.29 li
342.243 425.69 li
344.763 419.99 li
344.583 419.81 li
344.763 419.87 li
356.643 419.81 li
356.643 528.17 li
258.123 528.17 li
258.123 419.81 li
302.223 419.81 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
344.703 419.81 mo
344.763 419.87 li
344.823 419.81 li
302.223 419.81 mo
300.303 423.59 li
298.623 424.85 li
297.482 427.61 li
297.963 427.729 li
297.183 427.55 li
296.583 428.69 li
295.323 433.13 li
294.963 433.729 li
293.522 433.25 li
293.823 434.93 li
292.563 433.55 li
292.563 437.45 li
291.902 437.15 li
290.763 440.33 li
290.703 439.31 li
290.402 439.79 li
289.923 442.55 li
290.763 443.15 li
290.043 443.15 li
289.923 444.229 li
291.303 449.81 li
293.522 452.15 li
293.703 454.79 li
295.263 456.35 li
294.902 456.95 li
295.563 457.49 li
293.942 458.57 li
294.243 462.95 li
295.803 468.35 li
297.783 470.87 li
297.783 472.85 li
301.503 474.89 li
301.083 475.729 li
300.482 474.59 li
301.022 475.79 li
305.343 476.51 li
309.003 479.45 li
312.423 479.15 li
321.363 474.41 li
323.522 475.01 li
324.603 474.65 li
324.183 474.05 li
324.783 474.59 li
326.163 473.21 li
326.763 473.69 li
327.963 472.55 li
328.083 472.79 li
330.123 467.09 li
330.183 464.93 li
330.482 465.47 li
331.083 464.09 li
330.603 463.85 li
331.803 462.53 li
333.303 457.85 li
332.883 457.37 li
333.363 457.55 li
334.022 455.45 li
335.883 446.03 li
338.703 438.83 li
337.923 438.35 li
339.003 438.29 li
342.243 425.69 li
344.763 419.99 li
344.583 419.81 li
0 0 0 1 cmyk
@
402.902 528.17 mo
356.643 528.17 li
356.643 419.81 li
402.902 419.81 li
402.902 528.17 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
34.3828 532.49 mo
38.7627 541.07 li
43.2627 547.37 li
44.7026 553.37 li
44.5229 557.21 li
42.7227 559.91 li
40.9829 559.07 li
39.7827 560.57 li
40.2627 563.09 li
41.583 562.91 li
42.543 564.83 li
41.2827 563.39 li
40.8628 563.87 li
45.603 570.83 li
46.083 573.05 li
44.3428 574.85 li
45.2427 578.03 li
46.2026 578.57 li
45.9028 575.63 li
49.083 575.39 li
49.8628 576.229 li
49.4429 578.99 li
52.3828 578.15 li
52.3228 579.29 li
53.8828 579.229 li
54.7227 580.19 li
54.543 580.61 li
34.3828 580.61 li
34.3828 532.49 li
f
34.3828 532.49 mo
38.7627 541.07 li
43.2627 547.37 li
44.7026 553.37 li
44.5229 557.21 li
42.7227 559.91 li
40.9829 559.07 li
39.7827 560.57 li
40.2627 563.09 li
41.583 562.91 li
42.543 564.83 li
41.2827 563.39 li
40.8628 563.87 li
45.603 570.83 li
46.083 573.05 li
44.3428 574.85 li
45.2427 578.03 li
46.2026 578.57 li
45.9028 575.63 li
49.083 575.39 li
49.8628 576.229 li
49.4429 578.99 li
52.3828 578.15 li
52.3228 579.29 li
53.8828 579.229 li
54.7227 580.19 li
54.543 580.61 li
0 0 0 1 cmyk
@
65.4629 580.61 mo
66.3027 579.95 li
69.3628 580.01 li
68.9429 579.11 li
70.3228 578.69 li
73.8027 579.53 li
74.9429 578.69 li
79.0229 578.87 li
80.2827 577.07 li
82.3228 576.59 li
82.2627 575.45 li
85.5029 574.97 li
86.1626 574.19 li
94.563 575.69 li
94.623 574.61 li
96.9629 574.13 li
108.723 576.89 li
110.283 574.13 li
117.243 574.79 li
116.523 572.81 li
118.683 571.01 li
124.803 571.67 li
130.083 569.33 li
144.903 557.99 li
153.903 547.43 li
159.543 542.99 li
159.543 580.61 li
65.4629 580.61 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
65.4629 580.61 mo
66.3027 579.95 li
69.3628 580.01 li
68.9429 579.11 li
70.3228 578.69 li
73.8027 579.53 li
74.9429 578.69 li
79.0229 578.87 li
80.2827 577.07 li
82.3228 576.59 li
82.2627 575.45 li
85.5029 574.97 li
86.1626 574.19 li
94.563 575.69 li
94.623 574.61 li
96.9629 574.13 li
108.723 576.89 li
110.283 574.13 li
117.243 574.79 li
116.523 572.81 li
118.683 571.01 li
124.803 571.67 li
130.083 569.33 li
144.903 557.99 li
153.903 547.43 li
159.543 542.99 li
0 0 0 1 cmyk
@
159.543 542.99 mo
159.663 542.93 li
164.943 535.31 li
168.783 528.17 li
258.123 528.17 li
258.123 580.61 li
159.543 580.61 li
159.543 542.99 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
159.543 542.99 mo
159.663 542.93 li
164.943 535.31 li
168.783 528.17 li
0 0 0 1 cmyk
@
258.123 580.61 mo
258.123 528.17 li
356.643 528.17 li
356.643 580.61 li
258.123 580.61 li
.302342 .0311284 .0660411 3.05175e-05 cmyk
f
356.643 580.61 mo
356.643 528.17 li
402.902 528.17 li
402.902 580.61 li
356.643 580.61 li
f
.24 lw
135.543 532.729 mo
133.743 531.77 li
132.363 528.17 mo
133.203 529.729 li
133.923 529.67 li
133.743 531.77 li
135.603 532.729 mo
137.283 534.95 li
140.823 535.67 li
141.303 533.27 li
142.323 532.25 li
141.963 531.41 li
143.583 529.97 li
148.023 529.19 li
149.703 528.17 li
180.603 492.89 mo
180.123 483.83 li
178.923 483.29 li
159.543 443.21 mo
162.603 444.47 li
168.483 443.87 li
170.943 444.229 li
172.323 445.19 li
183.303 433.55 li
184.083 433.91 li
184.083 433.91 mo
182.763 431.63 li
184.383 429.35 li
184.203 426.05 li
185.823 425.63 li
187.863 422.69 li
188.163 420.83 li
189.363 420.11 li
189.423 419.81 li
172.383 445.25 mo
174.963 453.41 li
174.843 456.47 li
178.023 461.33 li
178.143 463.91 li
179.403 467.03 li
179.463 479.93 li
178.443 481.729 li
178.983 483.29 li
178.083 483.71 li
173.583 480.77 li
170.643 482.81 li
167.463 488.75 li
167.643 492.59 li
168.423 492.17 li
169.263 494.99 li
171.003 496.91 li
174.603 498.11 li
179.163 498.17 li
179.343 492.59 li
188.043 493.01 li
152.223 441.47 mo
153.363 442.85 li
124.083 468.89 mo
118.863 470.09 li
116.043 479.63 mo
118.863 471.89 li
118.803 470.03 li
130.143 524.15 mo
132.363 528.17 li
61.0229 470.33 mo
61.0229 488.69 li
146.763 512.57 mo
146.283 512.09 li
143.823 512.69 li
143.283 513.53 li
141.543 513.53 li
139.923 515.57 li
137.343 515.87 li
133.443 522.29 li
130.083 524.09 li
153.363 442.85 mo
157.263 442.25 li
159.543 443.21 li
136.983 425.09 mo
136.743 431.03 li
138.963 433.61 li
139.983 436.25 li
145.443 436.91 li
150.303 438.65 li
150.303 441.05 li
152.223 441.47 li
149.703 528.17 mo
151.383 527.21 li
151.383 524.39 li
152.583 523.91 li
152.643 522.47 li
154.203 520.729 li
152.883 517.85 li
149.223 515.57 li
146.703 512.57 li
124.083 468.89 mo
125.583 466.79 li
128.523 464.87 li
129.663 458.87 li
131.283 457.01 li
133.383 455.63 li
135.183 455.51 li
135.903 453.77 li
137.343 453.83 li
142.803 447.229 li
148.863 445.67 li
149.943 443.21 li
153.423 442.85 li
129.423 419.81 mo
132.123 420.77 li
132.843 424.97 li
137.043 425.15 li
61.0229 461.81 mo
61.0229 470.33 li
64.8628 473.27 li
66.4829 476.99 li
67.6826 477.89 li
67.4429 479.63 li
69.4829 485.21 li
67.0229 488.69 li
67.8027 493.55 li
70.8027 419.81 mo
70.7427 440.75 li
61.0229 440.81 li
116.043 479.63 mo
113.823 481.07 li
110.583 480.77 li
107.103 481.85 li
103.863 481.07 li
102.303 479.63 li
99.4829 479.69 li
95.043 475.85 li
90.6626 476.09 li
88.9829 478.01 li
87.7227 483.71 li
85.9829 486.17 li
83.1626 487.43 li
81.2427 490.55 li
78.4229 491.15 li
78.4229 492.41 li
77.4028 493.19 li
72.123 493.19 li
69.8428 492.41 li
67.8027 493.55 li
61.0229 488.69 mo
60.9629 510.47 li
60.9629 510.41 mo
56.7627 511.61 li
55.7427 513.53 li
53.7026 514.01 li
54.0029 515.81 li
52.4429 516.47 li
48.4229 515.09 li
43.0229 515.87 li
40.4429 514.43 li
37.6826 514.37 li
37.1426 513.35 li
35.4028 513.71 li
35.5229 512.21 li
34.623 510.95 li
35.3428 509.93 li
34.8628 508.37 li
34.3828 508.43 li
61.0229 440.81 mo
60.9629 440.81 li
61.0229 461.81 li
258.123 326.33 mo
262.383 323.03 li
205.443 338.21 mo
205.023 338.99 li
204.483 338.39 li
205.443 338.21 li
cp
205.863 338.33 mo
206.703 338.57 li
205.983 339.47 li
205.863 338.33 li
cp
189.483 392.51 mo
188.643 393.95 li
189.543 395.09 li
188.583 398.81 li
188.823 401.63 li
189.843 402.71 li
189.183 403.31 li
243.243 332.39 mo
247.263 329.93 li
250.863 329.93 li
253.263 328.19 li
258.123 326.33 li
163.623 374.87 mo
163.743 378.71 li
168.723 378.65 li
169.443 379.25 li
170.763 378.53 li
172.143 378.77 li
173.643 380.27 li
176.523 380.81 li
178.383 382.85 li
183.003 383.39 li
186.183 384.71 li
186.843 385.91 li
188.943 385.85 li
187.563 388.19 li
189.543 392.39 li
189.423 419.81 mo
189.723 417.53 li
188.763 416.15 li
187.563 416.51 li
187.623 414.53 li
186.963 414.229 li
187.983 410.39 li
187.503 409.67 li
186.303 409.67 li
186.123 408.83 li
186.243 407.63 li
188.403 407.03 li
188.043 404.57 li
189.303 403.85 li
189.123 403.25 li
159.543 374.99 mo
163.623 374.87 li
161.643 368.27 li
191.343 358.43 li
204.063 318.29 mo
204.723 320.93 li
204.663 323.39 li
205.623 325.67 li
205.023 329.33 li
206.523 331.67 li
207.723 332.03 li
208.443 333.89 li
243.243 332.39 mo
240.723 330.95 li
237.902 331.01 li
237.063 331.55 li
236.343 333.83 li
233.043 335.51 li
229.803 334.97 li
228.783 333.89 li
226.863 333.89 li
224.223 335.63 li
223.503 335.03 li
220.563 335.27 li
220.263 334.01 li
217.083 332.39 li
214.443 334.31 li
205.143 333.95 li
205.023 335.87 li
202.623 340.37 li
204.123 345.41 li
204.543 351.71 li
205.443 353.27 li
207.483 353.27 li
209.763 355.13 li
217.503 364.97 li
217.923 367.25 li
216.723 370.25 li
217.383 372.71 li
216.843 378.77 li
214.143 380.33 li
212.823 379.91 li
211.683 380.99 li
211.263 383.45 li
210.183 384.229 li
211.863 386.93 li
211.683 390.229 li
209.643 390.11 li
209.343 389.03 li
210.183 388.31 li
210.243 387.11 li
208.083 386.15 li
204.603 381.83 li
203.403 381.41 li
203.163 379.13 li
201.483 377.57 li
201.543 376.55 li
203.163 375.11 li
203.283 373.13 li
204.783 371.33 li
204.123 364.07 li
202.503 362.21 li
199.683 363.29 li
196.263 363.29 li
195.783 364.43 li
193.863 362.45 li
192.003 358.79 li
190.683 357.53 li
189.423 358.85 li
188.103 356.51 li
186.903 355.97 li
187.443 355.37 li
187.023 354.71 li
185.943 354.47 li
187.443 353.57 li
189.303 350.21 li
189.483 347.21 li
188.703 345.95 li
189.603 344.27 li
190.983 344.45 li
191.883 343.49 li
192.783 343.61 li
194.523 341.81 li
192.783 341.57 li
191.823 339.65 li
192.363 335.69 li
192.183 334.07 li
191.403 333.95 li
191.523 332.33 li
193.203 329.81 li
191.583 327.11 li
194.163 325.97 li
196.023 323.87 li
194.703 322.19 li
194.583 320.45 li
192.303 318.95 li
192.423 318.29 li
102.723 393.71 mo
74.5229 399.229 li
93.4829 399.11 mo
96.603 404.09 li
99.603 401.15 li
103.983 398.57 li
105.963 399.65 li
109.803 396.89 li
112.863 397.01 li
102.783 393.71 mo
110.643 394.85 li
112.923 397.01 li
113.343 399.77 li
119.703 408.53 li
119.763 410.51 li
121.743 414.89 li
123.363 415.43 li
123.363 416.21 li
127.323 419.09 li
129.423 419.81 li
93.4229 399.05 mo
75.4229 402.229 li
70.8027 402.35 li
70.8027 419.81 li
95.2227 395.21 mo
92.5229 393.71 li
82.083 383.63 li
80.7026 380.39 li
80.7026 348.29 li
100.623 348.29 li
99.3027 346.07 li
100.923 342.05 li
100.143 340.25 li
100.563 336.35 li
100.083 334.79 li
101.223 332.27 li
100.263 326.93 li
74.583 399.229 mo
72.4829 398.39 li
68.9429 399.47 li
64.2627 397.61 li
61.0229 397.85 li
112.863 397.07 mo
115.323 397.67 li
117.063 397.13 li
119.823 399.17 li
122.223 397.91 li
126.963 399.89 li
130.383 398.69 li
136.083 392.27 li
138.123 388.37 li
147.303 384.229 li
148.983 378.29 li
155.223 375.17 li
159.543 374.99 li
146.103 318.29 mo
145.443 320.45 li
146.763 324.77 li
145.263 326.57 li
143.343 333.53 li
144.723 336.89 li
147.183 338.03 li
150.003 342.05 li
152.223 341.87 li
154.563 342.83 li
154.443 340.61 li
157.623 339.77 li
157.563 352.79 li
156.003 352.49 li
156.483 350.99 li
155.463 350.45 li
151.683 352.61 li
149.823 352.25 li
147.903 348.11 li
146.463 346.67 li
145.383 347.03 li
144.183 343.43 li
143.223 342.59 li
139.623 341.93 li
138.543 340.79 li
136.503 341.21 li
135.243 339.95 li
134.523 337.67 li
132.303 336.05 li
132.003 333.95 li
130.323 334.19 li
129.723 337.19 li
127.323 338.39 li
124.503 337.31 li
120.183 337.25 li
116.643 335.51 li
115.323 335.99 li
113.823 334.61 li
113.103 331.97 li
113.523 330.17 li
107.763 331.37 li
105.543 332.87 li
103.503 332.21 li
104.463 331.01 li
104.343 329.33 li
101.823 328.61 li
101.703 327.35 li
100.383 326.93 li
99.063 328.49 li
95.2827 327.83 li
91.3828 329.21 li
85.9229 328.61 li
85.4429 329.57 li
83.043 330.71 li
82.3228 326.87 li
83.8828 325.79 li
83.2827 323.27 li
83.8228 321.95 li
82.563 318.29 li
61.0229 397.85 mo
58.6826 398.03 li
57.6626 397.43 li
50.4028 397.19 li
47.583 395.45 li
45.7227 392.81 li
34.3828 392.93 li
267.902 219.89 mo
267.963 228.35 li
273.482 236.21 li
198.363 219.89 mo
198.723 221.15 li
198.243 229.67 li
165.183 243.35 mo
167.703 242.93 li
168.363 240.17 li
167.523 238.73 li
167.823 236.21 li
166.863 233.93 li
165.063 232.85 li
164.343 230.27 li
167.103 300.35 mo
169.803 304.25 li
173.103 304.19 li
174.963 305.33 li
175.083 306.53 li
176.163 307.43 li
178.803 307.67 li
179.043 309.05 li
183.483 309.65 li
184.623 310.97 li
186.603 311.15 li
188.523 312.35 li
159.543 286.67 mo
160.383 287.21 li
162.603 289.91 li
167.163 300.35 li
159.543 301.49 li
159.543 261.41 mo
161.223 259.91 li
162.723 256.97 li
163.503 256.97 li
163.983 254.63 li
166.083 253.37 li
166.023 252.47 li
167.763 251.81 li
167.403 249.71 li
167.883 248.99 li
166.143 248.99 li
165.123 248.21 li
164.343 248.75 li
163.683 247.91 li
164.703 245.81 li
163.803 245.87 li
165.183 243.35 li
163.383 242.39 li
161.043 243.65 li
159.543 242.75 li
192.423 318.29 mo
192.663 316.55 li
191.463 315.59 li
191.163 314.33 li
190.263 314.15 li
190.023 314.93 li
189.063 314.51 li
188.583 312.29 li
191.043 313.37 li
192.243 313.13 li
193.443 314.45 li
196.563 314.15 li
198.183 315.35 li
198.543 313.55 li
199.383 313.13 li
202.203 315.59 li
204.063 318.29 li
159.543 234.05 mo
161.223 232.97 li
163.083 230.27 li
165.843 230.39 li
166.983 229.61 li
199.203 229.67 li
234.482 249.23 li
235.203 249.77 li
235.623 252.29 li
234.543 253.25 li
234.603 254.21 li
235.803 254.45 li
236.223 255.65 li
250.263 265.61 li
155.583 233.39 mo
153.243 234.65 li
151.983 236.45 li
151.983 236.45 mo
150.963 238.07 li
151.383 240.41 li
150.843 241.85 li
148.323 243.47 li
148.623 245.87 li
149.943 246.71 li
159.543 301.49 mo
148.683 303.17 li
153.903 263.45 mo
153.123 268.31 li
155.943 275.99 li
154.563 278.63 li
155.103 281.63 li
156.903 284.87 li
159.543 286.67 li
159.543 242.75 mo
159.063 242.45 li
158.643 246.23 li
157.023 247.31 li
153.303 247.55 li
152.943 245.87 li
150.303 245.39 li
149.523 247.31 li
152.043 249.83 li
151.803 252.53 li
151.803 252.53 mo
152.043 258.23 li
153.423 260.39 li
153.843 263.45 li
157.083 263.57 li
159.543 261.41 li
156.663 219.89 mo
155.883 228.59 li
155.283 229.73 li
155.583 233.45 li
157.983 232.79 li
158.643 234.17 li
159.303 234.23 li
159.543 234.05 li
82.563 318.29 mo
82.2627 317.51 li
79.4429 314.93 li
78.6626 312.41 li
80.103 303.29 li
78.3027 298.43 li
79.3228 293.33 li
78.543 291.35 li
66.3027 291.35 li
67.2026 287.75 li
64.2627 287.75 li
64.083 288.53 li
61.0229 288.53 li
148.683 303.229 mo
149.343 305.03 li
148.323 306.77 li
143.523 310.91 li
144.963 311.87 li
146.703 316.19 li
146.103 318.29 li
39.063 219.89 mo
38.4629 221.27 li
38.4629 225.11 li
34.623 229.67 li
34.3828 229.79 li
61.0229 288.53 mo
56.4629 288.53 li
55.9829 291.41 li
56.4028 293.09 li
55.7427 294.23 li
54.8428 294.23 li
54.8428 298.43 li
49.1426 298.43 li
48.8428 297.77 li
46.5029 297.77 li
46.4429 298.37 li
42.543 298.67 li
42.4229 299.51 li
40.2627 298.85 li
37.563 299.39 li
36.603 299.09 li
34.3828 295.61 li
276.963 180.77 mo
271.263 188.81 li
267.843 192.11 li
267.843 192.23 mo
267.902 219.89 li
258.123 181.37 mo
265.803 177.83 li
269.522 181.19 li
275.103 180.65 li
276.303 181.19 li
278.942 178.79 li
286.323 177.65 li
289.263 174.11 li
294.423 171.89 li
297.363 171.23 li
306.902 171.83 li
322.803 154.91 li
336.843 141.23 li
327.063 141.23 li
297.663 131.33 li
293.883 127.85 li
292.022 127.25 li
290.402 124.97 li
289.803 122.63 li
288.423 122.15 li
287.883 121.43 li
199.023 217.55 mo
198.063 218.87 li
198.363 219.89 li
204.123 208.97 mo
203.043 211.79 li
200.523 213.95 li
199.983 216.53 li
199.023 217.55 li
202.683 174.77 mo
203.883 173.45 li
211.983 170.63 li
211.863 171.77 li
213.543 171.71 li
213.003 173.09 li
213.843 174.65 li
214.803 174.71 li
215.403 173.87 li
215.703 174.59 li
198.963 178.49 mo
199.863 179.69 li
199.983 181.85 li
201.183 181.85 li
200.703 182.87 li
203.523 183.89 li
202.923 185.81 li
203.463 188.69 li
204.483 189.41 li
205.443 191.81 li
206.463 191.99 li
206.763 193.55 li
208.203 195.35 li
207.663 196.49 li
209.103 201.05 li
208.803 203.51 li
206.763 206.21 li
207.063 207.83 li
204.183 208.97 li
218.103 174.59 mo
202.803 174.71 li
194.223 183.11 li
190.923 182.99 li
189.303 181.79 li
186.363 183.05 li
183.243 183.17 li
181.203 184.49 li
181.143 185.45 li
178.803 184.67 li
177.303 182.39 li
174.723 184.07 li
171.123 182.69 li
169.143 183.71 li
168.003 185.69 li
201.543 121.43 mo
199.803 125.87 li
200.163 135.59 li
196.743 137.69 li
195.303 136.61 li
191.103 136.97 li
190.983 139.97 li
189.003 141.95 li
189.603 143.33 li
196.203 144.65 li
199.263 147.35 li
199.203 148.73 li
200.763 149.51 li
200.943 150.65 li
203.583 151.97 li
204.243 153.65 li
205.863 154.31 li
208.623 160.43 li
208.683 162.23 li
209.823 164.63 li
211.683 165.83 li
211.863 167.21 li
213.783 166.61 li
217.083 167.69 li
216.483 172.85 li
218.103 174.53 li
218.223 175.55 li
219.123 176.27 li
227.463 176.39 li
228.902 176.99 li
239.583 184.49 li
242.823 184.61 li
243.603 184.07 li
247.383 185.45 li
251.463 185.57 li
253.743 186.47 li
256.803 181.97 li
258.123 181.37 li
159.543 178.31 mo
161.583 181.07 li
165.003 181.97 li
165.123 184.49 li
167.103 183.77 li
167.943 185.57 li
168.663 185.45 li
167.103 189.83 li
168.183 191.93 li
166.743 195.89 li
167.703 195.95 li
168.243 196.97 li
169.143 196.25 li
169.923 197.33 li
171.363 197.27 li
172.383 199.07 li
169.743 202.55 li
164.043 208.01 li
161.883 208.73 li
160.983 211.07 li
159.543 211.61 li
134.463 170.69 mo
130.803 168.83 li
128.703 170.57 li
127.323 169.91 li
124.983 170.39 li
121.443 168.35 li
119.163 169.19 li
115.623 167.09 li
113.823 167.75 li
113.103 170.63 li
106.923 171.65 li
106.323 170.57 li
104.283 169.73 li
104.343 170.57 li
102.963 171.53 li
96.3027 173.45 li
94.7427 174.89 li
89.4629 172.61 li
87.4829 175.91 li
86.5229 176.09 li
86.043 178.55 li
84.0029 179.45 li
78.1826 177.77 li
76.1426 178.25 li
73.623 177.41 li
72.9028 177.83 li
70.5029 176.39 li
66.7827 176.63 li
64.3828 173.15 li
61.0229 170.99 li
74.7026 121.43 mo
74.5229 121.73 li
73.3828 121.73 li
70.9829 124.07 li
69.123 127.25 li
67.5029 128.45 li
66.3027 128.21 li
65.3428 130.01 li
62.043 129.89 li
61.0229 130.43 li
159.543 211.61 mo
159.183 211.79 li
159.183 215.09 li
156.723 219.29 li
156.663 219.89 li
96.3628 121.43 mo
97.1426 122.81 li
96.9629 128.63 li
95.4028 129.65 li
94.9829 131.15 li
95.5229 131.81 li
96.3027 131.51 li
95.6426 134.21 li
102.843 134.39 li
103.083 135.53 li
101.823 137.57 li
102.183 138.17 li
108.363 139.37 li
111.063 142.31 li
112.743 142.79 li
113.163 144.77 li
112.083 145.43 li
112.323 146.27 li
114.843 148.37 li
120.603 151.19 li
121.143 152.75 li
124.143 154.67 li
123.003 156.41 li
123.183 157.25 li
125.283 158.81 li
124.443 160.25 li
125.223 159.95 li
125.703 160.73 li
128.103 161.21 li
128.283 161.93 li
131.943 163.85 li
132.783 165.17 li
132.303 166.73 li
132.963 168.65 li
135.243 171.59 li
137.583 172.91 li
137.763 174.77 li
140.163 175.19 li
140.523 176.51 li
143.823 177.95 li
147.483 175.13 li
147.903 175.91 li
149.823 175.79 li
152.103 177.29 li
153.963 175.49 li
154.443 173.99 li
155.763 174.23 li
157.743 175.19 li
157.503 176.93 li
159.123 177.65 li
159.543 178.31 li
46.623 189.77 mo
43.4429 196.07 li
34.3828 142.91 mo
38.4028 141.41 li
46.623 189.71 mo
47.583 188.45 li
47.5229 186.05 li
46.0229 184.19 li
43.9829 184.79 li
43.2026 185.75 li
42.3027 184.97 li
39.9028 185.21 li
39.603 184.43 li
37.5029 184.31 li
36.1826 183.47 li
34.8628 184.49 li
34.3828 184.61 li
43.5029 196.13 mo
42.1826 198.11 li
42.0029 204.89 li
40.083 209.81 li
40.2627 214.01 li
40.9829 215.45 li
39.063 219.89 li
61.0229 170.99 mo
59.3428 169.97 li
55.3228 169.55 li
51.8428 171.83 li
48.6626 176.87 li
46.623 177.35 li
47.6426 180.41 li
47.4629 185.81 li
61.0229 130.43 mo
59.9429 130.97 li
51.0029 131.75 li
49.8628 132.89 li
52.3828 134.63 li
47.103 140.87 li
38.4028 141.41 li
387.123 54.71 mo
376.383 30.29 li
364.383 32.5098 li
356.643 33.3501 li
376.383 30.29 mo
402.902 20.9902 li
281.703 96.8301 mo
279.963 93.8301 li
278.402 93.4697 li
274.323 87.5898 li
270.963 85.6699 li
267.363 80.5698 li
260.223 77.5098 li
259.323 75.8301 li
258.123 76.8501 li
356.643 33.3501 mo
347.942 34.25 li
338.763 38.9302 li
333.003 46.25 li
331.683 49.73 li
328.923 51.4102 li
327.123 51.4102 li
324.603 47.9902 li
318.183 48.3501 li
311.343 47.5098 li
309.543 46.4902 li
299.223 46.6699 li
296.942 47.75 li
291.963 45.5298 li
289.442 47.5098 li
290.402 48.1099 li
288.963 49.9697 li
288.902 51.71 li
289.982 53.0298 li
289.683 54.29 li
288.663 54.23 li
288.303 55.5498 li
285.723 57.29 li
287.103 111.47 mo
285.783 111.59 li
284.043 110.51 li
277.442 112.19 li
275.763 111.65 li
275.463 106.43 li
276.123 104.09 li
277.323 103.37 li
282.303 96.23 li
284.703 97.8501 li
285.902 97.0698 li
286.503 95.21 li
288.902 94.3701 li
287.883 121.43 mo
286.203 119.33 li
284.343 115.19 li
290.163 106.73 li
258.123 76.8501 mo
257.583 77.21 li
253.982 75.29 li
253.263 75.8301 li
253.563 76.4302 li
251.942 75.9502 li
250.743 77.27 li
250.803 76.1899 li
249.783 74.8101 li
248.583 74.9302 li
247.143 76.3701 li
242.823 77.21 li
240.963 74.5098 li
238.623 74.0298 li
237.543 72.3501 li
233.763 79.5498 li
231.603 76.9102 li
229.863 77.27 li
229.203 78.71 li
225.963 78.1699 li
224.043 78.77 li
244.263 40.73 mo
240.963 45.4697 li
239.703 45.29 li
239.522 45.9502 li
238.923 45.23 li
233.583 47.5698 li
232.743 50.5098 li
228.482 50.1499 li
228.783 52.4302 li
227.522 55.8501 li
228.303 58.3701 li
225.543 63.6499 li
225.063 66.71 li
223.083 69.77 li
224.043 78.77 li
223.083 81.8301 li
223.503 83.0298 li
220.263 91.0698 li
220.083 94.4302 li
215.703 94.8501 li
212.223 101.15 li
209.763 103.25 li
209.763 105.95 li
208.443 108.95 li
208.563 112.85 li
207.483 114.17 li
206.583 114.65 li
204.843 112.61 li
201.783 115.97 li
202.383 119.15 li
201.543 121.43 li
100.383 25.1299 mo
100.383 64.1899 li
96.603 63.5898 li
94.083 64.3701 li
91.7427 64.0698 li
89.8828 65.6299 li
90.543 67.6699 li
89.9429 70.1299 li
87.3027 72.71 li
87.603 74.3901 li
84.4829 75.8301 li
85.083 78.6499 li
86.1626 79.0698 li
86.1626 80.1499 li
82.9829 81.77 li
81.543 83.6299 li
83.583 87.8901 li
80.1626 90.9502 li
79.0229 93.4697 li
80.2227 95.0298 li
82.083 94.9102 li
82.9229 94.0098 li
85.3228 95.27 li
84.4829 96.8301 li
85.623 99.71 li
85.3828 101.15 li
87.0029 100.79 li
86.2227 105.29 li
88.5029 107.51 li
89.8828 107.33 li
90.2427 108.65 li
89.4028 112.25 li
85.2627 111.47 li
77.9429 115.07 li
77.8828 118.55 li
76.0229 119.39 li
74.7026 121.43 li
100.443 20.3301 mo
100.443 25.1299 li
91.7427 20.3301 li
89.3428 112.31 mo
90.6626 114.53 li
93.543 116.87 li
96.3628 121.43 li
0 0 0 1 cmyk
@
1.02 lw
34.3828 560.33 mo
47.4629 551.45 li
56.7627 544.91 li
64.4429 549.59 li
72.2427 554.15 li
85.6826 554.75 li
102.783 555.17 li
104.583 555.229 li
103.443 578.33 li
85.2026 579.47 li
65.9429 580.25 li
49.4429 580.61 li
40.7427 569.03 li
39.7227 567.53 li
34.3828 560.33 li
cp
160.263 489.83 mo
174.423 489.95 li
191.163 489.89 li
192.003 489.83 li
188.523 514.85 li
184.743 518.27 li
171.243 530.15 li
168.603 532.37 li
166.683 534.11 li
154.143 544.79 li
150.783 547.55 li
147.543 544.61 li
138.663 536.33 li
147.123 528.65 li
154.803 521.51 li
156.723 519.77 li
160.503 516.17 li
162.423 514.43 li
164.283 512.63 li
160.263 489.83 li
cp
95.4629 518.81 mo
109.803 516.71 li
123.183 514.55 li
115.863 530.63 li
107.883 530.69 li
105.243 530.63 li
100.863 525.35 li
95.4629 518.81 li
cp
45.7227 520.37 mo
60.9028 512.15 li
64.623 510.05 li
70.2026 514.07 li
73.0229 516.05 li
74.4028 517.07 li
77.2227 519.05 li
78.603 520.07 li
80.043 521.03 li
81.4229 522.05 li
87.123 526.01 li
72.063 536.03 li
67.0229 539.33 li
62.4028 535.31 li
60.4829 533.57 li
54.0029 527.87 li
46.9829 521.51 li
45.7227 520.37 li
cp
182.103 416.81 mo
183.423 428.09 li
163.863 435.47 li
141.783 443.45 li
125.703 449.03 li
123.363 449.81 li
123.303 440.15 li
136.083 435.29 li
155.523 427.67 li
175.503 419.57 li
182.103 416.81 li
cp
259.982 303.89 mo
279.183 303.89 li
279.603 404.45 li
259.982 404.45 li
259.982 303.89 li
cp
222.123 281.45 mo
246.663 287.21 li
257.823 289.73 li
257.823 304.19 li
237.902 296.99 li
231.482 294.65 li
220.863 290.75 li
222.123 281.45 li
cp
212.403 241.97 mo
232.982 244.43 li
239.763 274.13 li
242.223 284.99 li
225.902 279.29 li
202.443 270.95 li
200.343 270.17 li
184.743 264.59 li
182.643 263.81 li
176.283 261.53 li
211.743 242.33 li
212.403 241.97 li
cp
212.643 174.89 mo
229.803 183.53 li
225.663 193.43 li
223.683 216.05 li
227.763 226.13 li
225.183 243.17 li
212.163 240.89 li
213.483 226.13 li
208.623 216.05 li
209.643 186.35 li
211.503 179.21 li
212.643 174.89 li
cp
163.983 219.47 mo
172.563 219.65 li
192.843 217.37 li
208.443 215.93 li
213.483 225.95 li
205.683 232.91 li
197.883 239.93 li
192.843 244.43 li
184.683 239.21 li
174.063 232.37 li
172.803 231.59 li
168.423 228.77 li
159.663 227.81 li
163.983 219.47 li
cp
194.043 338.03 mo
198.123 333.35 li
199.683 331.61 li
203.223 327.53 li
205.803 324.65 li
208.803 321.17 li
212.823 325.91 li
214.803 328.31 li
215.823 329.45 li
220.323 334.85 li
220.863 335.39 li
221.763 367.19 li
222.303 379.01 li
219.243 398.33 li
217.683 407.63 li
204.483 418.729 li
198.363 423.77 li
195.543 461.03 li
182.523 459.29 li
183.123 416.27 li
198.363 407.63 li
201.363 386.69 li
202.443 379.01 li
200.163 365.81 li
197.763 344.03 li
194.043 338.03 li
198.123 333.35 li
199.683 331.61 li
203.223 327.53 li
205.803 324.65 li
208.803 321.17 li
203.763 326.99 li
201.183 329.87 li
198.663 332.81 li
196.083 335.69 li
194.043 338.03 li
cp
188.703 314.39 mo
190.923 316.49 li
194.763 320.15 li
201.903 326.93 li
195.603 334.729 li
191.943 339.47 li
183.123 350.87 li
182.223 352.13 li
180.363 354.59 li
178.563 357.11 li
174.843 362.09 li
173.943 363.35 li
171.123 367.07 li
169.743 368.99 li
160.863 380.87 li
159.423 382.729 li
158.043 384.65 li
154.743 389.03 li
153.003 390.65 li
151.923 391.79 li
150.183 393.41 li
149.103 394.55 li
147.363 396.17 li
146.823 396.77 li
144.543 398.93 li
144.003 399.53 li
119.283 413.69 li
102.483 422.99 li
94.083 427.61 li
79.9229 435.229 li
76.3828 437.09 li
71.4629 424.61 li
70.083 420.95 li
88.1426 412.79 li
102.483 406.13 li
109.563 402.77 li
123.723 395.99 li
130.083 392.93 li
136.383 385.729 li
140.103 381.59 li
147.783 372.71 li
149.343 370.97 li
155.943 363.35 li
158.943 359.81 li
160.503 358.07 li
166.503 351.05 li
169.503 347.57 li
174.603 336.53 li
179.043 326.93 li
188.703 314.39 li
cp
99.8428 364.31 mo
101.103 363.41 li
106.323 360.05 li
107.583 359.15 li
112.083 356.21 li
129.423 344.63 li
130.683 343.729 li
133.263 342.05 li
137.223 357.65 li
140.703 371.09 li
119.463 379.13 li
109.623 371.69 li
108.363 370.79 li
101.043 365.21 li
99.8428 364.31 li
cp
147.903 292.43 mo
149.583 293.93 li
159.603 303.229 li
160.743 304.25 li
166.323 309.41 li
168.603 311.45 li
173.643 316.07 li
159.723 325.31 li
139.923 338.27 li
135.363 341.15 li
127.623 346.19 li
122.403 349.49 li
107.463 359.03 li
100.863 363.11 li
94.9829 366.83 li
86.4629 372.11 li
80.5229 375.77 li
80.043 356.69 li
86.7627 350.45 li
88.9829 348.35 li
90.123 347.33 li
92.3428 345.229 li
93.4829 344.21 li
96.2427 341.57 li
97.3828 340.55 li
104.043 334.25 li
105.183 333.229 li
117.903 321.17 li
120.123 319.07 li
125.043 314.33 li
126.183 313.31 li
129.423 310.19 li
134.343 305.45 li
137.643 302.33 li
147.903 292.43 li
cp
137.643 241.19 mo
142.323 241.61 li
143.583 265.07 li
153.723 286.37 li
146.763 290.93 li
143.523 292.97 li
135.243 298.31 li
132.663 299.93 li
117.903 309.35 li
117.243 309.71 li
116.763 280.01 li
131.343 253.01 li
137.643 241.19 li
cp
172.383 161.99 mo
183.183 161.99 li
184.203 173.81 li
179.283 180.65 li
178.263 193.43 li
158.043 229.67 li
156.183 232.91 li
153.663 237.47 li
156.603 262.67 li
157.563 270.83 li
166.443 276.77 li
170.823 281.09 li
172.443 282.77 li
175.203 285.47 li
176.823 287.15 li
180.843 291.77 li
187.503 299.21 li
192.063 304.37 li
213.903 314.03 li
216.723 315.29 li
202.923 326.21 li
200.703 324.17 li
197.403 321.05 li
196.263 320.03 li
191.343 315.35 li
190.203 314.33 li
189.123 313.31 li
177.303 306.17 li
169.383 301.43 li
164.283 297.17 li
162.543 295.79 li
158.583 292.49 li
153.243 282.65 li
143.763 264.95 li
142.803 241.43 li
152.643 208.13 li
156.363 204.47 li
157.923 202.85 li
159.003 201.83 li
160.023 200.75 li
161.643 199.19 li
162.123 198.65 li
164.823 196.07 li
166.383 194.45 li
167.463 193.43 li
168.423 179.93 li
168.423 171.83 li
172.383 161.99 li
cp
252.963 121.67 mo
270.783 129.17 li
271.503 129.53 li
262.623 136.61 li
255.003 142.79 li
250.263 146.57 li
246.183 149.87 li
243.243 158.87 li
242.463 160.13 li
240.183 164.03 li
237.843 167.87 li
231.003 179.51 li
230.223 180.77 li
212.583 172.73 li
224.942 162.65 li
226.083 161.63 li
233.163 155.87 li
238.803 144.47 li
241.203 140.57 li
246.482 132.11 li
249.723 126.89 li
252.963 121.67 li
cp
291.303 99.23 mo
305.643 96.6499 li
324.543 93.4102 li
327.603 92.8701 li
352.083 83.75 li
357.123 81.8901 li
359.343 81.1099 li
362.643 79.1899 li
384.243 67.0698 li
395.103 61.0698 li
396.482 60.29 li
402.902 81.1099 li
386.583 88.25 li
378.063 92.0298 li
375.963 92.9902 li
371.763 94.9102 li
346.503 100.97 li
337.623 103.13 li
330.243 104.99 li
307.323 106.31 li
291.303 107.33 li
291.303 99.23 li
cp
245.703 48.8301 mo
248.643 46.6099 li
256.203 57.6499 li
257.522 59.6299 li
258.423 60.8901 li
270.243 78.3501 li
279.663 95.5698 li
290.942 103.19 li
287.402 125.33 li
271.383 129.41 li
264.543 126.35 li
252.783 121.13 li
252.663 98.21 li
252.363 82.73 li
246.603 53.3901 li
245.703 48.8301 li
cp
282.543 53.1499 mo
294.963 44.3301 li
296.223 43.4302 li
300.063 52.8501 li
300.902 55.0698 li
302.343 58.6699 li
306.482 74.21 li
308.643 80.0898 li
295.143 94.0098 li
291.423 97.9102 li
286.563 86.27 li
285.783 68.5698 li
282.543 53.1499 li
cp
236.043 20.3301 mo
253.383 20.6899 li
254.942 20.75 li
264.063 37.3701 li
273.363 54.5898 li
286.503 79.1899 li
278.402 82.73 li
273.723 75.6499 li
264.603 62.0298 li
263.703 60.77 li
254.043 46.4302 li
252.663 44.5098 li
250.022 40.6099 li
246.902 35.9902 li
245.522 34.0698 li
241.022 27.5303 li
236.043 20.3301 li
cp
34.3828 560.33 mo
47.4629 551.45 li
56.7627 544.91 li
64.4429 549.59 li
72.2427 554.15 li
85.6826 554.75 li
102.783 555.17 li
104.583 555.229 li
103.443 578.33 li
85.2026 579.47 li
65.9429 580.25 li
49.4429 580.61 li
40.7427 569.03 li
39.7227 567.53 li
34.3828 560.33 li
cp
160.263 489.83 mo
174.423 489.95 li
191.163 489.89 li
192.003 489.83 li
188.523 514.85 li
184.743 518.27 li
171.243 530.15 li
168.603 532.37 li
166.683 534.11 li
154.143 544.79 li
150.783 547.55 li
147.543 544.61 li
138.663 536.33 li
147.123 528.65 li
154.803 521.51 li
156.723 519.77 li
160.503 516.17 li
162.423 514.43 li
164.283 512.63 li
160.263 489.83 li
cp
95.4629 518.81 mo
109.803 516.71 li
123.183 514.55 li
115.863 530.63 li
107.883 530.69 li
105.243 530.63 li
100.863 525.35 li
95.4629 518.81 li
cp
45.7227 520.37 mo
60.9028 512.15 li
64.623 510.05 li
70.2026 514.07 li
73.0229 516.05 li
74.4028 517.07 li
77.2227 519.05 li
78.603 520.07 li
80.043 521.03 li
81.4229 522.05 li
87.123 526.01 li
72.063 536.03 li
67.0229 539.33 li
62.4028 535.31 li
60.4829 533.57 li
54.0029 527.87 li
46.9829 521.51 li
45.7227 520.37 li
cp
182.103 416.81 mo
183.423 428.09 li
163.863 435.47 li
141.783 443.45 li
125.703 449.03 li
123.363 449.81 li
123.303 440.15 li
136.083 435.29 li
155.523 427.67 li
175.503 419.57 li
182.103 416.81 li
cp
259.982 303.89 mo
279.183 303.89 li
279.603 404.45 li
259.982 404.45 li
259.982 303.89 li
cp
222.123 281.45 mo
246.663 287.21 li
257.823 289.73 li
257.823 304.19 li
237.902 296.99 li
231.482 294.65 li
220.863 290.75 li
222.123 281.45 li
cp
212.403 241.97 mo
232.982 244.43 li
239.763 274.13 li
242.223 284.99 li
225.902 279.29 li
202.443 270.95 li
200.343 270.17 li
184.743 264.59 li
182.643 263.81 li
176.283 261.53 li
211.743 242.33 li
212.403 241.97 li
cp
212.643 174.89 mo
229.803 183.53 li
225.663 193.43 li
223.683 216.05 li
227.763 226.13 li
225.183 243.17 li
212.163 240.89 li
213.483 226.13 li
208.623 216.05 li
209.643 186.35 li
211.503 179.21 li
212.643 174.89 li
cp
163.983 219.47 mo
172.563 219.65 li
192.843 217.37 li
208.443 215.93 li
213.483 225.95 li
205.683 232.91 li
197.883 239.93 li
192.843 244.43 li
184.683 239.21 li
174.063 232.37 li
172.803 231.59 li
168.423 228.77 li
159.663 227.81 li
163.983 219.47 li
cp
194.043 338.03 mo
198.123 333.35 li
199.683 331.61 li
203.223 327.53 li
205.803 324.65 li
208.803 321.17 li
212.823 325.91 li
214.803 328.31 li
215.823 329.45 li
220.323 334.85 li
220.863 335.39 li
221.763 367.19 li
222.303 379.01 li
219.243 398.33 li
217.683 407.63 li
204.483 418.729 li
198.363 423.77 li
195.543 461.03 li
182.523 459.29 li
183.123 416.27 li
198.363 407.63 li
201.363 386.69 li
202.443 379.01 li
200.163 365.81 li
197.763 344.03 li
194.043 338.03 li
198.123 333.35 li
199.683 331.61 li
203.223 327.53 li
205.803 324.65 li
208.803 321.17 li
203.763 326.99 li
201.183 329.87 li
198.663 332.81 li
196.083 335.69 li
194.043 338.03 li
cp
188.703 314.39 mo
190.923 316.49 li
194.763 320.15 li
201.903 326.93 li
195.603 334.729 li
191.943 339.47 li
183.123 350.87 li
182.223 352.13 li
180.363 354.59 li
178.563 357.11 li
174.843 362.09 li
173.943 363.35 li
171.123 367.07 li
169.743 368.99 li
160.863 380.87 li
159.423 382.729 li
158.043 384.65 li
154.743 389.03 li
153.003 390.65 li
151.923 391.79 li
150.183 393.41 li
149.103 394.55 li
147.363 396.17 li
146.823 396.77 li
144.543 398.93 li
144.003 399.53 li
119.283 413.69 li
102.483 422.99 li
94.083 427.61 li
79.9229 435.229 li
76.3828 437.09 li
71.4629 424.61 li
70.083 420.95 li
88.1426 412.79 li
102.483 406.13 li
109.563 402.77 li
123.723 395.99 li
130.083 392.93 li
136.383 385.729 li
140.103 381.59 li
147.783 372.71 li
149.343 370.97 li
155.943 363.35 li
158.943 359.81 li
160.503 358.07 li
166.503 351.05 li
169.503 347.57 li
174.603 336.53 li
179.043 326.93 li
188.703 314.39 li
cp
99.8428 364.31 mo
101.103 363.41 li
106.323 360.05 li
107.583 359.15 li
112.083 356.21 li
129.423 344.63 li
130.683 343.729 li
133.263 342.05 li
137.223 357.65 li
140.703 371.09 li
119.463 379.13 li
109.623 371.69 li
108.363 370.79 li
101.043 365.21 li
99.8428 364.31 li
cp
147.903 292.43 mo
149.583 293.93 li
159.603 303.229 li
160.743 304.25 li
166.323 309.41 li
168.603 311.45 li
173.643 316.07 li
159.723 325.31 li
139.923 338.27 li
135.363 341.15 li
127.623 346.19 li
122.403 349.49 li
107.463 359.03 li
100.863 363.11 li
94.9829 366.83 li
86.4629 372.11 li
80.5229 375.77 li
80.043 356.69 li
86.7627 350.45 li
88.9829 348.35 li
90.123 347.33 li
92.3428 345.229 li
93.4829 344.21 li
96.2427 341.57 li
97.3828 340.55 li
104.043 334.25 li
105.183 333.229 li
117.903 321.17 li
120.123 319.07 li
125.043 314.33 li
126.183 313.31 li
129.423 310.19 li
134.343 305.45 li
137.643 302.33 li
147.903 292.43 li
cp
137.643 241.19 mo
142.323 241.61 li
143.583 265.07 li
153.723 286.37 li
146.763 290.93 li
143.523 292.97 li
135.243 298.31 li
132.663 299.93 li
117.903 309.35 li
117.243 309.71 li
116.763 280.01 li
131.343 253.01 li
137.643 241.19 li
cp
172.383 161.99 mo
183.183 161.99 li
184.203 173.81 li
179.283 180.65 li
178.263 193.43 li
158.043 229.67 li
156.183 232.91 li
153.663 237.47 li
156.603 262.67 li
157.563 270.83 li
166.443 276.77 li
170.823 281.09 li
172.443 282.77 li
175.203 285.47 li
176.823 287.15 li
180.843 291.77 li
187.503 299.21 li
192.063 304.37 li
213.903 314.03 li
216.723 315.29 li
202.923 326.21 li
200.703 324.17 li
197.403 321.05 li
196.263 320.03 li
191.343 315.35 li
190.203 314.33 li
189.123 313.31 li
177.303 306.17 li
169.383 301.43 li
164.283 297.17 li
162.543 295.79 li
158.583 292.49 li
153.243 282.65 li
143.763 264.95 li
142.803 241.43 li
152.643 208.13 li
156.363 204.47 li
157.923 202.85 li
159.003 201.83 li
160.023 200.75 li
161.643 199.19 li
162.123 198.65 li
164.823 196.07 li
166.383 194.45 li
167.463 193.43 li
168.423 179.93 li
168.423 171.83 li
172.383 161.99 li
cp
252.963 121.67 mo
270.783 129.17 li
271.503 129.53 li
262.623 136.61 li
255.003 142.79 li
250.263 146.57 li
246.183 149.87 li
243.243 158.87 li
242.463 160.13 li
240.183 164.03 li
237.843 167.87 li
231.003 179.51 li
230.223 180.77 li
212.583 172.73 li
224.942 162.65 li
226.083 161.63 li
233.163 155.87 li
238.803 144.47 li
241.203 140.57 li
246.482 132.11 li
249.723 126.89 li
252.963 121.67 li
cp
291.303 99.23 mo
305.643 96.6499 li
324.543 93.4102 li
327.603 92.8701 li
352.083 83.75 li
357.123 81.8901 li
359.343 81.1099 li
362.643 79.1899 li
384.243 67.0698 li
395.103 61.0698 li
396.482 60.29 li
402.902 81.1099 li
386.583 88.25 li
378.063 92.0298 li
375.963 92.9902 li
371.763 94.9102 li
346.503 100.97 li
337.623 103.13 li
330.243 104.99 li
307.323 106.31 li
291.303 107.33 li
291.303 99.23 li
cp
245.703 48.8301 mo
248.643 46.6099 li
256.203 57.6499 li
257.522 59.6299 li
258.423 60.8901 li
270.243 78.3501 li
279.663 95.5698 li
290.942 103.19 li
287.402 125.33 li
271.383 129.41 li
264.543 126.35 li
252.783 121.13 li
252.663 98.21 li
252.363 82.73 li
246.603 53.3901 li
245.703 48.8301 li
cp
282.543 53.1499 mo
294.963 44.3301 li
296.223 43.4302 li
300.063 52.8501 li
300.902 55.0698 li
302.343 58.6699 li
306.482 74.21 li
308.643 80.0898 li
295.143 94.0098 li
291.423 97.9102 li
286.563 86.27 li
285.783 68.5698 li
282.543 53.1499 li
cp
236.043 20.3301 mo
253.383 20.6899 li
254.942 20.75 li
264.063 37.3701 li
273.363 54.5898 li
286.503 79.1899 li
278.402 82.73 li
273.723 75.6499 li
264.603 62.0298 li
263.703 60.77 li
254.043 46.4302 li
252.663 44.5098 li
250.022 40.6099 li
246.902 35.9902 li
245.522 34.0698 li
241.022 27.5303 li
236.043 20.3301 li
cp
.883665 .769161 3.05175e-05 3.05175e-05 cmyk
@
.72 lw
159.543 542.99 mo
159.663 542.93 li
164.943 535.31 li
168.783 528.17 li
65.4629 580.61 mo
66.3027 579.95 li
69.3628 580.01 li
68.9429 579.11 li
70.3228 578.69 li
73.8027 579.53 li
74.9429 578.69 li
79.0229 578.87 li
80.2827 577.07 li
82.3228 576.59 li
82.2627 575.45 li
85.5029 574.97 li
86.1626 574.19 li
94.563 575.69 li
94.623 574.61 li
96.9629 574.13 li
108.723 576.89 li
110.283 574.13 li
117.243 574.79 li
116.523 572.81 li
118.683 571.01 li
124.803 571.67 li
130.083 569.33 li
144.903 557.99 li
153.903 547.43 li
159.543 542.99 li
34.3828 532.49 mo
38.7627 541.07 li
43.2627 547.37 li
44.7026 553.37 li
44.5229 557.21 li
42.7227 559.91 li
40.9829 559.07 li
39.7827 560.57 li
40.2627 563.09 li
41.583 562.91 li
42.543 564.83 li
41.2827 563.39 li
40.8628 563.87 li
45.603 570.83 li
46.083 573.05 li
44.3428 574.85 li
45.2427 578.03 li
46.2026 578.57 li
45.9028 575.63 li
49.083 575.39 li
49.8628 576.229 li
49.4429 578.99 li
52.3828 578.15 li
52.3228 579.29 li
53.8828 579.229 li
54.7227 580.19 li
54.543 580.61 li
344.703 419.81 mo
344.763 419.87 li
344.823 419.81 li
302.223 419.81 mo
300.303 423.59 li
298.623 424.85 li
297.482 427.61 li
297.963 427.729 li
297.183 427.55 li
296.583 428.69 li
295.323 433.13 li
294.963 433.729 li
293.522 433.25 li
293.823 434.93 li
292.563 433.55 li
292.563 437.45 li
291.902 437.15 li
290.763 440.33 li
290.703 439.31 li
290.402 439.79 li
289.923 442.55 li
290.763 443.15 li
290.043 443.15 li
289.923 444.229 li
291.303 449.81 li
293.522 452.15 li
293.703 454.79 li
295.263 456.35 li
294.902 456.95 li
295.563 457.49 li
293.942 458.57 li
294.243 462.95 li
295.803 468.35 li
297.783 470.87 li
297.783 472.85 li
301.503 474.89 li
301.083 475.729 li
300.482 474.59 li
301.022 475.79 li
305.343 476.51 li
309.003 479.45 li
312.423 479.15 li
321.363 474.41 li
323.522 475.01 li
324.603 474.65 li
324.183 474.05 li
324.783 474.59 li
326.163 473.21 li
326.763 473.69 li
327.963 472.55 li
328.083 472.79 li
330.123 467.09 li
330.183 464.93 li
330.482 465.47 li
331.083 464.09 li
330.603 463.85 li
331.803 462.53 li
333.303 457.85 li
332.883 457.37 li
333.363 457.55 li
334.022 455.45 li
335.883 446.03 li
338.703 438.83 li
337.923 438.35 li
339.003 438.29 li
342.243 425.69 li
344.763 419.99 li
344.583 419.81 li
168.783 528.17 mo
172.083 521.99 li
176.883 516.53 li
179.403 515.51 li
183.063 511.85 li
187.803 494.81 li
188.763 484.67 li
187.503 486.95 li
186.423 485.75 li
186.003 486.05 li
184.203 483.29 li
185.103 483.59 li
186.123 482.45 li
186.123 481.07 li
186.663 482.33 li
187.383 479.27 li
192.003 475.67 li
191.643 476.33 li
209.823 468.71 li
213.783 463.25 li
214.143 459.83 li
213.423 460.79 li
212.643 460.37 li
212.103 462.05 li
212.583 458.81 li
212.043 458.99 li
212.763 458.45 li
212.883 459.11 li
213.603 453.29 li
214.803 450.59 li
213.843 448.85 li
214.203 442.61 li
214.023 444.05 li
213.663 441.83 li
212.943 442.97 li
211.923 442.85 li
211.503 436.97 li
210.003 434.21 li
210.063 431.93 li
209.763 433.729 li
209.163 432.89 li
209.883 432.47 li
208.803 431.45 li
210.003 429.53 li
208.503 428.27 li
209.103 428.09 li
208.743 427.19 li
207.723 427.37 li
207.783 426.47 li
207.363 427.19 li
206.223 425.15 li
205.503 425.63 li
206.043 424.729 li
205.443 423.71 li
206.343 422.09 li
205.563 421.31 li
206.643 421.31 li
206.283 419.81 li
356.643 376.49 mo
356.883 377.33 li
358.263 378.59 li
360.063 376.729 li
361.263 372.95 li
361.263 370.79 li
359.103 367.19 li
358.442 364.25 li
358.083 356.27 li
356.763 353.39 li
356.823 351.83 li
356.643 351.65 li
344.583 419.81 mo
344.223 419.45 li
344.703 419.81 li
289.863 335.57 mo
290.402 336.65 li
292.083 337.61 li
292.683 337.19 li
291.482 334.67 li
291.363 331.91 li
290.283 332.33 li
289.863 335.57 li
cp
344.823 419.81 mo
345.183 419.15 li
345.303 416.27 li
347.823 409.25 li
347.283 408.65 li
347.823 409.19 li
351.063 400.79 li
350.703 399.77 li
351.963 395.75 li
350.823 392.57 li
351.183 391.01 li
352.563 387.89 li
355.083 387.17 li
353.883 386.21 li
355.083 384.35 li
355.263 380.87 li
353.643 379.729 li
354.003 377.57 li
352.923 373.91 li
353.823 372.89 li
355.683 372.83 li
356.643 376.49 li
258.123 380.63 mo
259.383 378.29 li
258.663 378.59 li
262.923 374.27 li
261.843 374.51 li
263.402 373.85 li
264.723 371.21 li
264.303 371.75 li
264.603 370.31 li
263.043 370.37 li
263.223 369.77 li
265.083 369.229 li
264.243 367.85 li
265.803 368.39 li
264.243 367.01 li
264.723 366.65 li
264.843 367.43 li
266.402 366.77 li
266.343 363.71 li
265.683 363.95 li
266.343 363.41 li
266.163 362.39 li
264.783 362.87 li
264.303 364.07 li
264.363 361.61 li
264.783 362.15 li
265.383 361.61 li
265.263 360.35 li
264.123 361.01 li
263.043 360.11 li
264.183 359.69 li
264.482 358.55 li
263.402 355.13 li
264.183 353.81 li
262.563 353.27 li
263.402 353.33 li
263.942 352.19 li
263.402 350.81 li
264.003 347.93 li
262.923 347.87 li
262.923 349.07 li
262.022 347.51 li
262.743 347.03 li
263.223 347.51 li
263.583 345.95 li
263.942 346.37 li
264.423 345.71 li
263.643 345.41 li
263.583 343.97 li
264.303 344.81 li
263.763 343.55 li
262.683 343.25 li
263.763 342.229 li
263.223 342.41 li
262.743 340.91 li
263.522 338.21 li
262.263 334.97 li
262.863 332.21 li
261.363 331.37 li
263.103 330.229 li
263.763 328.55 li
262.982 327.65 li
264.183 326.57 li
262.923 325.97 li
262.863 326.69 li
262.323 325.97 li
264.423 325.07 li
262.503 323.87 li
263.343 323.75 li
263.223 323.15 li
262.022 323.39 li
262.143 321.83 li
261.363 321.83 li
260.402 320.33 li
260.402 321.35 li
259.203 321.05 li
259.442 320.09 li
258.123 319.55 li
356.643 351.65 mo
355.683 350.51 li
355.982 348.71 li
353.942 345.65 li
353.103 346.37 li
353.043 345.17 li
352.143 344.69 li
352.383 342.65 li
351.482 342.47 li
352.083 342.47 li
351.843 341.81 li
351.123 342.05 li
350.343 340.49 li
350.163 341.33 li
348.723 341.27 li
349.623 340.79 li
348.963 340.55 li
349.263 339.71 li
350.463 340.43 li
349.503 337.79 li
348.423 338.63 li
348.963 339.35 li
348.243 338.81 li
347.643 339.29 li
348.723 339.89 li
346.503 341.63 li
346.203 343.19 li
344.463 342.17 li
344.043 342.65 li
345.063 343.91 li
345.663 343.67 li
345.363 344.87 li
346.563 347.15 li
344.883 349.55 li
344.942 352.07 li
343.263 353.03 li
341.643 351.95 li
342.123 353.57 li
340.203 353.81 li
340.383 355.79 li
339.543 356.45 li
338.643 355.85 li
338.402 354.29 li
337.683 354.47 li
337.623 353.51 li
336.963 354.229 li
336.663 353.33 li
336.723 354.47 li
335.883 354.229 li
335.763 355.37 li
336.243 355.31 li
335.583 356.03 li
335.883 357.29 li
337.323 358.01 li
336.123 358.43 li
337.323 358.79 li
337.503 360.11 li
336.902 360.59 li
337.383 361.01 li
336.723 362.09 li
336.902 359.63 li
336.063 359.21 li
336.183 360.89 li
334.623 360.83 li
333.902 362.81 li
334.803 364.55 li
331.923 369.35 li
331.022 369.47 li
332.163 366.59 li
331.683 365.09 li
329.823 367.01 li
330.963 367.07 li
330.723 367.55 li
327.543 370.25 li
328.863 372.65 li
329.703 372.65 li
329.163 373.25 li
328.143 373.01 li
327.423 374.15 li
327.003 373.43 li
326.043 374.63 li
327.783 371.87 li
326.703 370.49 li
323.583 372.59 li
324.063 372.95 li
323.402 372.77 li
322.143 374.03 li
321.902 373.61 li
320.522 375.17 li
320.283 375.83 li
321.123 375.95 li
320.283 376.729 li
321.663 377.33 li
322.203 378.59 li
320.283 378.35 li
319.383 376.91 li
319.623 375.77 li
318.963 375.59 li
317.343 376.67 li
318.363 376.31 li
317.643 376.91 li
318.003 377.51 li
316.323 376.19 li
315.003 377.09 li
313.982 376.25 li
313.323 377.09 li
313.383 379.31 li
312.663 379.25 li
312.902 378.05 li
310.863 378.41 li
311.402 378.95 li
310.263 379.97 li
309.783 377.93 li
306.783 380.33 li
307.263 380.51 li
301.863 380.57 li
301.803 385.79 li
296.823 393.89 li
297.902 396.53 li
297.902 403.19 li
299.883 406.49 li
299.823 410.15 li
302.163 414.17 li
302.283 415.61 li
302.043 415.07 li
301.263 417.47 li
301.563 418.25 li
302.223 417.89 li
302.283 419.69 li
302.223 419.81 li
159.543 327.65 mo
159.963 328.13 li
159.543 329.03 li
167.103 374.99 mo
171.183 375.35 li
172.983 374.69 li
178.923 374.69 li
183.423 373.79 li
186.003 374.39 li
183.303 374.39 li
182.823 375.11 li
180.603 374.99 li
179.643 375.83 li
173.523 375.59 li
171.423 376.67 li
167.103 374.99 li
cp
204.003 318.29 mo
204.723 323.87 li
205.623 325.67 li
205.023 329.27 li
206.523 331.67 li
207.483 331.79 li
208.443 333.11 li
208.383 336.229 li
207.663 338.57 li
205.803 340.07 li
205.803 342.47 li
207.063 345.229 li
206.403 347.81 li
207.003 349.07 li
206.763 351.47 li
207.543 352.13 li
207.303 355.01 li
209.523 355.729 li
211.683 361.79 li
211.203 362.39 li
207.483 358.25 li
206.823 360.83 li
205.923 361.13 li
204.543 359.45 li
204.123 358.07 li
205.203 355.37 li
202.203 352.43 li
202.263 347.27 li
200.883 344.87 li
200.643 342.229 li
198.963 340.729 li
199.443 338.81 li
202.203 334.67 li
201.063 330.229 li
201.483 327.83 li
200.643 323.99 li
201.603 322.37 li
199.143 319.61 li
198.843 318.29 li
255.482 318.29 mo
255.183 318.59 li
255.303 318.29 li
258.123 319.55 mo
258.003 319.55 li
257.823 320.45 li
256.863 318.41 li
256.383 318.29 li
206.283 419.81 mo
206.043 418.729 li
206.703 418.25 li
205.203 416.15 li
207.723 418.25 li
212.223 414.71 li
217.443 408.95 li
218.883 408.229 li
218.643 408.77 li
221.583 408.229 li
221.343 407.45 li
221.763 408.17 li
223.383 405.11 li
222.843 404.75 li
223.683 404.87 li
223.503 404.27 li
226.982 401.15 li
226.203 401.21 li
227.283 401.09 li
228.243 399.65 li
227.103 397.85 li
228.363 399.229 li
230.343 396.11 li
230.763 396.47 li
232.683 394.729 li
238.623 391.79 li
239.223 392.03 li
238.982 390.83 li
239.643 390.77 li
239.823 391.79 li
244.083 389.45 li
244.143 389.93 li
245.043 389.63 li
245.103 389.09 li
245.343 389.63 li
248.942 388.91 li
249.423 387.29 li
250.803 386.63 li
250.143 386.51 li
250.503 385.79 li
251.043 386.51 li
256.683 383.09 li
256.083 383.27 li
256.503 382.97 li
255.603 381.83 li
256.143 381.47 li
255.482 381.41 li
256.623 381.29 li
256.923 380.33 li
257.163 381.05 li
258.123 380.63 li
159.543 329.03 mo
159.303 329.63 li
159.363 328.97 li
158.523 329.51 li
159.003 331.13 li
157.683 332.51 li
155.523 332.33 li
155.103 331.37 li
156.603 328.729 li
155.163 330.77 li
154.803 330.53 li
156.723 327.59 li
157.203 327.53 li
156.903 328.19 li
157.563 327.29 li
156.663 328.729 li
158.463 326.99 li
158.883 326.93 li
159.543 327.65 li
130.203 398.81 mo
131.583 395.93 li
133.683 394.19 li
133.743 393.53 li
133.023 393.47 li
134.463 392.09 li
134.103 391.67 li
136.143 389.33 li
136.983 389.51 li
136.443 389.09 li
137.283 388.67 li
136.803 388.25 li
138.543 387.83 li
137.943 387.05 li
140.403 387.229 li
140.643 386.27 li
141.843 385.67 li
141.423 385.13 li
143.103 384.71 li
142.803 384.05 li
143.763 384.77 li
146.343 383.51 li
149.703 384.83 li
148.923 385.85 li
148.143 385.61 li
148.323 386.45 li
147.483 386.93 li
146.583 386.51 li
146.643 385.55 li
145.143 386.09 li
144.123 386.99 li
144.483 387.83 li
143.523 386.33 li
141.003 387.29 li
140.283 388.67 li
141.063 388.61 li
140.823 389.15 li
140.223 389.69 li
139.443 389.09 li
138.303 390.59 li
136.803 390.83 li
135.663 393.77 li
133.623 394.79 li
130.863 398.87 li
130.203 398.87 li
130.203 398.81 li
cp
258.123 252.89 mo
259.323 252.11 li
259.623 250.07 li
260.463 249.11 li
259.743 249.23 li
259.923 246.65 li
261.902 245.03 li
264.123 244.97 li
265.683 243.89 li
266.223 243.11 li
265.503 241.97 li
266.043 242.45 li
266.942 241.61 li
267.243 242.63 li
267.843 242.03 li
267.183 241.49 li
267.003 239.51 li
265.743 238.79 li
266.763 238.91 li
267.423 240.29 li
268.442 238.13 li
268.022 239.99 li
268.982 239.15 li
269.703 239.51 li
269.823 238.91 li
269.343 239.03 li
270.183 238.31 li
271.083 239.09 li
275.763 232.91 li
276.243 231.77 li
275.703 231.11 li
276.723 231.65 li
278.522 228.11 li
279.603 227.75 li
286.803 219.89 li
182.523 219.89 mo
182.943 220.13 li
182.943 219.89 li
181.803 219.89 mo
182.103 220.07 li
181.983 219.89 li
159.543 303.53 mo
160.563 303.59 li
159.543 303.95 li
178.443 294.17 mo
184.203 298.61 li
184.563 299.63 li
180.663 297.77 li
178.623 298.43 li
177.003 295.19 li
178.443 294.17 li
cp
198.843 318.29 mo
198.183 315.29 li
198.243 315.29 li
198.543 313.55 li
199.383 313.13 li
203.943 317.99 li
204.003 318.29 li
206.403 256.91 mo
206.943 256.25 li
206.103 256.19 li
207.063 255.29 li
208.623 255.17 li
211.803 252.59 li
212.163 253.73 li
210.723 255.59 li
206.943 257.09 li
206.403 256.91 li
cp
159.543 283.61 mo
161.043 283.25 li
165.183 288.23 li
165.063 289.55 li
164.463 289.67 li
165.543 292.07 li
165.303 293.63 li
168.903 299.51 li
169.143 301.13 li
170.823 302.63 li
171.183 305.87 li
170.763 305.45 li
169.623 306.35 li
166.203 303.229 li
164.883 304.25 li
165.243 303.47 li
164.223 303.53 li
163.923 302.75 li
165.123 301.43 li
165.303 299.87 li
162.243 296.93 li
160.983 291.41 li
159.543 289.97 li
198.903 219.89 mo
198.963 220.25 li
199.563 220.97 li
200.283 220.43 li
199.803 221.39 li
201.423 222.35 li
201.723 223.73 li
202.803 222.71 li
202.383 221.75 li
206.223 220.73 li
207.243 222.89 li
203.463 223.25 li
203.943 224.45 li
203.163 225.05 li
202.863 224.27 li
202.323 224.63 li
201.063 223.97 li
199.563 225.41 li
199.323 227.03 li
200.763 228.41 li
200.283 229.73 li
199.383 229.67 li
199.923 229.85 li
197.643 232.13 li
198.843 233.27 li
197.043 232.85 li
197.583 233.69 li
196.803 233.57 li
198.543 234.77 li
195.543 234.29 li
195.903 234.83 li
195.183 235.19 li
196.023 236.27 li
194.403 236.33 li
195.483 237.23 li
193.803 238.01 li
192.783 237.47 li
191.943 238.73 li
193.623 238.31 li
194.583 239.69 li
193.143 239.15 li
192.843 239.99 li
191.223 239.87 li
191.283 240.83 li
192.663 241.13 li
195.063 241.25 li
196.623 240.29 li
197.343 241.67 li
193.083 244.07 li
193.623 244.31 li
193.323 244.91 li
191.103 244.49 li
190.143 243.29 li
188.283 243.53 li
187.803 245.69 li
188.403 247.49 li
189.363 248.09 li
188.103 247.31 li
186.723 249.41 li
187.083 248.45 li
186.363 247.91 li
187.563 247.55 li
187.803 246.77 li
187.083 245.75 li
187.503 244.49 li
185.943 244.55 li
185.703 243.17 li
184.383 244.97 li
184.683 243.77 li
182.943 243.71 li
182.343 242.15 li
181.443 241.91 li
180.903 243.23 li
179.823 243.41 li
180.843 244.85 li
179.523 244.13 li
178.563 245.33 li
179.523 246.89 li
178.263 245.69 li
177.243 247.61 li
176.943 245.93 li
177.903 245.45 li
176.883 245.57 li
176.463 244.79 li
177.243 244.07 li
176.883 242.69 li
175.683 243.05 li
176.403 239.51 li
175.443 239.87 li
177.963 231.23 li
177.963 229.97 li
177.543 229.55 li
177.003 230.21 li
177.003 228.41 li
176.283 227.75 li
177.663 224.63 li
179.643 223.01 li
178.503 221.81 li
178.503 221.15 li
180.003 220.85 li
179.463 220.37 li
181.143 220.61 li
181.263 219.89 li
256.383 318.29 mo
255.723 318.05 li
255.482 318.29 li
252.003 278.69 mo
251.163 275.99 li
250.923 277.37 li
250.022 277.85 li
250.022 280.31 li
252.243 282.59 li
252.363 281.69 li
253.263 283.43 li
253.923 282.59 li
253.503 280.55 li
253.083 279.95 li
253.263 280.67 li
252.243 280.67 li
252.003 278.69 li
cp
255.303 318.29 mo
256.022 316.61 li
255.243 315.71 li
254.942 313.31 li
253.442 312.05 li
254.643 311.93 li
254.283 308.99 li
253.563 308.69 li
254.103 309.83 li
253.563 309.29 li
253.143 310.25 li
253.083 307.67 li
251.823 307.79 li
252.123 307.07 li
253.743 307.61 li
252.482 305.75 li
251.522 305.45 li
251.823 304.61 li
250.743 301.31 li
251.703 301.19 li
251.283 300.41 li
251.763 300.53 li
252.603 298.61 li
252.063 297.65 li
252.663 296.57 li
252.063 296.81 li
251.823 296.15 li
250.923 297.71 li
251.463 295.73 li
251.283 296.03 li
250.923 294.53 li
251.703 291.71 li
252.482 290.33 li
253.683 289.85 li
253.683 288.71 li
252.783 287.15 li
251.343 286.73 li
251.103 287.27 li
251.043 285.95 li
248.703 283.37 li
246.723 282.59 li
246.843 280.43 li
246.003 279.23 li
248.223 273.59 li
247.683 272.93 li
248.463 272.87 li
249.603 270.05 li
249.063 269.51 li
249.902 269.03 li
249.303 268.07 li
249.963 267.41 li
249.963 268.31 li
250.383 267.41 li
249.843 266.75 li
250.263 265.73 li
250.982 264.89 li
252.123 265.43 li
252.063 264.71 li
252.723 264.71 li
254.883 259.97 li
253.803 259.91 li
253.803 259.31 li
255.183 259.61 li
256.803 256.13 li
255.963 255.29 li
256.803 255.47 li
257.763 252.47 li
257.823 253.07 li
258.123 252.89 li
159.543 303.95 mo
158.643 304.25 li
156.303 306.89 li
156.363 307.85 li
154.023 307.85 li
156.603 303.229 li
159.543 303.53 li
153.423 226.31 mo
152.763 224.69 li
154.623 221.51 li
156.603 220.61 li
157.803 221.51 li
158.643 221.27 li
157.743 223.61 li
156.303 224.21 li
155.223 225.83 li
153.423 226.25 li
153.423 226.31 li
cp
142.923 313.49 mo
143.163 309.17 li
148.563 303.29 li
150.723 304.37 li
151.203 304.97 li
150.603 306.71 li
146.883 311.45 li
146.943 312.77 li
145.023 312.65 li
144.723 311.99 li
144.363 313.01 li
145.023 313.43 li
142.923 313.55 li
142.923 313.49 li
cp
148.143 244.01 mo
148.143 243.05 li
149.403 242.15 li
148.563 242.63 li
148.983 241.85 li
148.383 241.97 li
148.743 240.89 li
148.263 240.83 li
149.403 239.87 li
148.563 239.57 li
150.663 236.21 li
150.483 235.73 li
149.883 236.45 li
150.363 235.43 li
152.223 236.51 li
153.363 239.75 li
152.163 240.41 li
152.403 241.13 li
151.683 241.13 li
151.683 241.91 li
150.183 243.35 li
149.943 242.27 li
148.143 244.07 li
148.143 244.01 li
cp
159.543 289.97 mo
159.243 289.67 li
157.383 289.07 li
155.103 286.37 li
154.503 283.79 li
151.563 279.53 li
151.503 277.91 li
152.883 276.95 li
153.423 275.09 li
150.663 269.63 li
150.783 265.13 li
151.683 264.11 li
152.043 259.55 li
151.083 262.43 li
150.123 262.07 li
150.723 261.11 li
151.143 252.83 li
152.763 252.65 li
152.943 256.79 li
156.183 263.21 li
155.463 267.89 li
157.383 268.97 li
157.803 270.41 li
156.963 273.29 li
159.063 276.95 li
159.003 277.91 li
156.903 279.23 li
156.723 281.27 li
159.123 283.73 li
159.543 283.61 li
45.4829 219.89 mo
45.6626 220.01 li
45.2427 219.89 li
39.3628 219.89 mo
38.6426 221.57 li
39.1826 224.03 li
42.6626 220.55 li
42.7827 219.89 li
34.3828 229.13 mo
35.5229 228.59 li
36.0029 227.33 li
37.563 226.25 li
38.3428 224.21 li
38.043 221.57 li
38.8228 219.89 li
43.3228 219.89 mo
39.123 225.77 li
34.7427 230.15 li
34.3828 230.15 li
43.1426 246.17 mo
44.2827 240.59 li
43.1426 239.69 li
42.9629 237.77 li
41.7627 237.35 li
41.8228 236.75 li
42.4829 236.03 li
43.3228 236.87 li
43.0229 235.91 li
43.6826 235.37 li
44.4629 236.21 li
46.3828 235.31 li
45.7227 236.69 li
44.2827 237.29 li
44.043 238.97 li
44.8228 239.63 li
45.603 239.21 li
45.3027 241.25 li
47.2227 240.53 li
45.603 241.67 li
46.1426 241.97 li
45.2427 242.33 li
44.103 244.01 li
43.6826 246.17 li
43.1426 246.17 li
cp
356.643 140.51 mo
357.902 139.37 li
360.783 132.77 li
362.883 130.79 li
363.183 129.29 li
364.863 127.25 li
365.283 121.43 li
286.803 219.89 mo
293.163 212.87 li
305.103 203.09 li
317.343 196.07 li
336.603 175.97 li
346.323 161.09 li
348.902 153.71 li
354.963 143.87 li
354.902 142.01 li
356.643 140.51 li
181.983 219.89 mo
181.743 219.41 li
182.523 219.89 li
181.263 219.89 mo
181.323 219.53 li
181.803 219.89 li
239.823 155.27 mo
236.883 160.55 li
235.323 160.91 li
235.383 159.89 li
237.303 158.93 li
237.003 156.11 li
238.442 154.91 li
239.043 155.57 li
239.763 155.15 li
239.823 155.27 li
cp
164.763 209.99 mo
164.523 208.01 li
163.383 207.05 li
164.463 205.13 li
171.783 199.13 li
174.063 196.37 li
172.923 197.75 li
173.463 201.11 li
172.263 203.21 li
168.903 205.01 li
165.483 209.81 li
164.763 209.99 li
cp
220.383 174.29 mo
221.103 179.27 li
220.442 181.13 li
221.283 183.11 li
220.803 187.31 li
222.902 190.67 li
225.482 191.63 li
225.603 195.59 li
224.823 196.37 li
223.982 196.25 li
222.482 191.99 li
221.103 190.67 li
219.963 190.61 li
220.143 188.39 li
218.223 187.31 li
218.103 185.15 li
217.803 185.75 li
217.083 184.31 li
218.163 175.01 li
218.703 174.47 li
219.063 175.49 li
219.063 174.47 li
220.383 174.23 li
220.383 174.29 li
cp
184.803 205.97 mo
184.743 204.89 li
186.003 205.25 li
187.323 204.23 li
187.083 204.83 li
189.123 204.89 li
190.083 203.75 li
190.323 204.23 li
191.643 203.33 li
191.943 203.87 li
193.443 202.49 li
193.323 203.57 li
193.983 203.69 li
190.083 205.07 li
191.883 205.37 li
190.683 205.97 li
191.043 206.33 li
192.423 205.97 li
191.763 207.95 li
188.403 205.85 li
187.503 206.09 li
187.803 207.17 li
187.023 205.97 li
186.363 206.21 li
186.903 207.11 li
184.803 205.97 li
cp
182.943 219.89 mo
182.883 219.05 li
183.663 218.69 li
183.543 219.53 li
184.863 219.41 li
184.803 218.03 li
185.703 217.01 li
185.703 218.21 li
186.543 218.15 li
185.763 218.99 li
187.923 217.97 li
188.103 219.17 li
188.883 218.99 li
190.083 218.03 li
189.843 217.31 li
190.443 217.79 li
190.683 216.77 li
191.763 216.23 li
190.983 215.69 li
192.723 215.03 li
192.243 216.41 li
193.743 216.41 li
194.163 217.13 li
193.023 217.07 li
193.923 218.09 li
193.983 217.61 li
194.283 218.15 li
195.123 217.79 li
195.423 216.71 li
196.563 216.77 li
196.083 217.91 li
196.923 217.55 li
197.163 218.33 li
198.843 217.19 li
198.903 219.89 li
61.0229 200.87 mo
63.063 200.27 li
71.2227 199.85 li
81.7227 198.11 li
85.3828 198.59 li
87.2427 199.31 li
88.8027 200.93 li
90.4829 201.05 li
96.7227 208.37 li
102.063 210.41 li
103.503 212.39 li
105.543 212.45 li
106.263 213.17 li
103.143 212.45 li
101.643 210.41 li
97.1426 209.09 li
90.8428 202.01 li
87.543 200.99 li
84.4829 198.83 li
76.5029 199.07 li
71.9429 201.11 li
65.7026 200.51 li
61.623 201.17 li
61.0229 201.53 li
45.2427 219.89 mo
43.6826 219.35 li
43.3228 219.89 li
42.7827 219.89 mo
44.3428 212.03 li
45.7827 209.57 li
54.3628 202.79 li
61.0229 200.87 li
61.0229 201.53 mo
55.9229 204.05 li
53.2827 204.41 li
46.9829 209.27 li
45.1826 211.49 li
43.9829 218.75 li
44.5229 218.57 li
44.3428 219.05 li
45.4829 219.89 li
38.8228 219.89 mo
40.6826 215.81 li
39.7227 209.75 li
41.8828 204.59 li
42.063 197.87 li
43.4429 196.07 li
42.123 199.49 li
42.063 204.83 li
40.1426 209.93 li
40.9829 216.23 li
39.3628 219.89 li
396.063 98.27 mo
401.402 95.9297 li
397.143 94.4902 li
393.843 95.5098 li
392.643 94.4297 li
391.203 94.3701 li
389.223 96.1099 li
391.683 98.0898 li
396.063 98.27 li
cp
365.283 121.43 mo
365.583 118.31 li
368.402 117.23 li
370.203 117.83 li
370.623 117.05 li
368.283 115.85 li
368.823 117.11 li
366.723 117.29 li
368.223 115.73 li
367.683 111.89 li
368.343 110.09 li
367.503 109.73 li
367.323 108.35 li
369.363 103.19 li
364.503 101.63 li
362.343 102.47 li
361.442 104.33 li
359.283 105.65 li
356.643 106.13 li
356.643 72.8901 mo
358.442 72.8901 li
361.383 71.0898 li
370.143 68.9302 li
378.303 65.0898 li
377.883 61.1299 li
379.022 58.6099 li
381.123 56.6299 li
388.863 53.8701 li
391.982 53.5098 li
396.603 50.9902 li
402.243 50.6299 li
402.902 50.9902 li
356.643 106.13 mo
352.442 106.97 li
351.003 108.11 li
346.442 109.07 li
342.183 108.35 li
338.463 110.21 li
334.022 110.57 li
331.143 109.73 li
323.823 113.99 li
321.603 114.65 li
315.303 112.79 li
306.963 117.41 li
303.183 117.71 li
300.482 117.23 li
296.522 114.17 li
292.683 109.31 li
292.563 107.57 li
290.043 106.79 li
289.203 105.35 li
285.723 105.65 li
283.982 106.85 li
283.022 106.25 li
283.022 105.59 li
284.522 105.95 li
285.543 104.03 li
288.243 103.43 li
289.442 101.99 li
291.363 101.63 li
291.783 99.8901 li
290.883 96.71 li
287.703 92.5098 li
286.923 93.6499 li
285.543 93.0498 li
285.123 91.0698 li
283.263 89.1499 li
281.643 89.3901 li
280.143 85.0698 li
279.423 84.8301 li
280.143 86.0298 li
277.503 82.9102 li
274.743 82.0698 li
269.823 75.1099 li
265.803 74.27 li
265.203 72.29 li
264.183 72.3501 li
264.363 71.6899 li
263.343 71.0898 li
263.163 71.75 li
261.902 71.3301 li
261.183 72.23 li
260.163 71.8101 li
258.303 68.8701 li
258.963 67.9102 li
258.123 67.1899 li
263.402 20.3301 mo
264.363 22.25 li
265.323 21.9502 li
265.923 22.73 li
265.743 23.9902 li
267.543 25.1899 li
267.482 26.6299 li
268.623 29.0303 li
269.522 29.3901 li
269.223 30.77 li
270.363 31.9102 li
270.003 33.3501 li
272.103 35.27 li
274.263 40.6099 li
280.863 46.25 li
281.463 50.75 li
281.463 49.0098 li
283.263 50.8701 li
283.083 52.0698 li
284.763 53.5698 li
286.083 60.4697 li
285.843 62.3901 li
284.583 64.1899 li
285.783 68.4502 li
285.423 69.1699 li
284.703 67.5498 li
284.522 68.75 li
283.743 68.9302 li
286.143 69.71 li
287.163 72.0498 li
287.043 73.1899 li
286.383 72.3501 li
287.883 76.9697 li
287.402 76.4902 li
290.522 84.5298 li
290.043 88.9102 li
292.563 93.23 li
292.263 94.73 li
293.583 94.0098 li
297.183 95.5698 li
301.683 94.79 li
303.363 93.3501 li
306.183 94.25 li
306.663 93.8301 li
305.942 93.5298 li
307.383 92.9902 li
307.083 93.71 li
307.803 93.9502 li
308.703 91.6699 li
311.163 90.8901 li
313.863 88.0098 li
324.063 87.1699 li
330.963 84.9502 li
336.723 80.9302 li
338.823 81.71 li
343.863 80.9902 li
346.803 78.1099 li
347.522 76.3101 li
350.163 74.9302 li
355.982 72.8301 li
356.643 72.8901 li
231.723 105.17 mo
231.303 103.43 li
229.743 102.95 li
229.383 103.49 li
228.423 102.59 li
228.663 99.8301 li
229.863 98.75 li
231.183 99.4697 li
231.723 98.6299 li
233.283 98.4502 li
234.303 101.33 li
232.563 104.99 li
231.723 105.17 li
cp
258.123 67.1899 mo
256.863 66.1099 li
255.902 67.25 li
256.683 69.5898 li
256.263 70.5498 li
255.243 70.3101 li
254.402 66.4102 li
252.843 65.9902 li
252.603 63.23 li
251.283 62.21 li
250.623 60.3501 li
249.663 53.9902 li
247.503 46.6699 li
243.902 40.0098 li
242.522 39.5303 li
242.163 38.5098 li
241.022 38.5098 li
241.203 37.6099 li
240.482 38.3301 li
239.163 37.6699 li
239.463 36.3501 li
235.803 33.29 li
233.463 33.1099 li
232.623 31.6099 li
231.543 25.73 li
230.522 23.6899 li
230.823 24.0498 li
231.183 23.0898 li
230.463 20.3301 li
0 0 0 1 cmyk
@
.24 lw
135.543 532.729 mo
133.743 531.77 li
132.363 528.17 mo
133.203 529.729 li
133.923 529.67 li
133.743 531.77 li
135.603 532.729 mo
137.283 534.95 li
140.823 535.67 li
141.303 533.27 li
142.323 532.25 li
141.963 531.41 li
143.583 529.97 li
148.023 529.19 li
149.703 528.17 li
180.603 492.89 mo
180.123 483.83 li
178.923 483.29 li
159.543 443.21 mo
162.603 444.47 li
168.483 443.87 li
170.943 444.229 li
172.323 445.19 li
183.303 433.55 li
184.083 433.91 li
184.083 433.91 mo
182.763 431.63 li
184.383 429.35 li
184.203 426.05 li
185.823 425.63 li
187.863 422.69 li
188.163 420.83 li
189.363 420.11 li
189.423 419.81 li
172.383 445.25 mo
174.963 453.41 li
174.843 456.47 li
178.023 461.33 li
178.143 463.91 li
179.403 467.03 li
179.463 479.93 li
178.443 481.729 li
178.983 483.29 li
178.083 483.71 li
173.583 480.77 li
170.643 482.81 li
167.463 488.75 li
167.643 492.59 li
168.423 492.17 li
169.263 494.99 li
171.003 496.91 li
174.603 498.11 li
179.163 498.17 li
179.343 492.59 li
188.043 493.01 li
152.223 441.47 mo
153.363 442.85 li
124.083 468.89 mo
118.863 470.09 li
116.043 479.63 mo
118.863 471.89 li
118.803 470.03 li
130.143 524.15 mo
132.363 528.17 li
61.0229 470.33 mo
61.0229 488.69 li
146.763 512.57 mo
146.283 512.09 li
143.823 512.69 li
143.283 513.53 li
141.543 513.53 li
139.923 515.57 li
137.343 515.87 li
133.443 522.29 li
130.083 524.09 li
153.363 442.85 mo
157.263 442.25 li
159.543 443.21 li
136.983 425.09 mo
136.743 431.03 li
138.963 433.61 li
139.983 436.25 li
145.443 436.91 li
150.303 438.65 li
150.303 441.05 li
152.223 441.47 li
149.703 528.17 mo
151.383 527.21 li
151.383 524.39 li
152.583 523.91 li
152.643 522.47 li
154.203 520.729 li
152.883 517.85 li
149.223 515.57 li
146.703 512.57 li
124.083 468.89 mo
125.583 466.79 li
128.523 464.87 li
129.663 458.87 li
131.283 457.01 li
133.383 455.63 li
135.183 455.51 li
135.903 453.77 li
137.343 453.83 li
142.803 447.229 li
148.863 445.67 li
149.943 443.21 li
153.423 442.85 li
129.423 419.81 mo
132.123 420.77 li
132.843 424.97 li
137.043 425.15 li
61.0229 461.81 mo
61.0229 470.33 li
64.8628 473.27 li
66.4829 476.99 li
67.6826 477.89 li
67.4429 479.63 li
69.4829 485.21 li
67.0229 488.69 li
67.8027 493.55 li
70.8027 419.81 mo
70.7427 440.75 li
61.0229 440.81 li
116.043 479.63 mo
113.823 481.07 li
110.583 480.77 li
107.103 481.85 li
103.863 481.07 li
102.303 479.63 li
99.4829 479.69 li
95.043 475.85 li
90.6626 476.09 li
88.9829 478.01 li
87.7227 483.71 li
85.9829 486.17 li
83.1626 487.43 li
81.2427 490.55 li
78.4229 491.15 li
78.4229 492.41 li
77.4028 493.19 li
72.123 493.19 li
69.8428 492.41 li
67.8027 493.55 li
61.0229 488.69 mo
60.9629 510.47 li
60.9629 510.41 mo
56.7627 511.61 li
55.7427 513.53 li
53.7026 514.01 li
54.0029 515.81 li
52.4429 516.47 li
48.4229 515.09 li
43.0229 515.87 li
40.4429 514.43 li
37.6826 514.37 li
37.1426 513.35 li
35.4028 513.71 li
35.5229 512.21 li
34.623 510.95 li
35.3428 509.93 li
34.8628 508.37 li
34.3828 508.43 li
61.0229 440.81 mo
60.9629 440.81 li
61.0229 461.81 li
258.123 326.33 mo
262.383 323.03 li
205.443 338.21 mo
205.023 338.99 li
204.483 338.39 li
205.443 338.21 li
cp
205.863 338.33 mo
206.703 338.57 li
205.983 339.47 li
205.863 338.33 li
cp
189.483 392.51 mo
188.643 393.95 li
189.543 395.09 li
188.583 398.81 li
188.823 401.63 li
189.843 402.71 li
189.183 403.31 li
243.243 332.39 mo
247.263 329.93 li
250.863 329.93 li
253.263 328.19 li
258.123 326.33 li
163.623 374.87 mo
163.743 378.71 li
168.723 378.65 li
169.443 379.25 li
170.763 378.53 li
172.143 378.77 li
173.643 380.27 li
176.523 380.81 li
178.383 382.85 li
183.003 383.39 li
186.183 384.71 li
186.843 385.91 li
188.943 385.85 li
187.563 388.19 li
189.543 392.39 li
189.423 419.81 mo
189.723 417.53 li
188.763 416.15 li
187.563 416.51 li
187.623 414.53 li
186.963 414.229 li
187.983 410.39 li
187.503 409.67 li
186.303 409.67 li
186.123 408.83 li
186.243 407.63 li
188.403 407.03 li
188.043 404.57 li
189.303 403.85 li
189.123 403.25 li
159.543 374.99 mo
163.623 374.87 li
161.643 368.27 li
191.343 358.43 li
204.063 318.29 mo
204.723 320.93 li
204.663 323.39 li
205.623 325.67 li
205.023 329.33 li
206.523 331.67 li
207.723 332.03 li
208.443 333.89 li
243.243 332.39 mo
240.723 330.95 li
237.902 331.01 li
237.063 331.55 li
236.343 333.83 li
233.043 335.51 li
229.803 334.97 li
228.783 333.89 li
226.863 333.89 li
224.223 335.63 li
223.503 335.03 li
220.563 335.27 li
220.263 334.01 li
217.083 332.39 li
214.443 334.31 li
205.143 333.95 li
205.023 335.87 li
202.623 340.37 li
204.123 345.41 li
204.543 351.71 li
205.443 353.27 li
207.483 353.27 li
209.763 355.13 li
217.503 364.97 li
217.923 367.25 li
216.723 370.25 li
217.383 372.71 li
216.843 378.77 li
214.143 380.33 li
212.823 379.91 li
211.683 380.99 li
211.263 383.45 li
210.183 384.229 li
211.863 386.93 li
211.683 390.229 li
209.643 390.11 li
209.343 389.03 li
210.183 388.31 li
210.243 387.11 li
208.083 386.15 li
204.603 381.83 li
203.403 381.41 li
203.163 379.13 li
201.483 377.57 li
201.543 376.55 li
203.163 375.11 li
203.283 373.13 li
204.783 371.33 li
204.123 364.07 li
202.503 362.21 li
199.683 363.29 li
196.263 363.29 li
195.783 364.43 li
193.863 362.45 li
192.003 358.79 li
190.683 357.53 li
189.423 358.85 li
188.103 356.51 li
186.903 355.97 li
187.443 355.37 li
187.023 354.71 li
185.943 354.47 li
187.443 353.57 li
189.303 350.21 li
189.483 347.21 li
188.703 345.95 li
189.603 344.27 li
190.983 344.45 li
191.883 343.49 li
192.783 343.61 li
194.523 341.81 li
192.783 341.57 li
191.823 339.65 li
192.363 335.69 li
192.183 334.07 li
191.403 333.95 li
191.523 332.33 li
193.203 329.81 li
191.583 327.11 li
194.163 325.97 li
196.023 323.87 li
194.703 322.19 li
194.583 320.45 li
192.303 318.95 li
192.423 318.29 li
102.723 393.71 mo
74.5229 399.229 li
93.4829 399.11 mo
96.603 404.09 li
99.603 401.15 li
103.983 398.57 li
105.963 399.65 li
109.803 396.89 li
112.863 397.01 li
102.783 393.71 mo
110.643 394.85 li
112.923 397.01 li
113.343 399.77 li
119.703 408.53 li
119.763 410.51 li
121.743 414.89 li
123.363 415.43 li
123.363 416.21 li
127.323 419.09 li
129.423 419.81 li
93.4229 399.05 mo
75.4229 402.229 li
70.8027 402.35 li
70.8027 419.81 li
95.2227 395.21 mo
92.5229 393.71 li
82.083 383.63 li
80.7026 380.39 li
80.7026 348.29 li
100.623 348.29 li
99.3027 346.07 li
100.923 342.05 li
100.143 340.25 li
100.563 336.35 li
100.083 334.79 li
101.223 332.27 li
100.263 326.93 li
74.583 399.229 mo
72.4829 398.39 li
68.9429 399.47 li
64.2627 397.61 li
61.0229 397.85 li
112.863 397.07 mo
115.323 397.67 li
117.063 397.13 li
119.823 399.17 li
122.223 397.91 li
126.963 399.89 li
130.383 398.69 li
136.083 392.27 li
138.123 388.37 li
147.303 384.229 li
148.983 378.29 li
155.223 375.17 li
159.543 374.99 li
146.103 318.29 mo
145.443 320.45 li
146.763 324.77 li
145.263 326.57 li
143.343 333.53 li
144.723 336.89 li
147.183 338.03 li
150.003 342.05 li
152.223 341.87 li
154.563 342.83 li
154.443 340.61 li
157.623 339.77 li
157.563 352.79 li
156.003 352.49 li
156.483 350.99 li
155.463 350.45 li
151.683 352.61 li
149.823 352.25 li
147.903 348.11 li
146.463 346.67 li
145.383 347.03 li
144.183 343.43 li
143.223 342.59 li
139.623 341.93 li
138.543 340.79 li
136.503 341.21 li
135.243 339.95 li
134.523 337.67 li
132.303 336.05 li
132.003 333.95 li
130.323 334.19 li
129.723 337.19 li
127.323 338.39 li
124.503 337.31 li
120.183 337.25 li
116.643 335.51 li
115.323 335.99 li
113.823 334.61 li
113.103 331.97 li
113.523 330.17 li
107.763 331.37 li
105.543 332.87 li
103.503 332.21 li
104.463 331.01 li
104.343 329.33 li
101.823 328.61 li
101.703 327.35 li
100.383 326.93 li
99.063 328.49 li
95.2827 327.83 li
91.3828 329.21 li
85.9229 328.61 li
85.4429 329.57 li
83.043 330.71 li
82.3228 326.87 li
83.8828 325.79 li
83.2827 323.27 li
83.8228 321.95 li
82.563 318.29 li
61.0229 397.85 mo
58.6826 398.03 li
57.6626 397.43 li
50.4028 397.19 li
47.583 395.45 li
45.7227 392.81 li
34.3828 392.93 li
267.902 219.89 mo
267.963 228.35 li
273.482 236.21 li
198.363 219.89 mo
198.723 221.15 li
198.243 229.67 li
165.183 243.35 mo
167.703 242.93 li
168.363 240.17 li
167.523 238.73 li
167.823 236.21 li
166.863 233.93 li
165.063 232.85 li
164.343 230.27 li
167.103 300.35 mo
169.803 304.25 li
173.103 304.19 li
174.963 305.33 li
175.083 306.53 li
176.163 307.43 li
178.803 307.67 li
179.043 309.05 li
183.483 309.65 li
184.623 310.97 li
186.603 311.15 li
188.523 312.35 li
159.543 286.67 mo
160.383 287.21 li
162.603 289.91 li
167.163 300.35 li
159.543 301.49 li
159.543 261.41 mo
161.223 259.91 li
162.723 256.97 li
163.503 256.97 li
163.983 254.63 li
166.083 253.37 li
166.023 252.47 li
167.763 251.81 li
167.403 249.71 li
167.883 248.99 li
166.143 248.99 li
165.123 248.21 li
164.343 248.75 li
163.683 247.91 li
164.703 245.81 li
163.803 245.87 li
165.183 243.35 li
163.383 242.39 li
161.043 243.65 li
159.543 242.75 li
192.423 318.29 mo
192.663 316.55 li
191.463 315.59 li
191.163 314.33 li
190.263 314.15 li
190.023 314.93 li
189.063 314.51 li
188.583 312.29 li
191.043 313.37 li
192.243 313.13 li
193.443 314.45 li
196.563 314.15 li
198.183 315.35 li
198.543 313.55 li
199.383 313.13 li
202.203 315.59 li
204.063 318.29 li
159.543 234.05 mo
161.223 232.97 li
163.083 230.27 li
165.843 230.39 li
166.983 229.61 li
199.203 229.67 li
234.482 249.23 li
235.203 249.77 li
235.623 252.29 li
234.543 253.25 li
234.603 254.21 li
235.803 254.45 li
236.223 255.65 li
250.263 265.61 li
155.583 233.39 mo
153.243 234.65 li
151.983 236.45 li
151.983 236.45 mo
150.963 238.07 li
151.383 240.41 li
150.843 241.85 li
148.323 243.47 li
148.623 245.87 li
149.943 246.71 li
159.543 301.49 mo
148.683 303.17 li
153.903 263.45 mo
153.123 268.31 li
155.943 275.99 li
154.563 278.63 li
155.103 281.63 li
156.903 284.87 li
159.543 286.67 li
159.543 242.75 mo
159.063 242.45 li
158.643 246.23 li
157.023 247.31 li
153.303 247.55 li
152.943 245.87 li
150.303 245.39 li
149.523 247.31 li
152.043 249.83 li
151.803 252.53 li
151.803 252.53 mo
152.043 258.23 li
153.423 260.39 li
153.843 263.45 li
157.083 263.57 li
159.543 261.41 li
156.663 219.89 mo
155.883 228.59 li
155.283 229.73 li
155.583 233.45 li
157.983 232.79 li
158.643 234.17 li
159.303 234.23 li
159.543 234.05 li
82.563 318.29 mo
82.2627 317.51 li
79.4429 314.93 li
78.6626 312.41 li
80.103 303.29 li
78.3027 298.43 li
79.3228 293.33 li
78.543 291.35 li
66.3027 291.35 li
67.2026 287.75 li
64.2627 287.75 li
64.083 288.53 li
61.0229 288.53 li
148.683 303.229 mo
149.343 305.03 li
148.323 306.77 li
143.523 310.91 li
144.963 311.87 li
146.703 316.19 li
146.103 318.29 li
39.063 219.89 mo
38.4629 221.27 li
38.4629 225.11 li
34.623 229.67 li
34.3828 229.79 li
61.0229 288.53 mo
56.4629 288.53 li
55.9829 291.41 li
56.4028 293.09 li
55.7427 294.23 li
54.8428 294.23 li
54.8428 298.43 li
49.1426 298.43 li
48.8428 297.77 li
46.5029 297.77 li
46.4429 298.37 li
42.543 298.67 li
42.4229 299.51 li
40.2627 298.85 li
37.563 299.39 li
36.603 299.09 li
34.3828 295.61 li
276.963 180.77 mo
271.263 188.81 li
267.843 192.11 li
267.843 192.23 mo
267.902 219.89 li
258.123 181.37 mo
265.803 177.83 li
269.522 181.19 li
275.103 180.65 li
276.303 181.19 li
278.942 178.79 li
286.323 177.65 li
289.263 174.11 li
294.423 171.89 li
297.363 171.23 li
306.902 171.83 li
322.803 154.91 li
336.843 141.23 li
327.063 141.23 li
297.663 131.33 li
293.883 127.85 li
292.022 127.25 li
290.402 124.97 li
289.803 122.63 li
288.423 122.15 li
287.883 121.43 li
199.023 217.55 mo
198.063 218.87 li
198.363 219.89 li
204.123 208.97 mo
203.043 211.79 li
200.523 213.95 li
199.983 216.53 li
199.023 217.55 li
202.683 174.77 mo
203.883 173.45 li
211.983 170.63 li
211.863 171.77 li
213.543 171.71 li
213.003 173.09 li
213.843 174.65 li
214.803 174.71 li
215.403 173.87 li
215.703 174.59 li
198.963 178.49 mo
199.863 179.69 li
199.983 181.85 li
201.183 181.85 li
200.703 182.87 li
203.523 183.89 li
202.923 185.81 li
203.463 188.69 li
204.483 189.41 li
205.443 191.81 li
206.463 191.99 li
206.763 193.55 li
208.203 195.35 li
207.663 196.49 li
209.103 201.05 li
208.803 203.51 li
206.763 206.21 li
207.063 207.83 li
204.183 208.97 li
218.103 174.59 mo
202.803 174.71 li
194.223 183.11 li
190.923 182.99 li
189.303 181.79 li
186.363 183.05 li
183.243 183.17 li
181.203 184.49 li
181.143 185.45 li
178.803 184.67 li
177.303 182.39 li
174.723 184.07 li
171.123 182.69 li
169.143 183.71 li
168.003 185.69 li
201.543 121.43 mo
199.803 125.87 li
200.163 135.59 li
196.743 137.69 li
195.303 136.61 li
191.103 136.97 li
190.983 139.97 li
189.003 141.95 li
189.603 143.33 li
196.203 144.65 li
199.263 147.35 li
199.203 148.73 li
200.763 149.51 li
200.943 150.65 li
203.583 151.97 li
204.243 153.65 li
205.863 154.31 li
208.623 160.43 li
208.683 162.23 li
209.823 164.63 li
211.683 165.83 li
211.863 167.21 li
213.783 166.61 li
217.083 167.69 li
216.483 172.85 li
218.103 174.53 li
218.223 175.55 li
219.123 176.27 li
227.463 176.39 li
228.902 176.99 li
239.583 184.49 li
242.823 184.61 li
243.603 184.07 li
247.383 185.45 li
251.463 185.57 li
253.743 186.47 li
256.803 181.97 li
258.123 181.37 li
159.543 178.31 mo
161.583 181.07 li
165.003 181.97 li
165.123 184.49 li
167.103 183.77 li
167.943 185.57 li
168.663 185.45 li
167.103 189.83 li
168.183 191.93 li
166.743 195.89 li
167.703 195.95 li
168.243 196.97 li
169.143 196.25 li
169.923 197.33 li
171.363 197.27 li
172.383 199.07 li
169.743 202.55 li
164.043 208.01 li
161.883 208.73 li
160.983 211.07 li
159.543 211.61 li
134.463 170.69 mo
130.803 168.83 li
128.703 170.57 li
127.323 169.91 li
124.983 170.39 li
121.443 168.35 li
119.163 169.19 li
115.623 167.09 li
113.823 167.75 li
113.103 170.63 li
106.923 171.65 li
106.323 170.57 li
104.283 169.73 li
104.343 170.57 li
102.963 171.53 li
96.3027 173.45 li
94.7427 174.89 li
89.4629 172.61 li
87.4829 175.91 li
86.5229 176.09 li
86.043 178.55 li
84.0029 179.45 li
78.1826 177.77 li
76.1426 178.25 li
73.623 177.41 li
72.9028 177.83 li
70.5029 176.39 li
66.7827 176.63 li
64.3828 173.15 li
61.0229 170.99 li
74.7026 121.43 mo
74.5229 121.73 li
73.3828 121.73 li
70.9829 124.07 li
69.123 127.25 li
67.5029 128.45 li
66.3027 128.21 li
65.3428 130.01 li
62.043 129.89 li
61.0229 130.43 li
159.543 211.61 mo
159.183 211.79 li
159.183 215.09 li
156.723 219.29 li
156.663 219.89 li
96.3628 121.43 mo
97.1426 122.81 li
96.9629 128.63 li
95.4028 129.65 li
94.9829 131.15 li
95.5229 131.81 li
96.3027 131.51 li
95.6426 134.21 li
102.843 134.39 li
103.083 135.53 li
101.823 137.57 li
102.183 138.17 li
108.363 139.37 li
111.063 142.31 li
112.743 142.79 li
113.163 144.77 li
112.083 145.43 li
112.323 146.27 li
114.843 148.37 li
120.603 151.19 li
121.143 152.75 li
124.143 154.67 li
123.003 156.41 li
123.183 157.25 li
125.283 158.81 li
124.443 160.25 li
125.223 159.95 li
125.703 160.73 li
128.103 161.21 li
128.283 161.93 li
131.943 163.85 li
132.783 165.17 li
132.303 166.73 li
132.963 168.65 li
135.243 171.59 li
137.583 172.91 li
137.763 174.77 li
140.163 175.19 li
140.523 176.51 li
143.823 177.95 li
147.483 175.13 li
147.903 175.91 li
149.823 175.79 li
152.103 177.29 li
153.963 175.49 li
154.443 173.99 li
155.763 174.23 li
157.743 175.19 li
157.503 176.93 li
159.123 177.65 li
159.543 178.31 li
46.623 189.77 mo
43.4429 196.07 li
34.3828 142.91 mo
38.4028 141.41 li
46.623 189.71 mo
47.583 188.45 li
47.5229 186.05 li
46.0229 184.19 li
43.9829 184.79 li
43.2026 185.75 li
42.3027 184.97 li
39.9028 185.21 li
39.603 184.43 li
37.5029 184.31 li
36.1826 183.47 li
34.8628 184.49 li
34.3828 184.61 li
43.5029 196.13 mo
42.1826 198.11 li
42.0029 204.89 li
40.083 209.81 li
40.2627 214.01 li
40.9829 215.45 li
39.063 219.89 li
61.0229 170.99 mo
59.3428 169.97 li
55.3228 169.55 li
51.8428 171.83 li
48.6626 176.87 li
46.623 177.35 li
47.6426 180.41 li
47.4629 185.81 li
61.0229 130.43 mo
59.9429 130.97 li
51.0029 131.75 li
49.8628 132.89 li
52.3828 134.63 li
47.103 140.87 li
38.4028 141.41 li
387.123 54.71 mo
376.383 30.29 li
364.383 32.5098 li
356.643 33.3501 li
376.383 30.29 mo
402.902 20.9902 li
281.703 96.8301 mo
279.963 93.8301 li
278.402 93.4697 li
274.323 87.5898 li
270.963 85.6699 li
267.363 80.5698 li
260.223 77.5098 li
259.323 75.8301 li
258.123 76.8501 li
356.643 33.3501 mo
347.942 34.25 li
338.763 38.9302 li
333.003 46.25 li
331.683 49.73 li
328.923 51.4102 li
327.123 51.4102 li
324.603 47.9902 li
318.183 48.3501 li
311.343 47.5098 li
309.543 46.4902 li
299.223 46.6699 li
296.942 47.75 li
291.963 45.5298 li
289.442 47.5098 li
290.402 48.1099 li
288.963 49.9697 li
288.902 51.71 li
289.982 53.0298 li
289.683 54.29 li
288.663 54.23 li
288.303 55.5498 li
285.723 57.29 li
287.103 111.47 mo
285.783 111.59 li
284.043 110.51 li
277.442 112.19 li
275.763 111.65 li
275.463 106.43 li
276.123 104.09 li
277.323 103.37 li
282.303 96.23 li
284.703 97.8501 li
285.902 97.0698 li
286.503 95.21 li
288.902 94.3701 li
287.883 121.43 mo
286.203 119.33 li
284.343 115.19 li
290.163 106.73 li
258.123 76.8501 mo
257.583 77.21 li
253.982 75.29 li
253.263 75.8301 li
253.563 76.4302 li
251.942 75.9502 li
250.743 77.27 li
250.803 76.1899 li
249.783 74.8101 li
248.583 74.9302 li
247.143 76.3701 li
242.823 77.21 li
240.963 74.5098 li
238.623 74.0298 li
237.543 72.3501 li
233.763 79.5498 li
231.603 76.9102 li
229.863 77.27 li
229.203 78.71 li
225.963 78.1699 li
224.043 78.77 li
244.263 40.73 mo
240.963 45.4697 li
239.703 45.29 li
239.522 45.9502 li
238.923 45.23 li
233.583 47.5698 li
232.743 50.5098 li
228.482 50.1499 li
228.783 52.4302 li
227.522 55.8501 li
228.303 58.3701 li
225.543 63.6499 li
225.063 66.71 li
223.083 69.77 li
224.043 78.77 li
223.083 81.8301 li
223.503 83.0298 li
220.263 91.0698 li
220.083 94.4302 li
215.703 94.8501 li
212.223 101.15 li
209.763 103.25 li
209.763 105.95 li
208.443 108.95 li
208.563 112.85 li
207.483 114.17 li
206.583 114.65 li
204.843 112.61 li
201.783 115.97 li
202.383 119.15 li
201.543 121.43 li
100.383 25.1299 mo
100.383 64.1899 li
96.603 63.5898 li
94.083 64.3701 li
91.7427 64.0698 li
89.8828 65.6299 li
90.543 67.6699 li
89.9429 70.1299 li
87.3027 72.71 li
87.603 74.3901 li
84.4829 75.8301 li
85.083 78.6499 li
86.1626 79.0698 li
86.1626 80.1499 li
82.9829 81.77 li
81.543 83.6299 li
83.583 87.8901 li
80.1626 90.9502 li
79.0229 93.4697 li
80.2227 95.0298 li
82.083 94.9102 li
82.9229 94.0098 li
85.3228 95.27 li
84.4829 96.8301 li
85.623 99.71 li
85.3828 101.15 li
87.0029 100.79 li
86.2227 105.29 li
88.5029 107.51 li
89.8828 107.33 li
90.2427 108.65 li
89.4028 112.25 li
85.2627 111.47 li
77.9429 115.07 li
77.8828 118.55 li
76.0229 119.39 li
74.7026 121.43 li
100.443 20.3301 mo
100.443 25.1299 li
91.7427 20.3301 li
89.3428 112.31 mo
90.6626 114.53 li
93.543 116.87 li
96.3628 121.43 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/COQVUO+Helvetica*1 uf/COQVUO+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Marco Pagani) ()%%Title: (ssa_area_sources.eps)%%CreationDate: 1/07/12 8:38 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6LL)IRZS6]4J9MP>"\BBK7^AD&>R$@K+s:<ds#s5.]/n/X:F>k=F70##r[ek^VaGTLjm!0U$N3Q"e`ja`qZ"YhA^X4SFXa:8%QVuM<0+ce)>dR#`(,78?.]?JoVT;Z$[Oq0APOE[5HoC=MgS7WNhsCqE\Y\<#p"n,:r>e&#0AX+Lh>VmU'tX)#(\^Ouh]&>fqsEf9%m;]%,k8mo(#(pfkh(gq2f9.eP::FNn&&7Gj-!?*sn>35!'IKAglX]SBBFf/WC+9["X"S]af-<*c1b&3hHsQ%q]9?:m$r*_WWdUY_%,C#<!_1,h#a()Ju1pW&e<BRu[jHkY9V>gcB0A>lcd<Jb8GP]"N&05fD++2[q?g)V=rL]7<V0#`]c`Z!ZK5Q+m`_][3e<67pZ/;nl%=r`!kUghFl3OP*q,gd]JJ2TOA!T*gRe,HNjJo\3H)tuiEA?BL8-@o'D354bW2d3Y[84XBh8Y00\]'\I!Y61H:o?*4tO8H&&Q[XYG%YB9+!F;:_Vr?l;u<?Jra`s>]Ah$L/)Ta;Y=D8T6LhtE-s&-b*7[!PmQ)a*.o2Of_<&d\^b(&B/MW(U#>PtIm>A2T40RS9Kqj,ju<%QRZ\_OP*Db$M4WfZD#X2#L:]iSIRaMSR.=O2#U;mG$=a.VNmtdq17-1bAdKellVWP>5rj&ma4HG*%N)rrCBiQplZ&)omtJm=779i%AX+QEaXh#M<!imiHDUJJNo!QEdF$Wcs(A>#mhekq6N=#7r(NsFB/U,^Mad?AWkr[SKr:pX:K<ZBX]44qnl@4DXUsPkn.T!%;U?nY%W`3)mfdsMPAt_pW$WmPHTiEuYXl(l-$*B(RBN6V#S&HR6.2JUOV#jFCPuJ+IY#O>)V*a#^1FD]>o-#?AVsl$[Y,]29r.J+T-MRnL%?qkI6j;G$)IR4uU&c@<)1J!UO@865)5/E-7-hKgb7!aS&_,"/lr.],u9e[oF-5dn/_7JPP[&I$_417@-ErohQ704e18_t^C-aP1A%-Z^N-_p$dTYnlCbBEd^ST?n8)6*b7rN9hDZL/tNB[_i4tjBYk0r.IkM3jSeTPKY#\JY19red"F]/eT]YE$aP^L^XMrjpZalSrrg\%W'`':2[1)(E\`!/3LL[$Qh8MqMmQml5oWoH_b=/Q]M2F$T#1?^-aY)m%I55m+n*9DBEP=,"W1jXZU5j*7Ng@.E1#Sk_`!lB_%_J/%ls-bX-#b6<,>]cJ'"Gd%foE;EOh!h02EL)n]MG,_s2`F+aX#M4p7/pQoMEC(&cC0T4*ej_@&I!h=U\%dmM"r!Gd$-L]WL3*46cSo%1FVSd!&J)GKXZ);Ydq(8Z>iINj@rdCn:0qs:dpfOV^UV_rgWfjC^g<lJ!9n[JRjpkU]2\@V:4M3rgWhPacOi:$l_8qs3'TI'E'lc%Y>?@6p#"gp?_C@BhrqhsJ)rH]XT'XI8_SZIT#9F$:U71b1]'RhU\-'m@Nnr(8VKb_WME0Y-!rs1&3SoioI3-kO_:'brs\EHGacXE%eT=C[)n"5RA"R;]EB]">Q_>_l.r!2AB@TL9USR-%oLqio1\<U)7/BEe(SMlG/h?k&Yd_!Snb;fqYpGrJT!bBoX?OPGodB7DYpKBV%Ho$][c]GD+/[Jms<^!2Q8H9QW3PZi&&:^TNn3?bT[XLu#_qY#,lsD*%6lV=B_uH,-qqfsXPHYuFr[4HcBU6aIcsK3_Y4+=f-'>Ch%d1Z4G8q=#4[ZVtUU%sr3/c9c)n$I\?aWQipR#Ec?4Ec8t)uZC^hmdO&!dL<tpB^cYk)mXSaMKBW5*C1JpE[P2+$j@\PsBC=>Ksu#%+LAj[.cXk)Ra>3So7m7sNg!a]]u"E>CX?FBN`9QHaB@($SV&K[?67>lbqVNSTF>`p372('3kVTXX7o6+L,ic-'jq90.d7DWS)d?V%_5*=6k";V*@CC9eb'5:s"J-GL@%LN09%YjR*]LD4^B-0;^/%iS5SN!@Dkm8'AdNYElQkNM>p(@mo\G//0tkI\k=8u@b]Xj5OO\Q<%boK#%Yd\%"cqFdWI9c5_/4s+so[GR^CY5@k%"Ttr6,%rMX?IP;7J7X#$U4Z,A>dk#]h)5%i&ZU61p>!L)de,S#&D/ATM.hM&59uT%J6d![@/]Fc&8\&RCN.bl=JsIOG'XHg!(npp`UbYJ"60Aa(SOU..f(fTG>CF6=b^]+EWe&%N&!*^kktV-i;@#2VUtt9aQ)ruSMO(u%D6G@[aKUfrfG"Dg@L+nbjRab)gADV;nr`acb359,"Qn]Y0U9hf*TQWNX'mKL@kp^HS3_p;"5P3m*BomGoji2-QS\J?d#u;1"?UDS%*[Jil3]?f#-.J3g8=2lAk=6VNm'h7OJ?p*iP&,?hOq@UZO*K9>0EU`?ns=?WaD!pbV6t6j3l[<N!9ULaABlkajTu6b53XR4BO$tm%[k:hITB2k&QRnD6b)D\K.EqI/@3k4['f='<&h+!S6[DAg=k6*^j!OD^LX0^mN2gq-JnoXXK(4X7Y'5;l9,nbt=-M"VQq6f\`flTU%s/*C\iZfg,iP!Y&6Ug%OgA'H,1AZjHP"-CNV+X@Hg(LoaG"XnUAA@f._B[-,+(V!g4A:Z/1&';nLolH6;k(HqnLCEFada5jZM:Pd%NfOGJ$Ja<+nn/29C5MT)Id?P*_()!gZ6"/@'5h3';CWH3V6iGVpNX_.>d$`j5>bH*E7MIJQD=1W1/j9Cop%ld,$a@M5[7-X/))XN%@ScR%"&:W0L/(+`gBl:m_fm0=4LN/6UimXW^TbqXNPP%EmiA"a0]ml&g^+dm/Q:_`_3s<//&MgJ#OK+?=;^0]g^"qIG=[pMa=K_/%7JI_/1C.WX10[s\dJ@:Xi:[D)A'1Te?`b?&1;@a0*`8?\_b3/":CKBm688=4@(Ebb:9[J6-q-[H-RDL\5l4-K:Gb9)#r3FJ`sel7%:kjQ>!uQDBCafot$eRo<Nlk^t>XV%*\e7#s]Ze664!P1KEJ9o%JnoV<1m'HD8GXA>%?&,p$9*$V8]=4$*D`ZSLC#%9Gq[,sN=+rd%1%$7E^uD>)B9nRVE>7fYdBe^CT%%s(@fjP`IHUC]'$`5OF5\C.IYbqboMX%jkaB8u&!DT'?Ga4bL;BCVJBBO"rF3Naa[9;hk0PEG%DpnIC)=7[@#GDWrlq_a/9EEcSY][p2-i*@NjE<rkV_k\Gq(+\:G[=ODY#2et<`hAZC)1HIr^LC%n\DfOH4"/A06=c_bB+pt8O2,V%r7n[YKLXS#'<A7ii@Jbh7dNP^/ea]ZPq&_e8@T8ZR#tp[P*lWDTQ*k3[hTt:T'H`[NHceo@\WAn/3dQZ:s#)@YOT^_;&E0_kq]Q,%d_#Nh1_o%:Om3WP`f"9?1";'@>@BUebGEiP=#R52m5I*?(se%$?'81pq(f3#'amTuS2%ep7dh25#H?L$^E'jG^`7>U4>)1Aj'YjH%_tk7uE@I\>A6alPG5H-so5uNJjAa8`0Rgj@PJ+)+m2_br//b!LZp[us:ed,;,h)dg;D+/K<'oF1^QPbY1TmHVDfk4bA"r.W2Gsc$%$CY4rfnB\Hdc:YULG0O?@rp)&mClg)B&#Y9S@)KR$<%!%Y>]lso4tcU_(K.JhjJuc<7/M;"e-7C#G$bt/5VbRK]&Q,;%\Vpn$s/l%&@_ejU[Y61*(QV1keR%D&?\]1U:3-GLf,X&DW!nrQplR0rY(5G$$29nXtU?I8<R+PadD@Bm-SVoi$@.3;[f8+0HOY>,K%)b<eI#:%oP]^ZABC@/m)S=F'?2^fP:[g&22AgM(L>/e\X1I8g.Vc0#KtS4fOC'kGj2?I/4J910PVrU%og,mIgcfJ*q8k\pYWh*Y3;/q9bQ#g%;g`2@(giG/*LDT$7u(8'4$?Re^G.\*W!_&e"C6gm%^e5N]H@te_J-elXM[Z.INY>1OYiVO#i,`\lRod8TZLKh5*(,:<3P78R91tr%,iT8;/?oFQGa'.HR']/P6"O$?a2G>G%%/Z7'=#OqXHul-*_<UK]`jp:YK9ffUG:Ghq?:tX:-Vkq,+Qp,RD/0\8<ZV%We+g=P%G(5%1`kJ%Y$:mmr=7RL94X=spPEN+?d\91U-@^c_CB@dLg>O%*n9Aqk)eQl>Go^i%j_u)2G=$si_u2^&/8Pdpd`Vs"ZB6RS_>H:Rh'->%,+9e?NM;Y.fC8@"9pnS?^sTBaX=t)*1K,YPED\,q3,bcK>>^ANLDH9cQFQJ>M$gX6U,`qsYaSGS+W@Ot2'DIe#/@6W[@f9gM:0QM%UMc$NCO9a4`s<a?dj?stCfSjCErrJ$AoVIh&SPZB04<]%F<5$\CjU,a/?pX4blLP'WM&3kP4G`67PQm7!/:jRLJV7)][BKJYbXZY%C5"@`9NGIG-6_t9Yg+PNgl0PrQ"2=MC#"I5+2cgWfRb9/f<%J"2Go=&4:R2t[V-Y@g>LV".[=IoS:-sViY+WBPI3m!hS=2Oe>Sa`%<hVEI>t3?&`D.93KV7(dR,*>0LZ47%21dc+Dk*u4;^O;J3(cR8B4m.=Lt^H9P\qjjfT:mnbl'-'(mtX#LK`+JS^M)*7*)H*N17&\%2%;Ld3$7,#PStn$DJHqSeKRX]VZl`b,5IF*T.Oo[`9+mP>`=DYdS`Pu?Ru'-f5XOSnqaSPKuYnP7s5BAFC-/TJ<s`IlnmeY;6*iO%EIVu"*0nSVWK-L2ZEF7R7VQua[`/PNe<A2INh]Npga%SMfusU'*A1Q)IKB?_PAqK<31luhT2q>/.ZL9mJk3@)4WnhuA+nU/;_'a6%Lb=3+0V/7/d0Z=t5Wou&$d49:__tYFH)ee6o:WQ>Zc)I.a,oh,k%#.,_ipH.-7;[)Ufk'aPf^.97Ys.KM&u%P@#cs)S(BA@`FN/3%Y@STKP',`uP17K?EL"bi6)nO!:Mgf7?]];DG$6c5A4:0.I]i&j6piuN`DIk4*D9Bh3^i=:)MGEmq"Y9W''QgA3&YtIo->*,I:d_8%[/TVYS;W-][Il(@9er/4Olts;O]-BNBYQPK:>nJ-0klkf(q+,38r;1q`VJQu^D`rT"\)GD.Aa:8/io88(Uql6GY+KH@%R(TRB\_(%-LVeak\6#XBV&tb[N:u7g.9G(a'_Z$$P6$gT:s?`ot@0P3K6,aoU"OMPJg.iTop=;RA;bD[Abi3/['NQ[(R26^)$H/oNN?V(lotJ%d+sSXn$,W;N=r[N$8WU<q`8F2+d;?9?BT4t>:\thraRhnCAE)%nejT"=q53$d,H(EPc.MkSfZTWc6P_&?_QL6\9P7mBm.J.mXo)5%.2g-BH+BB8@7uU&J2c9_f[2$0@R9&.72Ag0GbT1qSU^7CDlHHBXZ<b>17@;j/QR,p.;cgT])55Rs%[[7`1J(?R3C^CM[%!RW3A9^%8pV10VEgS'ep`)t<S#HuPt#=8X,-*)Xm9+r:3G-nficoM`$bj\>E&Cl\,1F`Xi$l'=^6Wr[V,H==cP8'2J'>SFNoCqT[7oscAk<Q%/8254+n@6q-^gD%C!qE`9%6V<2>O5IUku_g)J`6)Him+*kAAF7%X-M4k<35baEt440tS%X$C8&QZ[uU\/4@9n\qZk"1$]f,;\s,c%L(6FP>V^R]B`trHhh#8d0E#tk.XgKfkUT@\11H.t+2VMkGdsl'(?T[-.>f1A7VjG[[D;c;&,9`+ce:-fi^PuJ@=4Mi\9Q,d8\Fc,%,Q@E%Z`p;g@'u*(*Qi#nms,,lT!bCtr*H0_oR,]hR?gXT(L1rfIfD@%3Hta3[%Hd`j<B:Ps(:d^Li5(?:q7QUTdHBWl$d17=lGlP%R)Oa"IgjKKi/<`+Gk5c\#u.=sRa/u*%@T\_Bar;O`p4-Z-^s`f4_%OHQJfI.Eg&J`WTG"uE70]BOm);A_nBc(9g!V\A^\WK@gt-T%d5dnOVR%[g-G=.,>(pmUo3NuU[.uGAkEJAIUH*5G3gd(GCHi5+262Uja]Wf@Bl8ff4uOE%[)6r><aD&TH+P9.M%gh$E@,<a_qccH%eK3&-BHm;28X`f!(W\$Lfhu/HDAGprW?]k$1-"HT=A2gR1sNV$M[Oi\>DER2@q.EEVN"ttRAYM_H1%Sk'%,s;_.&naIBh;V5WuXK%@uGQ2aIi]#WJ[;;QaVhPB"qWIH^EXf))KH@OS(tO:QDJeXF(fT@uJf#*Kt.^5s^F1`KnU0nRZ%L`(M;9LWFgOBeC9c4]o^g\8Fr#%Dt2/JSIO(">&mRk_t(`J2A41LKARF1H_GbEj)8Bsp<qCS2q>[2N_P!Z\P;jc21NY>f_5?4<5;/eeo)L31:bg%&*FB8cX'MYG\StB%_"mY*@%*-XdQT,<ZdH,"Z#<7X,f_Y!/8q)tb`PR]glg>V5`:?ZoK?3(6>WjLf"pOql^sRCS4,@"ftk7*;<+Rem39HLF4tgQr[eHr%M/^'l\^uFK@`Voqr\n*N1L_0AS.5AOr]>D&rJdFS[`=S_n'S%Fj$/b,\39-LhRi0OCb#EJXT-b(HYDF7<i8)K:IamP&3Z$iS*a7S%gTAN>p#]f?Nh;7lh,ZUdb*r.cf@h0dd\MnMMq=Gh@<;#<entF7?J!qnpZo?\-L8=(ht4nBjOH0_C0Q%m6b;`J2BAqp7r-Skh>?2[%d^Ds*p:7V[X_j\(AO;h\8CNFPe/+`jD-Q]-p\$;t65+1Ej%T[Fph8G(G$u,\Fq\aLMDlm<DL3?Fe;"$T_+,KYnQkUk)I3KB+hm[W%p"#!Zqh'BRSbJ1bHp"L>g2QX^SBO8<0%T?L>OAnE^)T?XFmGe5TD$g.3uNHjH5!t(qu(HF(]U'D^\4)LZ/>Lgl`H/XlL`g"pNM&8%S93]lCJ[OYe'WXlm1CnTec2gZ]`"I7\,MBe7+g%(f":,LmB*j8+)S0+)Xe?Hea;i)\D)HOl^nG.g>-XZ!%T-#lHOK7:GsFnOcB>i%a8:B3]b[&7]`!h>@73R-`gsCGUegn[s.4VklMT*3"OVas_>IX:lYT`O4'J3aqfo"5UhKA>T5]"gpfdtTR%ag(3Bf^goNQhgGd$d]%eu4Y`g'$pNe9(W9T8X>=pu6Q/7EaKDH%HoFD/s1hRMu"9`hR<DCK)O<:._3ZY!9A_;psZo[(,81\L*A@YZ%;o-dKD"2WD@**!3hb%gS@ucM%9_Ldc<gniZFB@H[RmLma`aqF:S2]p/en08+68Vb4mltjMB$iB_(!)/Y/PijK:73VTQSa+"i`"/\Pil\8aI=4i[/uj*CfJ%jk&#bkm5[#f$2XnE72JsGL6%Hasi`"i?^Ld`XsWQ5EgC0I7V==]f1$I`rC&a%$lqn+Ss`n_hQ#5T:D&&S=t!fmaSkNcJ)PCXlC@-%knY?LqlNF';1T5BE=DIJFe?dq:VYZQod-6#9ubSSLGQ7^B@HDI!57kD3f@f$?>=])od*%%:dd_Wm(_;gp\'c5OJ$S0U$g+c^Yb$"%pE`R`$S,!c&AB9KStZ+5S&]n("*fuS3U9GeU[#'J):WtNI:"\cl8RE&4E)CtqpK3='+qOs;NQ@$s)g?dN8(U`B+T+MW7%dYgIpTN%H5V3C^YRd"[GUhuDuFhLD7TC:]A"EHh.ki?A$^8]*tI)<53pdHp#-P_?L.EcK/h^j*Pk;8>Q;u9VtKT#;PB#Id7ESeHkcH&hmrK*%fn?EdL.d6ZAG!-KeaI^iDT,+Ln+:Dn/[YPM0ub)[Tm,38!&BU')]2)f&'+_17R=0D7mIUb-hgrK,F45KOA=8>!/p$o8EAG\LkR9T%BCr=d'DK`h:s*CZIJGOZJA.S#")&f4gd6gQM2jdSrq?E\(L=WMW"7UlcgaL/\%L3O9ENo18RF=>9G=bn$!_j<rYJFY?i7-`U`0/>%.>J\jlQ^Ae:[6j)V2-dRg%e)?Qp$_#:4;K#aY+aJmS[6"q\OZ?5_"0UYPr;dZ#mYNp`qH!d'n38\D81bpOr*RqN_]7Im^t&7UA^0%IrfSjD[rrLc+t'CF7A8J*'EmQ#>bBE_)$R^nEaL%4=0sN_>bj99DqQlQhm0c0(h.P>j?6*\CBE3E2gTDiDP/h_PR5YKhMG?$CCa]%'JB>C.9u^f;RlAVUi>S58`A*IPJX0r-A>+m9a[6dRhRLH2^r"oDc4*hhkY4Z^I7$%dC8d?GPpN1GR4n1ThX[ro42C$a^D_P\_#93%-Ea54Z[0)D*k1Ybc5JmYC+(d4Oj?uOjfI]..qjR>^8<XO*22eFYaO'm)pDbWOsT[TR(K#\s+c&_3\l(sdlEsL/(6g)].\0t)=8bu%l<oZPIJ>JkI!9s[dVlNF+)W\7s7>(6TuYRWGWb=L-KFeJKTH<obn#U&s"dq3TRX+Eo:scO%GO%o7TkW#&7i/Gn72ALfEL5JE32'F%q56CrD5-WA3<lsWf^te^GJ`(NpEQ/N4`n,'1HL_^nEGEOF:dPKHN6aKhu%5u]Kh4ZN;VLS2*/8FPjDgq#WXNlitK'2p\"'Y(UX-^%6:,jKKW"KelA]]9$f\edl<ca=c,jYSs8K-qrkF;Ijo4e_3,%RtQ%';TF/(dP/\pu)&bCm?^O@f^>lFt&jo5^dFS,96s+@lP?Tn[h%DQ!<FSJJ-!A1XdW1/%.qG.h\+erM`-9mPE$f(/9miImXHeLOqVoj=9@pqt:\BZ%TsW_D,`4ob%o$NKf\=H-1E`Vf%51&q7?`?6p6%kk?*`dHHXRW,pI;)j>l=?<1WdkC3Kh`rtk:58cB6\8(A;BDdQKrTu%]\&\.WP(Vnf7s<1'XL+qb_$bF+NSth5*Q1:Rh/3r]lJ:ZP%MiY(<"5@H)5l/$h_8kSZX#'QXdYl.tna!d<Bqd&]C$'3:]VO4TE4#KTXiT3;/tEI+U\8q(fAfcNUme++b1Eplp#3F.Y7Fi19rMp@%,VM%Mfo`$9VOaPBXj?uW$k^r]j7[uBk*GQN"4'jM9tNT,UFt;'96G(KeO(64l?_]c6nDg>8nnoh\K84M+%mDmLa_`i2`?n?THS5!%Q%Y=*?_4P+ENid(%[hpP9#<\c-fY5rW:N[sY35>ZhAZph#[Nr"U)A&V9;Bd^[lr#'h[nDQitgh3<a2(Flj$"IiBQ_+/$uo]j]6#!%DfiR]n\<f?d4W[GG?"%E:[7E9V6g/Om@]T.U`!9<K2.@,J:<+t2Deg_GCB*ppo<3<N"#;!%JgbLeJ-c86+tgs%W&kfPb3p3g4l$c%41d>J%hNK:3o?-=?/J'?J-&*scDPId?4g47krM%FfCK7\s0PK/-cg,TdZPRpeLm16p.%0EYWl'lp1FZG7R-,_M_8'M%u-`U9rT"1%RkEI)@_MM3I<;Fh,cr;ME8ZKgDUEsfbqVPU7_N$p2&VC:'/;<UNbj1+CR%K#bJq&+%n?nqkc#HSpb;s]n,!'kLBFaq)n4LT$B<'C%r`@jNEO4C;TWJ7&q`d`8Q."8!.C@";rijpjR1XTkIaT;GO81ptT`:\ACNiL?F]naBI6?bS4)!h?72#3&ZV/!G^@J*q%o9Vu_U5"d%]RXJnaq@$^#K"f>#.H/c9SsN2(HbB94MX\5_27%\"=WaF+HU9b\dG_A!#GoA-T'RC)[1O[?93\OK_So!$.BsU9C<paQc`s-?=?);%gB5:Ip69%A-'*%.X@P,P@#=1rc.s0gJsa44%V$;C(AqkNOWprda)OMn\g5g!!$bf*hek:=``f0.N5KLYhLj,0_eZWm/n90PB@-KE%O1RR$P8^ejG>>6?g)I>pht%9^K41kQNS%MF;P^t5*;:md9W$:a/VgnT+=#"RD2G]2?s(8e6JMP*^V,W\7[_fVm).2o"Ok\G"2T*/%H10;._N(lEhV&1aG+<ls%Jt(7DVIOjqP_dZJ(FqN9hChJiE03iDK^f?B"s,BmhfRALT*U5ND):Bp#_T.gL2V`+2T2']*s`=^*,Q0%d3&@s-k[D%@?+_2:/%FW)0Y=ufS@Ljs4GY7nG`A$6g>0piOtd(quSlDqJLV)#Ar/(1Y27aVBdau*h&fJ%>:*).bRRFJ.>,JpXXP&%2WUCs/krU$f;K3M%`$$m)^$o1e&9W=%uiFZiLqhn,WrHra[F:[3@*aI`*%G#XNfHd>Ai"5>4])/,4XY2-_iS_b-8,<E/NP!j&i?D%(r#Zi:5=6OMLcI"KR?TdZl$an`<9VULRN7RhUM*\K@nOAO>(mfCAI:OFJ3lBEp;;f'q"W:6sd=jES)1i`"R(2IW.(i@#meN,<*AI%9X\kgs6E'+onNG8#Ep6O!RES`Te_WQK8`&ecun\1[WL8A+DJ#C7RGIoi8s@jfq6X>5Dk@%"S:VTP818gD*Wj?oGe\qE*'Lt6Q7MZ%:em+[-A0+\Fn1kj.!D_;LI)Q/I#)[KQ5]cUQ%hgG*P0U/oY)qc3J\FP+gr%8g&eZ;K+Jr06]!1^!?>F5RjG8hpYVPK%c?([-#,f8%Ub(3-)E$j:2XAPoSHI=eN<\5$^CJ>EgGF7%-]k&\j%brM]NN_0&VPeI[)"TMNAh=b+0_1h+hPUW=LK)A)JiER27`+_s'_q9jXD)k%i=?VE8"/7L^XmU\N%G,s@VO0!9ihNW;.ih9hKWE@+8$CS<T$,B#DAu>'K'_R$6iq3(h)b:5*@?83CeSGF:aCMK9=("EJ)i\;*/t]%_<?%)"&)h@Ut>6,&9-r]YK(I1S!lVV/1PqrE!b%Rfkd'3h]<^>*)'AbW*sBpOR-.VBcPnsGIQ^k=?SuL7O7W^!AS[JWp=VWT[i8,%1I*urc[f^r1Un!+3,6A'L>IZeMfpcbPb,S)Xj(`E@'HRcZ^HUP#Q4j;>]V=/D(4-F_i@?t7Nd,c2U*2:`s[e+Y0[O_I"g2*1LD-9%kJ)RBcX.H'[7mmU#.Qq%iLT%F3kTggLeI:-EB(W.0im6d-*_Ta;mckng0aWkVRh+3/sP4ueZ\q:MsYiT9tK60Sgr^dMq!MHppdTo%Nu['5qZ?b91NqoA.$^Mk]XR!hinO2N4B0a9%%Sb8b30[:V"Br)4al-`$Q1gcH:WHKCdh\]rUd3A[IgBFr_'j_*:D='eaC[pU[WSW%T$Kq'Q*;o<^+Ctp`V8s7L\^nuDR"5iS%.42O1.UBm=T=ks7NIl%=1VnMH;*X<\omih%,E^eNa'2l1<GJAZM?rA8=@I%>W*)mLMMb%%q%!>T,iEc-,of0bM=+e1_Z/POcRg=J$a0eJ>EGFV'R<%n5hp4aT'BBAaEt%=$I-%)Yp#V9?R+VEX=u""nY9hpaB'@G$"C0dDp!'%C9?<YpmGuZDMEYPR6rEp\0N;?h.E[<4*C!S(dtRL4`95_6b^A*WOT2L;i`\tn4qNKVJcSY1ss(Jm+DjE4FDJN\?m,qq_e2U0p(mt%^49YEiH+;Cb\kf+Q#7iG?p3_>s)GDdF+7dZW%TjIS8YV"jGK!'<bi._2A9:QK;M[MDB;Q9eq5=;+/DLPFc$DmkJa[VjiV4J[ARo6%=Uci\hO=>MK<?Y[qm+bFBOB,j/ZDnohHL)lnoLoIY8RH6@\RcDn'h,WNXgBD^2DS%Fa+T"^k;Ib#ULF$EE=6;:Sf!=i/i4c'2OI)%loJlEk[=G+C/A7;&">VB2HTCP(5"N#cPcQ(HI.lH`l_(lEbmVsBOt#=i'DpSRF\saX7YHXlTl2Xqs\4lqS[F$j[q[M2(0Asm-<PT%_$7]SPs@*ggpJ$lr^EjZYHFr3XfcQF*OS,7I?qJp<R3H[G.Y?#(A5_hY0,ij?PVPH/;H^\H]\mK\tKXl7No\;^O3AoRN<:N4fY&8%d6[5r6,Q=Da]RoGHI0St5s"j+:SUe*@HjGmj[nUu^6u5GoX*B0[iP)pp+qLA#),pqY`E5Wo&s^q4m8U9HrR*3qCMrcWc`'bK3fUs%Y$NidZs)d*8\1%UZdsaM79?Wq0,pCHKAJ_/Nsp[#;<Y5C_=l'fDU;nX2S*+s)71Bth9-4bQ@h@hY+F%?Zs2kZo$pURB$`akl)FY#%[N>)%](;0pS4*!8I0"6<kNBGngHk`(h;Gp$TZ>Jrq5@geB]WFk"d\Vsk;B<J%YlFZ'fp"q%2fXM34i$gae8=gEE2'V\`#q.8hao]%%uSrT%=>Z,r-9pPm@chTLIP%&leb4rTO6@]_k;Ria5o6BW)C-lCEe&6J1H^W*igu2e4^3FU5[P8a2VC:QTntjd+r(i+q0q<=DrmB%9i>&6`C&Qm4=P*%[kfCm0PK6(BI^7!ID<OX#!MGp#5'L#dgnKQmQ>)`WA!boh_'D@@<\o9N^Njl*r#KXa6\dXAt6(_rq7kQ?Gkpi%ABh<d^'BlIS":uokg8ZAgX^9j6:6D7`uUYI8@g3fSX.ArN@jH1k$_ITg/Aaage?WJG,:slh1XV5]QDXa9\DQt15p>A^WkCo02&4f%g4eA3([87#27@f,(m-Fh<r<Y@(=-L=e_Y;mmd6flmJi#G5=O#uE8j[BVcGX"?b3fADj0A(K9edNg<FtdfC%mcFM"!dgH@\cUYM`h%7D%_qd_e]RamSDkoQ9i3@Is+e>'g$mM_KsTT4b"`lV5ptm60\[ooc_.qD+:F)i%#&;]T??TU^F1Nc!WjXN6+'kDJ*E9DS()q7u-,%Z]E[XntgGET!q&WrTE..p!_uCmqQoZr*]J&)4gTT6O+tQ@RuglmYfE_rn.5,%Xr;iIEK(chb"l9>!G`7re.bFpN+5N*Fb_?nCHar%"o#YHh7-"7eCAV6d<5`1elB6,+.Wu.[Bi"%E2m(::V1#8RXm<0.gM.[\IL*#qS)Su\\BUWPdb,c4/l+/`1"YS+at7t04#.PMm%[a%bXNo=E?hZclW>/Rb0K[QqoJC-pi31?Nc`@S$!)6]EIHTi<:?)sB=eaB-ZHVTPb$Tt5cfaab51g7PUS\l`uMA8#0##8nm`oKjmVNr%RNFA+IqM"0EhsM[*E9%D(!Zusc`\&i`i#Bf]%s$_%YIfW=`2U;g=clTPY0uR;(auZeuBVgS@JGUg15h:])m5DKD_C!b>iu;iT+"!%$%-)!Q2hc+c"9eJ9d8EPO7f0&qa[\Q0hoXfr`6,O8calm#MVO1GA,Y=g;\b[Hs]u+ipl2Up4IrZ@LHM(7pZUV_Ps?KSssnG,o<8m%j1d"6k<-3-eD&rgDq?c7kK$S_M9m,S8#V,^PS25GT^d"l[k^7<qYF]a@Xn?NJE9!^>Sq#E'>GnbY2tK5j,mF9WI8G&b*K6i*cuD<%RGE&3f(q'`OQA.iGgZ`4+!^phquaD!Q5?2_1DcKSM<N"qgk^r6YY3)Ep%f)F>RSn#ofGq*2V@4ij2[<fIMu4sj_>H`;0L+K8*%0U%TL37=7ZR-V+:Ke.!7X\uBZc&(8%TIc*sa$6V4'Ro@T,$W8o%t-'UqfW6@MaU&pqk`SJMh-$#Y>PE<i/s+*;p5-b!@<RGW:<^4<Z9%$g/N5.Jqb7s'@#kCje\n,4!]hIYq+Y-JJODoDWT]Fo8%?bRIYaSOGX`]?^krLNfcmKBY*`a"+_:N*4Su]R2pgj:-&e+K;k(;aOg]%8f:%OKg:%<Jms-Al+)i`KE8I1gQ3Jp`GB^m%*PSi?"d.P85En.A#2'LmNZ5ZWAMj)drtYA_@@Mj/RVZZF5s_SgNKKX-pAD>gQ`;1%Am?85@^*B+M?csNmBbI!c60JOY_I/jm+Z8TKT#(S^ID78:"u;`;LA%Y48jb!9LcN:nd*bac`;h:#$G6aVGc1L(6)Bj#FH<S/hOKO%f5Z[.*$u?t`j2qjBWB@rY..DcD&;cYFRC'icW')QmaP7P!*,e,hg-q_-L44R4-!uR.;4>Lonr;s.3.&ZVni&kjG=K'I$2nR6n0U,%(+BCNPk]NXD>AXo,/"_$O#DnY4h$TkCpsOa8E,D,XbAA&apahTX]Nr'<cppZLH@031bti?^JuLY26nO8]:b"-g##h1Y-5"scR:r5%BE'LJG6?E>,NrQ.9&Uq?@)je*q03M9^9T8t;pr,bs6p1sGOTCu;6X0mY^_<Q=5?8*cf_W7Q.kntCI;17$o<$=TC!T$o-3A:WAB[1%bdL(3M*koolT]S$Js_6k2`nt7El!Nb6-MUAVHY=RC[$#0n]m1]EE*?ic_Gc]@lBhNI?=;APX1KuCX&OH_)o!l/7/3q!S^LQ5R[El%?I5\,#9V+I1lASM0FNVq]"303A:TXdom)59'P\]p)dZE/d!:In2C$kV`JQ("kJ_$_i^>nE/c%l^=q">LT`Uf4U)54d/R,g%`9#Vj%28e41-Gp[&e9GV:i-0(-+a.Sb->nc+oSk8aqK.?JRa5UU;1X&HqZ&ND%HV<Ro@qGB<oh0dJ:,r'`""8$HC<9-AKCogW$Q1b>8RD9%X;M:o]=r3q^2\DR/&`k5`I:]cZ@Wb@>"eFjQ=+DXD\PAcMa49Qj+5^e,Wiuc7OPA_iU+t;2!ce^,J,LX2<>FZ;0r:B8/e,gL^V!2%O*Jlr^qUEL!@PMJUij:QQdjR@o!0&>M5)Z]qnPMDo4F.s]Q.(#L&s:AM7Z=p/PTP1/<)ag*mGtf#O:a%eaZW$%5E/?:F5l_c"m&6%5bm-,o`]?I5M^pM4OqjIA&H9/jb&C\d:]]\!*GD%[QYobYd)e"38/.m9O9I+)@XJ>4g)?%YsFUTGHV*$`^JTFB]:Y]o\a\+S!bp[%js(*NkMnuDL;o!<2TSH^dk\eVTu[LP4"n4tgECc;46$(od(oR(099a]1_Rq/,2[HE&4j#@R#Z,50eWPee@?U_iLL-+#"E53(<#Ea%!F;/%KoX7<>ksIaQK9BgFYrg73p2AhIhg@T5tc:n<%9H=jL`S=pa<(ShmV<8Z]9@>=$^JZp/W\ZX.<jR3h--<)))d8NU2KK45qaV%=t&S8j*`!FfpMNp'X7g*'V;oYkTs]mM_?bY5LJ_3ru0c.ngmmUYo,VZS&I`<l5:0ZcFYUn@p"D>!Hk6D)a3K+l54hT2_ZliViRC0%cUN]j!%LH6PahHi-lV2VU@>mW<0q.:5gdr&\c.O%c!V^*]3YV/].nQ2<=A3E1IX[%H),+;<t>r/Ci5+7'P@!6c@,E&&T:I%]UsUn%oRlnkE;Bt1`sW>rT8etXbi!ierPYhfHK'8Hk_HVb%T-@/GblMln4[Nf'm@rsH.QK[;F[@2?<VFUkWBg(TJ#l-Q]5s.^_UoX7*UDo%\OpIX2pOgWfZ(Uffc+.phO2Ggq-Kc$fqTYA@D3iI\hq7a=TfGk2)2&O^)'+Em/*2C[(#GAkS]er+(p;]kID\Dpc'X`>WDVjZ\@)4%f+Hc>L+t=qkZE9/k\"f/*g$$F^^Ff'pculgb*n#SZ/p_=Z`3&5)]L>M2SXY>-8-___8Y]_`s^j8W#m\0X8?]K&4)!HREeXLfolmD%aA[(GHX;Ld/F$nESq7nZ?C2*i9Y<%qN9TocI,#9-jDeuT3X,)A*^$8(db(]e(R/e"-%Jl0:@5`586M>7<ipS"p15DF)g>n@[d@P+%*?^Z:?6?PoA@.[^hDJ:P_L/8NXt;5,*l@.M;f]\[?blJ^)&SQ8\@[e?PVc>"KY'D#Q8.2W.;<[^CF4HOc0W@!&A:$ai@;js77Grt%BD/E\=aN8WDkOESOOt%PpWI@$L_sQUSRfRG/iHh[RE]/YN1>K<H&U[o$'(5G@k0lkM,b:-(E[TR9]a5+S`q2W]3.lnWnj0@9514[%.9EgUHd@tXS[5V=#+[EOQlN]A@g8Ki0f3MQST=uU\[uAN*'3\aHj6-1[bsh>FNtbGjR/'(F6K\0eMHEV`]%fGST>"+G'Cus3HUR>%C)M-Efn.]9coGac&J+@.3HWOaFSLlP"m"#jB@()dZ@EoU7P_&$kR8**90fdMg7)TNMcC1uI4!=eN)MK6HI8PD!k46fT(8]\',1(u%bSXL[=;%H;)rlGr9CLR1<3bNX5/,(#(pG_VS.&OY@]jBqnp!pkE_$E+'TXVLPF_])3cg4so";^6JM1E=_Wf\8N1.Ip-M?Ag->Gak%;s'jEjiV"(p*k'/-C7rbS2XXC>dgpY>!rk4,Z(&c.bs`k+I3pQGt,-Fe^CZklQ2nbZEuhH*pi1+J6T=K(^W3$@c@CYpZJn#6aE2>%_9;#X<)n++q7Sa-0XX<!E<ld-'bOM)"M-AOBBaErm[]1X=??tgD\++/9uU&[jG#F042#7&f/g>F:$T\DK[O@fBnb9*(8KW:%8sH:%,b,Yie![>s&1$(fBI9\[@*3lSJhSpEa/W-^i+u.k@+r?Yc+c$oL#qhf:L%Ae]uJ`*NUAs9jL$/N^tVYbD4:[g-+/i@^fR(9i(l!W%;Dde8cTMKhHQJf[,X4^=T>?+>$Sp)mFQgpp_.F%u\hSNT9g4JL3ciEPR1<^"hMW6oAf:&%gEP2D+=8"UaT[kpT[WePQ)lU\A"I5a%IJ9Pn%7<=Hd;J3;05'^ie:F%G(c*9(l'>UNp\V[+AP]c_gF7L0?-di.>mG._2n-;?YqqPJY!ujsCn!4iSLQS[%[fF(%Q]YfMOWpO%A\`9+9(Qk+YQ]b.9'S>Ufn%%4Ee+B?4=nS!2Jrf^&!hsiXOsGuqq.s<l%I07F\ZMVYg:gNRjb-gn(;8@3JeSOa^^sNWD:)9-*o^g%i3]p03#NrsAquS0H,kF:Y*LRkR;oB.,5OsWr@T<l]5a:&"ZAA\0aB[4AWa6W:5;D8B9<e',[+`ea6'uq+=1_6(7FUnh'+XrPa]1P%$a+f`aNto5414$T0btY.mscG'*C5@EQ3c1sNJk2f91,2d,,8cY*_b_)a?UZ4AU(F.,LnY9D\e7i_9NSeH/?tjglc^iD"IhmLrl6_%,iWEEH#P/=bEd/.?A.FXWM8&4-qs'a-%O+<U7q!]Vq:>'0N/j3%\4hWI/u"08$oYM4@+"@^Dtta*&_A7SPA="+^<;NYAUeA=^L-@%]K2C@'5r/=VA'Zd9O[Yq&P0(2^SK"oHEh;N'WQq%jLR'F%t3Vm$jK16X1p2B+3r9Z^T`*qC$m(44WdG'.VK]>Mp@*I,slbNHoUH%%^.%5&c(?TO--FTt+VT8&HoNi&R:X;g3Zh,+_seO`F8FZcq/H&:"=u;Mc=`OWB:/iU;a-^K(UJ2K<,_U@aK,UNkH\jK0p/Cb9B'BG%/Nq$?U<`*g3`AGEDr`Q7Gc[EVQ**8?6Fuo4iuoAi`P[W2&XDOIAjc/@(',G&^"Er!mn1utmf9dj-fFrg`a`-MZa4(&L?1WgB)l-3%<\:t&BHn:U&]LkT\D;7]d,ajA0.4g'/Mqb/>$mdp)D?CGD/`,c>f:Kp\0"Mecrk_7rQKa"D[_D?`k-,-5Ao05`nRk:_lRcM=3S21%2J$Tfeo#7k.l>4!_KV_H4e"cD`&AWB\0Nc<"7UJr)6(*'bXfEQ6q6I6T7pgOb0/1dA>GrK(6FZ9o>MJ1Ipk6na@JbuGe=7714)a&%.DZ%)\28?n+<s8qn0'WInhOIo0f5]C)<oe\ffItfiE5f;Z[HfL<&bQ0IO,_H(;$CK0eZZtT(L19;rPe<7!FZ]G5bH#hQ#KWdr`T/%32:oG>M'tUT+6OrHm?938%pnd85+@T]HE9'XqmW)68dula6<N-Zm^5S+@BdO&%6.I1<dH%P2Y)a$Wp&R,W6/c*2hP:JX"2l=WXGM%Y0"p4H5Z2JFq84#XeV+DkTY?Shs=c+SkoLe@PnV&_(YaX?93[9i@k1i_bJf+.:(a*,<*r8^48H=d^o!f>ieoRf,:qHqP/g!8L],_%Q)<n]]DoiGR9?&uA@J4K!Z4nW5)W&rP_HcVdJ@UM0:jX?]*0.S(LK(cgHpC[1@1;WcV`F_EER.J5uT:#>*M%bmb'&Bc(D?b'T-X@%K,Sg9oW0jK=,I!,E_$3mhn.eN2'fe"WG/D!=ZsL4gPpbi$J<$jZJ3!%4/c,(g3:]D$[fp3)Kpba*<rW<3NGHRH@5/d.lIB&Xn_pt%UonQT$2kI6Q.FMS$U!-C33Z7B!W3bW`LF4C]5QNnFJWj/%`uh=bN72i^P<kcPF!pd>o)"-&k(Eh7IN]t6?P;]kY=a8HcW<TJj!?8%`Z?=qn!bl.1T0pT$t^k+T*8jbZ*.ZFkBp:91$6W-;Q_l\]OgnYnRH_C.8s91Z^R%rVi&*/ah<k-="E(ZqXS+RUpG?-EIH]$aB;6Z%_?r5K&NT%IM07_2MN)jdT.r=\,!O[)cs>srE)V@rb[*NZqg"=\NY6h(9o?E+:02tkcI+e$2VjU@Ql36p/4B4f^,^\:flVCXnm\ri%XDELbH!+*)SX&+tIHI;/2P$*bhABrkIl<it/tLu#Ym"[e=`rgX$@8.W\u@^\9\FO=^=Pede(K(;(7@m0PtU9UgG=79SX$>52R[8\%Cc\V%3qmt9VTl!E&oQo]8dik?Zc]+#h)7KA2B=_&e'5mjbGMTY:(<NG"_?(bm@R3`C*D8P<k3>'22158VR,R1(Kbc;SJR+,T1rs`%9/f)RN7i;O6>XYX3h%+i"_Z;P3bYJhU27ArCc\g'P"Wi8j99,D=a<Xs8SMVdF:R$j!jh--4X1?ZVK:ZK$d>KSZ]-UrS'D?XXA7d7%ZK\Hd8;heAo.,@%O[0#Dou.]1+D+iRdMK.[gtF,>H-O#;X>snW@buERglreTMtuYg=lH::'t&aZCLp^C39a7KH/_Vp%p&u'%0`iu%cl06^>pcCBaYe3HR$(s%3HGedfqt"$mZoX63&t$3[@f2`P=j(b15iMG&t>,sRf/,%)UX+5,;P$WHa1fj!Zh^)H,s-0NgK6\[i!Fg%k0B^4S@R#&oLh!)\[/>Dl'=lLJD7DiL$iPXOD`NiXto%)VDL`03sU\<?Kc:8N!'VKeFPlqA[^I<gpuL[H#arL^9HV0AhWm`*A0%l%@W8iM&1+]j"m#4oHA]ZQnC&Sf5'QGh)LH.YT4lPNK3gQJ,+\J\?X$hC3HXs\*8^8ph6YPB"d&h-d[i/G@th%X=]'oI4BG!"h@4&6%lG,5@=(2u*L-cPJ\6+O"7RLUPIo4Ti3;\2C*(04eqX@YL(LfmjE*d/Da8S,=g5F9U5L\,*[>jO)Ic`eEU_fLoFtlqJ4dV^]2FV)W%A?#Z=9W\2/#>L&_T5>BOP*Kn/qGolFb`aU=-11$)]jZk"E9CN8TY0XEK$qBiX()S2NS1-9hq:FpgM#Si1"<)AOkDKgXqt0Un9U33%%'Mf>13beU2uVtK<L^?@>^1+'E<>mo(tCW@5P*bF5l-nX=u@a$-O(!9>1.MtWp"tX9P!YViC1&=q&#jp4=2hn=Q#*qWGi*;/F")+%=1Fa6DY5Oqm]82dk<=WT$?u)Ab4D&tjB=!N+VjF(\"(^sO)s(tcX5Ju6Y<N@B2e8!X)Z1NS7r$V,c=kkX+,R6P1\l\1GWNNXh=!L%(RA`+DMbdlo%[6n8`jO;q=6+UR?(+0j`nK%$MQ?_22f'kicZK%[C91f:6rJYHTr#9m8cePG[G:XgJ,LA;jPVU%jCJ#Y$2%\5dJnI%1B[69_ut:+:R/r\R$)N'S&BujR.iEa[`F2?EA1%n*QKV^UbSuiIs;58oV/dH%(#ooiDb+O_KBLl]2,V3^'po8@PV*EEV2^):-5"S%Lo(=/\#iY=qAe+AdGmj5"2W@[eg>;qY(aL=`,9&k.I``CMF0hDl/M&O:g1tNNR>Vc4ef*pI-b`JoTJ7g(cbqt22r#CN4G<'D2j`[%[09pMhjn;!548q3cS=b=4i\:3aU:T5m"%UXK.[`&,`d;<j3^"L)@_JEGa5/i*G"U^\*jZQm.g_^E&2Y;M1%g_h%s"NZE)^AXVn!+%rt85YL*J]4jNj`cR[.&VE`q7B+kC(+Zd"7E:0qH(8U02GjkX$Y%T=3FLX!QE?K1t#WQa1rCceRpGrrPNE6M.69g3f9g'ubVWl%lI%j9?ou>[3TTb"#Y`JB$BZSY+GND5Du7\<)+O*Wkf=,#E_u)I?IMbl&bhNYgTqZX"381#7r0?"a3Z-0tl=7UC"L#@26QdiWa)GVQJk%RkYB@B\djYiTPU.D`anImjWS%7s:S7gK?E8r"n1F;":7P/aU2G]B@:[cab(AY=u(r4I>M3?$f7o:qWQ>&lN9>j:+F'ZcE9aFk3N\%gf5[gH\/%J3fd^57W/j?@cfOedZHJT5hE#<R@*=m,S!iElp@ahVe#&L023<fAY7US)7eRnn'OR(E[l[XgL*0HOrd7;6E=q3Nmks>%;he=5,_0_KPcNKDdTdtQ"`,B1hl/DQSC[>uK:6'@:"PbSY??'-;-M\!nIG2jU=hFaH-AB"V`:emVBkJq.:tH,bf:\B/!;E@b:oR3%<]9(XC8R5n^Q-l3k.ct9SL%CA`[s$l)o%^Y%Qu5Ujb7r)m\;BX2=C1C1A1.^TBt_(ZM&IF29l8n_k9S27j/8eb;H-!(%j]PMn*OR%A]H2N:\HLtBLFcUFrJMa)kMDO0_NS_FQA1fCnNI<HbI6Bk]5@A<P50!<<WCr[.AW&fkD!R=B3'j"(PIOUOdClH,QY<=)B7mknD0t%odj^ikMRk#J'Yt'3ED,RmPusq8`MI2=o3OU4@nMLPWk&"qOBZ+D(;2Lmi>=eM593o$KtO=f[Kh.heQifR],6a)292IV0VOR[>Ktn%]@Nr;2dKu5Lq2[=G[I83kAk0j\^o5t#%A&KBr5u\>Nmh.Xk#:?!BNi.>RmG(4X<d*J=]/C]BF@_=b'h"!!V]PXS-2V*'iCd=b'h"%!.=lLio6F#k+2[R=aF`'!q_o`kWR,/(*"B9!.Bm)FLNedY;q-I^cYbM??6+'^[g*)P8@8acU1.0"Vg(9C\b(1E`#$GWpkp8q.qRe%/[Qpu,99uj;*JgZpJq<5NhUokeG"kiq-9t3/YjeeF8a7lMXkac_H)B!mJ5Q_o5RD4hB!WD>d:<d4Ej0_Fo>p4Kq#*FT;.!WYe[lE%*3/j\O1'26lfU-#Bth0->h7a/G=1'7olIPK))^qelhWVCoeYA4203%f#>E.cL&7.]?L%AI'*X2H>!uX\lfGFPIL\7^Y6mIrlfYpE%5-G/rQb%Xk9@N0-c<8b[A_er2!f03L5N`1V>\oG3I_n"2Wqsu)?TCjN%kR<5js3]kI`1WaR!]$^(5o-WB,?%bWqn:i/'W]Lf]*E?%Y'']5<F%s+oZVIV6tj2%6-iZbcaakhH@42los<s1m*,V#Z*'^?0>7V?olG;TkS^Akeb'SD9iG%V;Oq7q\pi?f[&iO?hEs&F>sDt'%,g5;;\#u?E<BonNc;iKB3T(fk((7),k?QP5bM\tuY+N%qb:Zk<g:Da!61e>\^U`\#H1DGlW5gjk/KV8?hZE*>3=GAKZT2:UqDl0D%:!pC*f(HA5j@N?9dr"\4f(HAlD)6JNkHF47/C&&-bFE_RSGg^6(?`>Qr>;oDY?7C1*oAM7)HQP+k!+U?WdaQhj7BEHgY^jqY3S#H%.6^["l6>NidBEV?WdZ(O/Y\o*F&fthZI3>$F,W(:CL'0JH"gITm'em0Fo>p\ohAH<caajJ;-ZLp5A).\HTf)gZ>_[9Br^JHqM_>p%GqrCm_sq4EW9Ygi@]J_VC4Z+]f?YVQMs"Pjf(F(oFOI7cF4U"?5g5n0gYE8#-0L,glSjaX;M:F(\pg7Cb.6j7m5S/>Rj!+)ZEBh+%?jLCp&U"&B"[a5)im`,L*'*RQ=j-_crR`<rX86i,fN`RtCmAsO)dc-A5?EXmUon(WZ)XF-G3o]\rLB:.FVa04Fo@ht6[MKP=HPbR%`ssjCjU7B@Qu_pn]j9g\\m\\#Q.J$Oj6Rb1Db+(HY\?@BN%6lrs*@_qO1erl$MScfi%tHd"ff;l.oLVtY39XSmG`)pF4'L]p>Y,7%K=m_b]i<R,Q:n_"jAYH$YKlE#J)F+Ibn#OOs8)?dLHi6GR1F6(r+*]LRhthXX3OdR.[NB[;Y`,;P:D@N-)o>]*(e]PCfEHqS\.K`%hf%rh@]/&ULNIgCAu2P3k=3$(ICr-1d^Ug`4E"#kgZV@.HAGg]Uo26'WV$+9pEmRYW+5'l]j$h0O+ZW5iNO:DNrJZ0LD.4B1Ru*g%Jtr#2)@-H^A'""ApB@:^f)Fq58bR#ik3:j\^TeQa4'TsGFpil-bNcpta&cYo3?(0hY&p.a=sCS%gA&<2D/HLV5lW)b8=[?P/KnhH%q9%5f5[&$6d!',N9L6mg?FhdL^N;;aK[M)pZuDYq8jLfcK"6IBY]:$QN6..Q](I$]%Srg-?bg*PM9oOQ93pG=.YYcl<-`7#8Cc1Q%n'T:!WWANgIQH?2:H?(Y3I-kKPnu[G,b@ZjS+I(@ngDCPgC[AL9_%nZ$&BApf'TTpdWFop_dU4?%rIj_r6b<9%:n)YI$OW1V+fYd%$17,r[g2p%q=4ifh4DE7?%4]7[eu9J]7'_!cO*iir?jsP\hX<?Xb;7CY0%\PH*c/&a(8B'bMMBDIu$&((T<R`isbe]EZdm/hfmFS%2a:EHQf;Aq1&SJkRf+:#;D8m,++YgEl!L(M%J7YhLm74Q>Q5#Ia"[IZ$V')"e4Com*$o87L^K*ac**b@'Mm;Ur-/0SPWugoI6pn@%S>?nT8VcpCr!IVU_q]n@C2k1W!'7PeN9ZIg_Sc%!H`%Y2+!B8&4jP1>b1_J\ZseNg'X)CmkhknT=,Ubd\OYB+kYWpdi#UK9XR&_"%os59/Sjo=co\`'U+4]1_5PfW5Vt^.A77?cR,m$e!OGr!J;#UNl0S?=g;$IW.;m`rFVfApl7kisl+0T[n)e=$LB9-g*q!q'HDdO[W%YAC>VdkD[_p+=8PO*%V=Z;FpaYV2u2BIR9F>0FVReupT.ji"'OaXeI=H?[XbY#\`(Eg1-Wo/1%A']I[ah(nha]+#ckcEipRAT,81%<N<H?O\3!p4'BVb.j\GX"=BDlI]]K#\h>QJdI-<,%1%(td2Jo[!*05R2r-hCYN,6T2!uX"EE!=>^E-tKjbYpfQ(;_c62T63X6d#j%!d?phq<J+V(r`QrICtIOffB').'^OYFhDK4:3s97BCjYO3?2f_c[PP`ne-72<*kW8!dH:@cRn_E;hVnJ_9qIt"i5biZ3&.q#gO4`%FT=XL$.Xn1$r3o2Nj2o/Hjpi4V"tI.$1)866od3qfgkE-EWZCO'.LFG*NFrC-/=3cHX!Z5jT:j,!Vm"a_Og/B(R.qQhk7>E?B-P4%k[PH,OR7k<qtj5ATV-4]0bB0/M"ZjXKW&.IXMh6#0o-GsX9:@j\;4fd+p^e.$nPJr@#e*E**u*2/jHfdnW`.V;&C_<@2.$"&_-2m%l!UPFTuN?7:OfZWh*Q=r=-98Y[1>`e:I8$--#uQLBK8O`=PXA&rZ8t68>GdgLXoP/6j]8ahnJmUNY1;ZNg'9-S:IOAAPH3Wms!O7%@<%N.f?1SC8B9F7_//$f<Ee;q$+-fI3@1CS3.@CnfMl0\>FG9VT:[Ztq&@Z3]@PCbB@Q^*5U,OSNmqrO,EXUcR7<aD\)mRUPQJ8N%Ra,mLrfV/sd;lY$U'?kQ`pO00CNibbebjdHZ=>'3lNYT9ktlidPFJt^A'dKHC;(\D;tHQ\)MTG/L-PIQB]1aG.]A9;O$9MS=$<A,%maQEUK?rDFQ#aa\FKG;E#OtR[W1nqd0$p7qd]Qi's5)Au?afD:0ZO=INC6bRgG5,USOg":]fki'jR?5^:HGEu-.p?KcYmVjOfS%q%6#Hlb;SKs%>O,^-Z'P%\-qB/mH!"KlqQ9FpZ'IE=#>!MBgf4`Mc4Qem\Lm!Hort\da#n2*`bmBbBaea\3>o`cHIu?Xq_N&*6q*+0%2F6_'aj%kB;0mTBW)4;T4K-Xc4rZ\*K-m^$9)N-+7cHrCU!GUs>#d9a_chL(M#i>1p]AT2F&5\>:JMCK"c57O-&9EZp%g;=Y&0HM%OEB#Dc],j[Krobp4;)RLQ/\A3]<[lTq:qJ]M=JSPL"rZ92RL#I)P<>ck+Jh.m%]4*I\aV+c`abrl^N6:T@C94XdU5TnY;(DPU)uc%O&^>iok@@^=@/57g0/K+CMI;F$&s!&F:?Z5;^nbO29[T.9Clu%lc,Nd!eiWr/HP1ZTe=iP;JL'Q]\%om*\e;UYdI\<['eFn8`!5`%^!(P0/Rh9;[l1B5\Yb(@cgC,^<+ct>(UJ!r%Y8g]n)<==RQMNdN9AR9hMY"j]7@\t((RaV*TJ?g1%:+:h].g!Nt@jCGrhi8GJApJ%3qf:F,4bDmFI4!e;_Qu\#Yool#_1Ae')(GLhC`!o`YK3EWi*I$l(RgX(nP6&`G*-F:^ZH]O%&:epaj\2F6K14DHe(K+"<lkoanPi%/%t$sncjF(4K*0&6!W8BV\".Kc5qQ[T(4S6D\5OaY;E#=rDFAI;ta0<_=V'Dha:k[SaUh*Z"*&3r"\H<TeMZ*o,H@]N'Ko==g'#!%+n*9!js%YX5&kop?B^V?rQdW#WTFe_/A5sGI2\]UCVto@\@ErA\k!R#dR?"_Mj.R:ih((kKDN5*1%,)sAPh[+%Da/]/F7`YNk<L<%)nGo_aaSr]'E$[,0u(rf!i$^nRR>LlM!lJ7.2t;R(KYh(1ti_W6BkmO?Ib):rbd",B=B@u!km$$\D?'#3VQ1Y3*NIa\.5>.E\_Or%i9p"a?NiM"l(SjPgdB_$8ZY]qI4>3LN2gZ_O"ulh9+e`2*$\3:r#OLbRi(thC%MI=dm#'h6@'MZcOZ"2L*"t>M^,Y,&`Kb,lnW]%%1f'1K_R43k3"[-+CdB-^Haar:r<bu.+2a.+_;3-Z1sn]+4d':ZB,00fM-p!Vp_0FC2<L\?h8+^YjtaJ2iAP?3517n&<X9_#g#[_\%:U0$-CBUPSL"r%%*W^+9>oiLs-?fNCdcaR2_&j^$PK-U/5Qelo#_Xl:KZBe??pMfTb\r.=/O$P5)$n1X4($H(*<[4CXamX\aoPq[%ps\Ct+jR@t&C<`-rJ+oV/3r,$(k=kD1?(UMo][.qJhiHOi^$g>loT\]?H+)f)f4L4;$TFlZ$Pr\"qPCT/2H\0QN,Kc9"#c(dKL*Q%T=t]8K+6QFHi]:6KUknlo6DH;K14p.7b"sNH7BrILs<77kTJ/Jb8HWi=Ws%2V0i<a/n>Ju3->c=;:#.+V`V3CPs!uo_(<3cQbl-M%Pk#!20"gUA,\f+?!@+s3TX/S),3E;me@kH]ONsQ6HRa1M2kUl9`MQjo1d+lspV=O5A1s$`3#`H`Fc]eS&!nq'>-8n^KpM6<^#a!)%h)o3!p3nN$4"gkk=/FrE@8cW@WD5QjMdp)@2!tN5oJp%4=PS]V;_LKnJ5XEBcc_],l54IkY0;1Nj/NoU]V!h?/quq6_k!SQFJ6oN%F``YF7,/sE49msJPEU9Pli[V@2@i8bNiZ??2cC8?`J*T%i5gd,IM<*=U/Fu7fXd5LCO7;mAJI>(>&AAo%!c^NQep>S044jJ"'pVi%f"41snNX.B=MP!d7>TuNqjp4!+=T)g`%`4"m/hE')c^r&h8>/JQ]]BO84/5K^ANeai"raC6$lDBfe3Ob._2>s'I9Mo+"hUac;+%I%>qKSSO6Z/`3(\6jU^YWg-=o=8YT>u["#>6)&sAAA00Y[3C]6u&@r:ZZ1u3&6G/KYJV;5PF6!<Fo^/uka7fD)ML7K(lP,-L=/7&kH%";4\_BdeCTU\OTahY7>>U<IHpo8+.@%LMa%nM"VMA7';/!X%R3^]]1q^J;WVm%)acZ6cp)j?4fr4-Gt?H9$KeLD]H?pr.350YNqt%I0+*WRg]F"7*Q67$JL,;3.?8NUWV-HFU>pE+BYo]='j)I#?o7E!qdh5q'<8o60#+5_>;]HQ'YPD&=^.n_LoF\_4_W"C1d)%qrL)(%AH[uG6Eiic9u517]]KTt5M,XRoO7P]X)Cl#2q$lF/R3L,2rU=6q``Z:<&l/q8Ba)?>!>d7r#:oGB-iiEn'dTX]TD^BXWBZsK)Gt&%Ng2^a`0P<p^dgf)Q%H7GF8Wo*@D$[]=Tu-@;Jt&dMb;ZPBR1K!Ru8Er5m.q4@c^>GV-/Z69YG]6m("B#c`\'DZMkFk`MHIc*8!Cc%mYBaG9"3QA;Yb&E$RAJ>kP?6e_G;&l!Hn7tB[TjW2^-T[+WAnu%2fTV;1Bsth#g2\3m,jbf^U*cjYXOb4V_en,)+ta7Yt"JFukR:%=[.*iJI3EZg-3lP!YDL_M)*l"?B/Gd`.HQ8A!F`9<(gM8kDK*$[E[RbVKB/%f8o0<ZJ0&pPo_FL=5ds>j-T),ZP=K_=uNh*P\SDN%'.o(Y3\5<?*Fa-aflB#*jWO?8dpt$C>73d;naj\j>\KBNho?,I[2sM[EV'_@iKj*fKiU!m>[-)2G@6d^8%>m6oZWKi\\<IsG7PU<%<*oH%j,#Eog`5A$.`6o*rqut_lgc3P6a;T_+'V`aO;0aCp8'_D1P'8L`l7_JK&\pO[%m2,VIT@'g_n!8\BPn28A(KM6L%<Ld9jfS%"i$F`;O1`0'TC2l7I6#ck6R%G%MoY+3*=*=cCQ6H%\>m0"51\#T$/fh\oZMqN^,1]j.2_c6n^I5[h5PHAZ>WN\jnlZ(:6PV4aB,I%J%UKAhuurRK<OH$Gs;j'`pj+DL@5D3Pu)3@;\::"EDH\m7UPIDh8D$c)R8-j*X:k[FJCPVegB2j?pQe<Y*"lgb;DIVa_&q@%DcSe%(rf"d2->Gf8N,GdRduYD\]/82fdp1,$24]G1J0Qsj;Ni[']g7pFX('f?FN[)%<;oq0i>5ZZs87/MhP]JBXrl;>8gh<8$7D&d'uBE%!?$WQqo`Ei7[%U1X9i-WNCqhuXo\RkFbr0T"h@+I%hBgaW"/f!fI3R1o,fAljh28G!OUsX]7#JtrIaen^+PN?oEJ+BG7m3)2WH46%pl)T$0!F<P^NS4+WGBU>q8%H=p!!8TR_Y$2XCLdS;4+[R4hjP+THpB'P=#5\T7SnP.+*GbM\@6R02&eLmVuo"E84V(3p#iRH]`rV%B7411f`'%\@9O>qo-b`$Jjah@KF)&O=#$<$a&b`7iTna^(4tEkDMIi#obo9g[T^iKrG+KY.L.MP>X<]o7mks7c#@PJdNpnn#p0_1%0>N@2,c%?uSZj&![BqCBeDu:BZfQO>oFh_H&j[o^_ma]?`2I/U]9V"&o6hSb\\1YQ^KC2g"o//0@Nk&f(h@rsEL;NknW83eZ#m5m%&_J\\9u)Vc_Z4m[!2uW6EA%s<$dt:g,%AQD7U[/@G=7*"?EDciqK@OFLh:&n^e!S<G;lNe@3TC&cJgZ*'diTe%W)-\dBC1#AM;IM%!;/q]UEA9S,K7HHQoI;>P[=u\0HJn2M0GsiH\g_c<MO41%!?GVMK(@@<Q_C6I9]LC8.h>SM^gTn,3AEj9$OJ/&P:)5Q't=-P1n*9%M*[8uH/d,LeD,qGGU"Wk4:QI%Q't1)MO5*W%B5:2+YS]aKpXY!:$\h/gklg>-Fg$QF":-jJot"gk#S9KI508=PnIR('kJ%1GImpU%cRIA_od1kQUFIJapF-YRNg6pM"@mY6+iLBD52B1ErRlUA2(*;d$58ecb(sYpdqGLS2%XjZ\0<ufVYtqm7IuD4\KH(lc-ck2+bL&W%`]K)n!i0AJKOGLpMs\M.e;"1B<3G9\hY59q=S1+q=LXB2-TOmVW[WWf4G$BH,hs&!VS7Eh_L-tnTnu(t[%Lk295BoQ+`W,[4Bije%NH09joB8JLRA;+59A+jedMSK_e:p'WER&$`c#K@Dh&u)mDc>\4L#i#F[9\3,BRCT,R2)e)XFO\\pIAOn=8k`R))I(*pi[cdW;.0j%`cu84Pt-&4Z5YTW1f+lCCrj(Ok=*S(_*ZDMLboZW0*jGM,1;S."AYok'p/]0HF%*PUC8KR:rA,H4I(`i#U2tk!P#CoZU4"H)NI3g%=F59JZQPCM,DC+PBp;WZ5d_>@9Td6-,1>BXmO>9Udu-&ip=!!li@.0`r2O#4X"NuUWa;gFdu-',S)@s#7LH%uRn]]8M7[[u50GQT%UuAH,?EM,oM_s)`2PkP@HBAD194"P_.'OAo&o!SsDgtd3T55O97%3;TY$?DS5,;=aAs!9e&b?NYOerQZ8^>N(h-+tCOTo;N0@\2r%dNkn^)D>Egq*c3/^`_/)MFaMq/soJAG`h-bq;;YUf1)ML`(Q/(\b:Q_%@]NZ8D#W=r*B;*!3g:-M/ZFPI^g.rokE^(]t-Q_kFr:T%UqXI#8'-a\Z>7p9d_V?A,tsjaJuk5,"E`bDCb!.=@*QQ%70^kF5AXf<\Y,\'>9YWX43@8mJluE#K/_("U;nsUOM/pBQ^#Y`2KjHK%`8+LcUuX?3KKt#?U0BO.,!$##*E]G/kDV[h/dG4e(p(W7TcD0[7&XKJ%c2j5P*X!m(H"2s[oB+AM5N3aTL`@,UKKetB^I0ipZCP`%R!-,#I&]dD?aWV$:C/o9.AMaL;Fe;Gb,ZW,(RW5Vjl2&A\l':0L[kW2nO.Zq6P1rZa9W_81.n:i(E$XkjbJF92:3'pq0I;ZlA>)s%LSCB&R64@$A$:>0/foanU3>XNOm%YuK+:Um$XXle]XYbP,),75eCNUC'e)nhn8',:?BIS(dYi7X(l2?E;@&N=Rg=1NIA0u!hAG/r%dK9WFY70KMR3`f-[u]BijlTnC<-]AeF5jh*A;44EkAkfo+>^aIY6=D6aGfS3!r:%uV;DR>1QWJZ?-_g+Sp]@?G'J?V1VEI!-8Mnd%nN^]r]5@a,P<0`<P*tS%2553_>@b`4WtT4t1?4k@$0?`^(lU%]p,Lp.?<"_o6S8nS$Eb!/(D0'(UtgpCkEYVXq1T'97Z<#u/QtMh%8O.,"l//6n^>BD=2W$mmCUD(tE!`[m3:!s7VD\.'p;I0dKS$WnPV:sr77f=_:NSq&AL+\P>h!`'"V:;F6&&N]1nSYHnbloRT5Li@%\'@b9KL2V:Pq;8ZJ+st/Qt-9h(m[mF;V74TLcnG_Em=I]Bk"3^,N>W\lo"(e0mF$5(=jNnCChim7Ne=Sf'mk+hkN%S(2i)^Hj3cl%lnH2DTR\VOh?*KocJD_\dMg#O8dh@N+Tnk*Zm6HGNC;6Cm:hRNIj9^b7VaQ&8a?;#][M,LX)"9V*BW57]>r-'nr]\uBMj'JVtU.g%71Lgur@R^B7Lh'sEqnUpg%7mUr_GolLGgP$S)-Oad;&dL09P#;Kc=4oB7UXQ<Wn30Oqn^>@mt?aJON)]TX>ae%0VIAUA6')K%l)n%s%#V'P[&Y,,M4&USC!`X/VG(\4bB2CZ\@l$)si20-M<T,7bCh*)%FVK\>/KWZA/]).q]QsaL8Sa)_5QcYa0u2fN://oN]e3h,40Z%cgRsA1Wn]pgM,J@*h6(oPtYFYBI;>Ta;dA`:V_8.;`=Q/=n'3(<ih9u\H*)[DoLH";$=WMCBI]H0l4D:nWndoL8Ph@3?cs#Sl>g:%!?rW'm]KisNBjS4F9E/mne!*,5]GdQLC]kp'0O=h9SVlbEZr%<H]W3R\;N@q;U,mbO^UWqB6uVO:WchWJc*YZpnZ+Hc;S#(0ui97%N5[>'cWS-DA$%=nSB)Z_:./=pl5!emP1r(mo`GhGdhmHVEIZWO2CMQ]8iSZrp%JN*Y_3*<`lU2sT6UNVA@Z]%JI#iT;q5MOEYGC1%ZbLjLZjA#WCd?KEKj97c`12KcPqPa%B_<$)mC%?Lafg%Ve2QL/%m"j:)eqsrX6<i[_DT3BeTe!<?(j9HeT;^lm:%,DpF\s;7o_t.%*quOpFjRjIP]j^^3oQ]W=7rbN%qBpc'XNmG9U;,%<=8'5*g<FR'0'!l']EMmPGMkbQ1>*cA>p=Dg3KLVS1NbZXr(%0i4^76/4:#[%-VMkGX"VAidP;DpEJ^*nJtp53WEBLD/Lk?)p3`n8)_qbW_"k\=)`TK%!llJ`jsr6T-iO=n0Zb0#khZg1=/IS/Df2heKAbGURtG[u%99]Uk+ZJ7"F#\pUBh;\Q2Gal%KHjagMV`&a,;lR8O&[gB+W2`J_sShbAR*JuUh\>oI3nHn4]\1jc2'f^3Q?<8#\0>!37%O:iX)uN%0K.RI(OH+7*at$"ICC'RSJ<,S4AUVbeLP(&&OF=)l2HOK@Vj4;V#fPBHVssY*>Mi?"pQ*oW.EMhQ!R)]^[nTIaP;TsHe6MF1FuT4%hdrak.@G7o?^%pTi<C_DE^kMPAY]G;NmOe!)7?\l?BsAb2Se_ocU+)eNZ=1B_O>bj<)"M-Xd8)I5RQDY*(T!b)Q;83!g+mMAL2D%%!3slD:&$ZQ_bJ]'lg4+/r5ud_IB(S+j3]G@^>H9eE9E;E=T+,:8%8!78pRbrG`lA8Nd^=R*`:1P_T&?TG^KPRBq.8PdDhqDN>bZL%.L02TBD<*gL`;+bpjXka*1LLJENfhVnV"ehFH/".]o<8ZP\VQ66q@,4d5ciT6_:e97qMnHTn#ihYXM4P0Zq5q"uZ%/,rX2-)u,O<%\ojC['rH0K&Rg#N;+f[1*1C`OLnpdA0!.e=fCHkbTkBh;rSY?dWhBZeGrTR74,+fXCCuta_1nP&@n`O2h=4^(*[W>h(j_u<$pBci%Q%eVIJt])g<8UPFHdNbonV_Buq#\<Ikb3I1?T.Oa1Co>O,_dA0bI<FNUk61&gf?b&],@B;VgA<OM<NIc!J4GIJ3)%s4U[s^:oXjY%gK$q1a%at.P<n2+EDp07D]Sl>*%N`8-jE$LMs:1G6Ou*H^j5`U6P#*`rEVc$2Y6\FeBelnP^g[!,B<Io:1<ANqPV)XMo<E7j0p$<%4W.KA7li12%]<+0U9UK.S7lIG6*s`]%lX%;(e#6.O6Xj6,L?nUci[mO,d&i?;[uGf:UTu-%6r"f'IO`DifKLu7N7X4-#I.93)AQ&%V*TM*!c-'WD<pp)4np_kXF]7co[r'$Yt.4m2Y6\F:55@bAUL!?4GFpF-AqU.4WkrHD==Xs"^E\@6>pp\0f/#a)KGZ'4_LeT$eQeN%/s,@+9<WJik5qUm]h?U8GMK0X@\)OnE(d/i?aC5>2pp/Z(1HFL$)0<M)J!0NPa@0O/LYL<dA`.'#)ul;m]-*7>F]#kOUgg.Bf+(\%Q,FH4WM_V!ljD@HrhYuJSa'>67.Ig$WoI=1X^'.NLL`ZoIk-jAe`#ssn90KhU,mkdG^V'A,K;,&='.#*l:ASse\l+1"q\Hg&i6a[%K7\sF_!Y!\<^%bY@<W9.9Il`tl3R2pNmc4s<!UN+,SF"U%8,jp:n=+)m3Jd3N`"@>W6U\]lem+[9lt$q<6&hBZ'0>beX>r*F[jE#%j"<Tfl@>\k:"l"jl@?9TrekhUQ^-b5f:";AnP+.GcE'tMia?o?P9":K]mLO-]4!5U&56+9h5TLU38q&GF:;Is=1?c9:+bU&E-,m?%l.!</O\4NN3Y!K^-$YYQ?;JiWE'[78W>/:'0I`0(2R3WNV\Y:6Ci&Pa&sfPbgfg]b[imufjMjH6R)c2f-$mr&b%'ef9%9T\:+^g2%ocgRD`0Mo4\(9>0/M)n]dQKYj[JG4S41.&;dN&#F\2gsE!I)"RE/q`q%32l/ej_S6moCt/O1033Z6nl.346\@oL7PP@HGu_h?4Y(%f%a"P`%*Fq>3d7LQC6ofbq(Hn%FM.$cjd'Z=Lkg`10ijq#0kuCN)$L2grcD3\#0KL4t@\E>56\%"k8[>EbaiR(7$QgDr*2S4BeQ'%S98A4"WlNDYs@o@6/Y&7V*X/KB(&ga2X_Kc/Rt+')&03Jn>99<8'cS47%U/m`$k2hhB!^dTpg:B.PC0ai6b%t<#gsa^a#BJL"*30%&pQ5PD"TB;n!2hE5XpmVg:W&K(hoTXVV9*82(Oj5X811LL)P8nNs0pSfpMo!et1A4f="*=cE1,cAd@R^X^)\E<0`8bV\r^@i7l,q%WK_I-%+*ml*c-<)hto#AEo4iRnpISaH&KE*+qgC.^5GO@?OKF3j_Y=P>Occ1.CB^GLP,7!lh`;LrYhLg-Q1*l:n0/37ISlc3@Q8]%5KLae?o307&R>-F95^o0;psDtCRY^FTfM>2jN5lPXPA("c6E[;=1+c),^OElH(e7KFR/dg<o3FnI-5g)j[(H>YaQsEh`5VeE;#mL%j#^o:`EPd!AcLK`gA^`YF0e"I$[58rR\?Ga)ubK%1JijofBQ?XA'oL,;[`-pOV56%&&EjZ`P-D9mIb0lQZ+ME*F3oc15YF$5kQV&%5)*o#*8[1C<5%RE9e#tcYL14f&X.lXjY79_mOG'sB,M(9&D+Cr;+@@U<^]94Itrn?\]6I].Pc7m\!586e[6OTFKRX_VVS1:7$#:`%Y4_tFI=,`m6F>N#Y4t$4qoe_>/>anp:14oQ5Sal8::)MKQJ2bVfLuK[3P<&cpSpq"Ha9b;[BT_@ebf%M[IqdR5^qUN41VI[:_p@E%O-@mI*Vm02P6EOP@A1dd.iXL%0O=N8Rcp&8hJ/WdKdL"?s$\+U[ZE0d;'6VKiiXd-nT:Ig$B7m[Z'(!?K5k`IU6dO;9SD7n+Bcb"%/n$df(#tiqV1KOQZosK'GlC<\fCPe(kS30'dNCFNCAGJU&AG\,`i=eN#bOVFEI'<7)?eG<KBd3SGW;J;)!$GhhlX\Q&LOCciOi.Y%MK%<Llh>);0366UB[,n/nf2A'+n#bNUgb.*+I4"+lVOifX[14ED=!u`07K6YH,B&P&R/dFhF5BkQl.4B\.2ZOjWj,b_XYb4*"o]g%P#2$s+46N$)IR^VBn<Y2TutR\Baq>`0"c.gJ^tAQ=_-uZV_o_=I50S-`Ko'lDUeJ.>%<Li$6hl#3gu>bTS:FgHrH,:Kl$sKgAE"o%1"n4/LXr\G_0N36EMk\T2D(\7_oXbuXVkaS\]0f`)!%,2VDW$o.(/"[RmkdEQQ.Mg>'',^?Gh0MMp$:JZI^4T=k!FXF9Q&uUQ,S;%c#a\Nf0]cj659&3fa_?3j`/u;ArFq4TDnK9%b+g;hA+U.@m5Vp8>(GlJVZ.1J(6/KWb*b3@kd<^DtUujar'.<+<KY]b/tQYb#$Ci%6i^QHR;K_ePs*)]4[]ubbA\tG6!ZR$hdepMH4_bt:;aL6"XM>T*?.+=+C!]P<Zo@>,99aA8-:s,4b=g<"SG@R7?<"3agcp3)F^2?%oM;M?[to>@dd-:Egr^jQMGO5:/%k(o(Q0mrA+3%:]VN)d;U-=46nML:=,jb=;U-=4=Gpga<1GttB<#GV&%hV4%aL*Cd:&tTE3A0l%R@Vq!ac"I21t]ftWFd3S11P`,.EJg#`P'?e)/Ln-P[aWL*;PGge@"i_6oH@"5S$['nL-`T_]"P7fp-='4t3(8D97e#cTNP!hVq1%%<<LKdp.4.hHPYP'ZM$g8C'n"@=RE$>m]l8];Gg*U<-OU&Y>Y/toA!j7<Mb:.<X,DcY+Ad<iB0hhRH5KJ&7XOVZ3QXeN9@*2<>\,c%TP2."fJ6pAbq!lejDD)E#4c)l"ZjI/"G_n5>GMqfhXg/U0/CHZ6nPad?Z-I9ebn!9%3W9:Nl%HhY.]"%=Vc8ao#19$7p-a+]X<)Q%,W@<9>hG%f$afE8)L/]6BbpNr@gNr3`%g7lok!g7MW"72^Z#ATB0M1uk>qp!]6/:WbE4q!*%JiWk2I@bK&[6K=`Nlpl+%*1X->Q`%jiAFXZ&:=0"l-4>@>i<k3M,Mei;EU%l=L6P,>'qSi.*HeOW76<;61(aEAr,o,=jdIRg+K9Ik9l>?s`h.T'.$<2\PLrK-W@Bg!"2O%q)Pp<@h?GLh4sSQqhcT=[N`9j=a:p6^a4"O0mlNs8"!2@F`s^fG?O@m<T0"k@Y5mUn4/B+ah9+upbZ_q!jJi1DJd'"2=p3\n"&[o%3"A3g:T4Pq\6&(F#.K1T1!n8g7/.#=E_C`jiubpP^M+3(@?ftjm=RPg,SS`9GYm#+$Zl7hortDYM"2&\3OjV%7&+TH&jC8fMh+WM%6AQgPQ@RQ\Go/Jl3-MOGT'J=JXcbLsoNdD4Br6d7bIJ>D%@2`hF8lr(AD%rCoANOnk+qd#"ThoB<3THOaP'H?VZB8k@4C$U5WOu:%4gR*J?"G;?"\`Jq57!9T0KnkS5%?fd09X/GjpPRd>&*4]EKX*^[=X(aKcVlF'Na`F'hUZ-DdRWd;F6Su(L,rPLDEKrIiG+#D[@bC%<J9W68u[*)UjmNj(&HPCnX15Kb999Aa^<2;'"UVs/m]UmTZ;g)eq'*QmZBooI@4?%kZ6e&FS>f[&WlfN.,92V2d;p.K7mjtD.m^1%^kN/jNRH+bU&0s0!s^m*ki;UQbf`:+/B+i-6-F7M&+>I$IXj,'C(2U&@$5nArs;US)n!MV,J<2h_Vc^t\K[-/(/^YM>IA_=DB'm0%oUSO5`&(u!\\Xq1*e8*bi2?8N>6E5#l(JgK8Va\,*4NCQeFp>W*G/56,a]!1*7f.d%U/^@^\IYjD]u!$]h9g.%O0QI`Z_9LLGF?C%m;LMMJ(]1tF^'mc9_\t?4WIm@91!Gpj]#5fAg'he)Ob/P0P3/I9j:i3-1n_GkI^GkhMCocaL0Tb&4Zsa__r$MT3,5V7RkB;7Pa5F%A$"&aqt[/(Gs59dpu\.BU\Ff'00\(_^#/L\Hf)=(s1Rs9&)MU/^$iW.X+1)u]2)d`o(aYOI-$j`qYbVfq<PNHHi*3FHi*jBk0795%o*>#.^\aLuT6pFS=.Xj-S)<#uRrA>uYCHBAe(<C^5>V&1S,bRbqI-J!F%C6KbOLRAs-pduhA:Y?k.`H3r8P+lqcEgfGQ.p5k>USh%kqi?epG07U+2.;mH0a-VYPcZBYN)6>"9\MKjI11cQEuqQ[D-tXmJ"?k_:LpCm;MrUWLL&TG/qr.mMfMXo((E4iN$mHn&oX^s0$qN%\K?=qgW,f`pu[qBmIO[gpUdWCHN0>X^@pT*^@UL=J+U(nr7k%i@_kr(r1TXb/a0Sa^\*/UM>k=aYQ+Ps^AcRHhu8BQ]_'?ZJ,ZEg%$30uhn3<Opl*F`rhgOaqDuA]m?@)9GmsOZ%cbB:krX#Vq"c["A?pSr8Dn`k'+!$$q-Pqi\cTcjX:JOmgl3fg%JIq_T=fL]cl2=7m%p9/)Bp8nk^JI;'-.Sdeis3(8<f0?%;KEh5**H:gmmc),Cdc,?)R/cr]Ye%L\'E.Ilb?&$GS::7gC\bmGZ@DDfk:$.)3ZakW]lc:4%nDb%.o&[MGq85>m2a6u9Hb2usJ)e_ER4di%k-;\ken9&.cOKgOH,%,aXZ*&&rQYK'qD0M.F8qa$TAM:k`(p%(2[;E(D]G4Y:+Gbh%DgjSP2gk*5YKD((F_?]T#(QAo$Z]%GkPtGms87FlHet*5n,3)irUepHH6L'!]'EBmNp6-ToI@,`kMQ9\X8hauIiE<SLGDEsgYum2%b^,IFm^'t&^%"pK:L8ML*l#HPi5>;qYPm5L\,Yu`^\c0cs'W=8I.^"5rIi-!bH([@K3uU@?N[uj2P9Fk^@cdlfZtFaoo&8VH$oR<%B&7pcs8)Phrn\L&f>IV#"e-W3QiYe["oF3JqhoskG$i;mr;66W@&-uD,l$&;_EN<Q\?C=3Zha?fkO\Z\U[:i`ekc>"oH*p?^N*)8%711;IUf!^WU)t8ajsArFcs2d&=9%GJ^2hYe^H0K\#G:lGB[,GIo_PUqqR[!Rbbm\FMu@(<)IMihXjWNMh\UX:0Yb@=qmP.na*P"?%4%<JB/*6m6f:;/\C&H0$3da2@:B0ukP6p&QDDQ4gq[FJDrRpsQr]3,[`TaFE(U*l(lW7A>k%gUgdar>J?G>lnj+fLE7h,0k:OVb+%hcP@'o"/hSpYH^8rS%0s]+Xm;DnYgaG-S^YWW'n;(I.]2GJ=brr9BOTc-M6X*`.acqt`O*rj28N5Q@MOguC>#LBn$IqXtj>T24\H%0)kg?6\#%5:TM0e632c$:-8IlJ*$"nlgh7Zlb!utpu&j[g8dHXc2!V(nG.S5cF4s^IL8=;d.ZnLp"PJJs4_<rreK+@:42?mmsX]3%00g0Hp:L%9X06p87mB0bg:hS+Yhi[T2.crsF8=`?kC;h$gA=,2b9s/[HO7Uh!'gDckO[!ns6"J`?i8mKmrHI_qWcrVs'T(,j1A+c%n*cnGoU326618cR^\d>abr`K)VjMW?^s?s5hL,?+Cr/E]S++7T^(["*K*qgf(i=-+O5?qPck_"Hbq422nuH-pa'\g6Rm;=t2??nR%6T.57nCje</bmcGrm.c\09K3.Zn46lRD\kJn48$*-@#$Y%9g70r&_B\I'>ef#IlG(K\1r:'!ZrUd]_R'\o5H4?iArEEYDdT`M^KF%:EP/nYJ)dZilciMda'J7j9Cl5ZAVef](d*_d$t\R]_8s]ES80@*kDl*/g'gW=EUG&R6qnS?iB==?,k]U?>CksqsDROj-.^'e#G'n%'WKZEm_ApC5I-4!?i:hNqkNTQl`WHsq3-!laXPI"YCB(Z*u?/.GEh*II:sE5F1CYtmUI67AV)b-N%TSYV=.Z4nVN>7*@+7J48+&-%X<1q&o4HY2^[@hpMt%U/^#&e=2u`Md([^((/_b^Mh>6s9ZJAaZjg*]T4r00,e>hC#3)o(_b9,EVB0RQ2^Mu3kf^mqo2a0-O"HM;[%Z$au29N:2sbKmYVniP+4E9qldos`he^M.'Mp*nSI*8^R%Y884DCT<ROo#KRCo(qf=LT;6%Hr?aiG7S-#c&;KsVboVfF(9mhMJVC4%>aCG/QWJ7$#N/s<q0f^i5@@-)l1G3_P<RK^6o3;MYpOmt/Len;0>a1MTsc5BN-f!aU^sjZ),5QWet`ha,t45kkHH;HErY).LmM/=%b7n&3TZ:gUPM):o]_m,b0Ia:#n(5F@VuQY$0KkNIjnE.k12W;Q,6*'pQqU^qn&t1K_IVtR3qbX;Qp1Q2AJgPYqXo&^3?+'O]_q=,%H1prM555XFkWf%2g].,NGJEhBs*FRU-gO_2cZ9!is19:If<RUm]q>>gJ:?f#:L:<7:Y/[?Id7\9Ieq&chYYQe^\[-Nr9Do&rqsJ0%HMTXPIdl`CIK,dT55j88Du8"imH:+UEmA:ml.Pq2kuCifIX9</Vb`VV?TJ/`KE$>i_3<J73</j3q;6*Q=ZD?2QiB,HnNY;`rqFn'%Y3f$bo4bn=kD[uihgYEs+"pE>M6F\gA8V5";T_#YFhb!S0qR7JY^4pPV*'1hag6Y\D8.%M39HN:YBQb40PbrMG@`G^7@smUq\4/?%1LP9rV2`+DlJ,s&VB,o23XjA(In.78.GMf]-eR4LTQ?G#S,9:hhlZ!LNX;/#'QE=k5SsA>mHj"(Uq+BrbrlCpG8[WqcdqTH1?LbJ%f[OP!V`kc;ESb9gS@7NsYKMf%>fU,SAsi8%+*YbWrQ(;lSEIUn[u<LD)0]k'g>$>V0)D)A7\:JKZd8$K>E>gK"hX+W>@sLKbNQ:`%ji"H7TDK&L7A!N%kjtN[p:2i#gVn%CEnR'gAT-6OqJ,1!C\&LBh?%lJhpaE-]P*^]@OIJB4pARb1L"I`F3EdRQi4Q'Q[K))U<ffM%oQeh>qqSWl^+K#P:Ve[\ba-rFgbS^GA\6\LH6hRG^M"@q9s%b!^ABG=R5l@>jlm`R>(H@a8`oDI5JM^FS+$@ImJlMPIeK7<^\;+3%pZJ0=cd%#(D,7qF`5qm1T8]\O]__7*s6r,B\_d&UgjPG(fN3KPIC0mD=+>dLN>L7!p&b-F?XR6]$g_YWhuZ#jB.jnhf,';?l\i^[%ogL))qBE1oI?Ea.^.A0/?fVAm?fVYE0Cf=3(J=R3j:*Ljnck<pGlu3I]E.+_hLP/@Da8T12k[h))c0o&%B(rN#1OI3rquI/0T#_n%?(ZiJ8K+(on).@qb?[_MP:RQ@leM')5&\3MjGt[fn\ICbmWWsQSL;Td4b%5.l#O8_'l&s(O"ls/ifE^2c?&jV@!+h3Y3XoXRf$8`%R<0McY]@2p-9n+#EQ#3>edZX,X?.]ZE_+1RX:.YiVps'S@HFZ!o/Hai]?Ral'carKd!(]%C-D"YL3;'n:,?9f3N9rqrGL?uZJUof%^"%,3=^Q<`)qNOl!P4l;NH:gia18_DWnj3Z3hD@<m]$Z6O:cn<ID7iRTC07Y?8,nSQSje_YgrRhb?\%.;q1GT=BV`]H"PjA;`\Xi%8N"nU7o^^"&%1G&:08I&h^Gai;Q(9Ih8R]D(:EFI2!a*>0X_hj6m1+7SEF<2=?!BtlZ[J_U[;qPfZL>P*B^Fp_po7iCj5AFcZVKa%,28*ojdfUDHKWCSf&'NR.J0B-4TSYj%+Z^/el1YaJ0b(1GDhCHJ@Vn@G!*aOh_h@Qcq[,U_X+Z,JRe8mSDQ@70?[Yco?,F[=,tGV%TiKnamB@hf&dj;L/*JeG@_([)pMkB4:H;B6G-bB=_5p<mJ%d$WO14TJpAOEgn(Ha7HLh&V5'MDumSA/bISRcr[11tF@&Y6n(>F#L%%bK8B*pX-;c,F[:WkHC)P6qBP34P7+NS]LLk<i!$mt4.dE:&$/:0=c\*%,XYf(P)E4n3CJh*#2i6F7HtG,PJE\*D\PH=FKbL\&(`%;pS5:33a0%q)OP3>MFG=#s%"6D@?>VTcF8Pg!?hT\2u10S^bfOS`hA%ok#Sf&A"D/6J=5)jl`PtR^LegZe=KZ-Sah<);]rR&i4?'%UB;mK'H';_[^fC_HVW0'Y6&(`>J45[M/)Qp1t%8F5j4N*YQ[O%H;:S7LH4>s[a7g9'/R2I7dN3F\pBj%_g;<lEJVkp=I2#.NV?m5%,/u"K%q00?aF3SQ3rqCA]of*A23))%q0([`S,]`)X-U\so<,31jg]:sS?SWf6kGCM<\trn$.J7Y:9ohg(V%`%&)]MWorV*C';@"#%&gT]PAIHY.lo]i1QZB^/,fJ+(g`J/UXXg-DZ&Pe<Tq/R^0[sBt`b;332P!6ikMC0@G2:ITCj+1NF+dglB]mS&1HnAJWIMgtAqtRO%.%f+75)I4G(*h`<2]?(bO1,MG%q*R,XIoC$D]Ieb$F.R#&Wp8QrQ=kERS.3R8-aUn%<&.Ck=#W6e_5`F-Q[(6=oC2]KLjNVf52jI%Dh_Q\Zf&IFpE4\I4;;9;qMAi4D7+X?KiEIB6Ef\;d.]C7NcRNNZP2I<Z1G(%`%cYC^:WSlDYN,2Mg:/Qg#C7YPKrq<_P[,S5dhJU%c>)4`Oq.qu&&M^EKeM&D[*9q<Le]9B/:9`o!*bUOFdpBr-$?c1ZXie/MXh1HnJ53gI%fn)!iC2%KGb6+2d)qs,G@+V5,]7cd0T1(%,Z4PgSbF_%lB;;uLg+kRoXo`@`C9-[PK*1:YnM>JI&tW6`2Vp'j4c:ZT@Xi(,MSL9P9KqpA2$FAc3MNAoU7GUq&oN.4g2+MYV&-,%]Pmf!SIjrec^X$dg\JcL0q/Gj4SpLi.'DoI%r.k:8K?@hj*feZG+>aB(o'FqflI;:hR;NilQ/BUh$q"XH8n]f;lTB%db8VnWJ<mE%)eOiq`qo>PO,u@C=eJ8#k`H$pA:a_6=eKCTeU$ff7d0i6&c.]'KW),"A:u!AToWf=bg9cje_aC&e$'jI1m:j90D8fGoAL8R3]Rk#%U>l0[PJ-H9F$`:,\naJ1,0o+6mshOP0n>BgX?iL?$*XlCl:Zn/B@otFM:[(^U49VW6NMJlTqIr"9Tl:e@[u1Hl:uH['oEg>S]C/*%k-\qOKB"0r6bGuP&!U/$l&aZAiV6$/?9BXJ4t,H7n*^=dV\<169\0C5M3E]Q!c;\Z)r`Wu=%D;Bf?O!+D%W\t`pTeTJd6-?"nFUt%d*/D.;AOb[0MfEaE6^:@ZK5;HrO,pe\[0&Tb?_QgoRqSS!CR(N%^$fsq&=cHnF#IoVo\]sfb\K-=IM_!UhcKS/0rjfc5U[i[,\Wb%eDqunB[("lQ`rKC*Ef0a[ea`^->r<.IY>XZMZrk$M$7E9rqN_UR@iml!W$^]5gTGnDA3O!Da)5=[T47Bc9Z)%ik"oX5'*25@'s6#%%%hco10!kSBXdhH[$-%eK7Yhjh0Idd1"QU6!ppIQ\e2s/Nf]8KfHrUmD:BuLS!Q[Y[`--!!$d]?ihGmTGE-FmKR"E(d?(hR>q4IF%<YTPYJmJ`1Ch$K.8i>ba>I-!GeR.dB&SVoCY$ABNrV0Wt(n;>r:Z4M5>fof#m;lRoPd0Pt3,cdA`\sBG33iFp'dr.*gI!b.XTf`6%,H&7DB-[bML>ah@,cLp*>>guU?t+ReoAO%0lF.Y6s!5(iM=`BkhZ#n%W=-qZp\4Xjhd>fs-_N3?4ooB0RF!s1?[29+pU]fgFFbQ^%rmi7InIc1\'j=/7J=eNhi$g/P\rI?"f8W'f(kE4:\nsQ\'0C:c4.juV#ESYl'/@hR7`]TKC@<1'K<jK_\E!r-'mf132ib=j$2aL^%31]G[MOsDNHH(mKdE4@s`c/Lg'k+L.lk(5[H4'&J0PlWLd\r]+&XjDMo$OrJg/.!.(CYZaa-RDd2XI_eZ&/cnJ6P]olQbW=,9Hbs%ik_ta+:8:LK/QZGH\4a@'[NUlE;m,u=JXjTbZ90NitTYHnm,#m2pu)Wo]N--g1ci1]T6j\ik!(6<M&CuAW\hgltl4$TYUNH.K:lo%Ai]Aj^LA8>14XaTo;A',PV8mlGfFB7`*P:,QP?[0'#KF8\4rebS`V`gqhR.XUMB5MTuXh.L^3Cl*mS:"HZ0(>i5/25F,kF%ekWRR%m*JBrbVe%uG*M%6T>/+hrpHqqbD#AkNS$R71S@=Il_p*;Q(&UO-\12IBK[fS:dQ>J+9hL;Rn]:TYi@3JmhSV`il]oaW#9l)DVTnr%iui+kpNZY=H?=aYfjd.^_XeH'3.9K?jgWfN?p>@9e`9`GI#_UFpbaU+:*6L:Kn7f=mb*I'jlVV\;ZjHh5<&7'S3Fp1dL!GO8G)?6%E>2UgUCcC823.DB-'uD@p(lf#`3,j_VJ@*D_8QuH>H<R,?6np![p+feQCQbs1q[Ye2sseE,KD,)OO#/iGAJ3iDi+@q2''l/"JUaM%:1I8nFX;m-UZW63JD3FLcX#1q492a60PiW4'=@TdH!@Xq_0c]_$X1)K^8?tPg!3(NCJ^k=81f"6+@FaaB_Y\-d=9$gYd1'Q!VS*D%0V#ELO.re_<\1OMS0LF?1*sjWVGW[GUWem%iIs&*ag$V)J!#V!?A2>C^=KLo/5;&)e<2JFq0d)rhgq<i;Su69X6*lq(3X,R%j;dT%)TL2*9s*Qag28&$LKs[*)LqMqEc3WZ/k;9@$WR-fEC;JDg!39&^_'H4^/L1SR0(4E8jP'>VY%d*.>0dtdUQ-e_)\0RdiTDlrB!m)%UZU&Orp5CcbhH\HqA.dTc6q8P4r&ebgQJ#^d=k=*JB?eI`"^e0/=jE:QFn!5BY`Eof[<R-:oW,PbPm7Nhca3U+VYIQ0%&fr_S8eF%J)l#!H(R;&hWNQ:&+Si*6bNH?6i;f2&F]WZnIY0h.I[o;Ij1TUfd@D1T/Rm8X&ftF2m5F:+G&6>hBMG]_DT8GbF3V2'"8pZd/`$@%IecW2YHb)`91*df,USNMH*+3]e3339J6Aoo9!krep<\*hCtb!*Q$oI.o1rj@Sk#u.gCO2cR`7G+aP&O5JW8V.%EukA6%S`IA<qSu%M5$K`c=ZM5)hTR]ElWFOD;uu=d_c=gcouiq62r)ZpN_e`eqA3bG!U#d(?QofGdr#II/dTWEj9-_9)>auqB8cp=['c*RP)=1SHKOG%>*pbH*e_LJZbd1).9G4'MHJ8IbD**Uc'daSX8u?oo3Cn="q]hKk,$rR<ZeV0^@d"fn(qHW8^c6U@$Q2^.eo<HS_F/&(W[kB<K[G\%NN:<ILNll?L#)M.Q[.IunX:gn2EmLKD0;Vp\9i0AUSPk+7l\Y-h/uJ6<'>8973',`A%qrd%s";HYjr3<fOl\I=4'VjLm8I]\,^!Y%1DZ*;J:%B"3Y;F_%KZ2)D<fpuDE-GHdFUkb&p?"sWr?/rD.BU$fI]VCnb!KmFj@ilhVRgf[21m9G9/`iheJs:`.1't%!_dQ&paNT%,a(Xr)a\iMs+!p0qepagkW\MCaR=1*]#pc$:)QuV&U:]dmjF&R<#S+q!0\It'uuXu7ANCc\ou6?XoLe5&Ir8E-6F@G<)VaTV)1T%%%[@<tLuQR3&e:32R3$0'9&(,rHp;D(FHp0M#Rli+G)fu9NX1Xd;_dZ1*=@BdDhbVVgtZ`H]4X"?]ZPa5p]*noFE[#Xl%IG)&2;`!%1e'Zn`crQ/\1Snq5<3kk)p"T"L=[O]J2o8h_T%VmS3e"RLVWGJXaf3L_&G/sG`r148s##D?foL9QMAc!!iNR@@+]K$U^"J$+Oflp%Ld7]RF/"u?)hWYcf;tP')*p(3@C==[#/a`IVo[-lY<XQ^dMK-&ABlBa[\Zb5!Jj</DPgi`41CdQMfeB9L.1GtWChSr-jQ;TGAN!Y%knYBX:<c:rLsUEl8T=cPg=IQu$8<9S!>?*bYX^)AA(^::b);o/#nXgrFIkp&I]5f!T*AIZ0nVF(Ls&llDGa<Ijn!Yd/ot^f$J:s&%LT@e$Tf6'A6XXoq2r90.Z#5r6hj/>92f2cjQI^M5Jp+;NlC#4>UBo.fnN#2a(&?WY6_0kl`UGQDB//AN&6n/t2r^?,fsN:an!<iT%I0CAE<n/qr,hJ'l-`f4!WE#$I`s1?eV[&S65BPO?L\s'IP:flc8p7Oe^P=#,)oL\'-Ro;E2RUKd'f5S$]OjJ1^L;A1ii7q9bg!#?%E"eM2AnE5"]^#%`K'#)=+kDjU5L5W@id1U=eKX\]Sisf#TB&.^p@poN8Nm^S5<]W;&&e?pOq5M.Ijj[Ho>cY2M;DgC!2Rsd3\1j`%gh:8X_>o,]RM&L]qX!QDkr^12+!S9*;3?g`Z3L@iL)3.SD/g4#O>9:1\Vi^FRZH1fMHn)]b;sotCE_W%csYh2X'5jKeJ*BNmIip=%V02m]&X[+Uo3#Ju,AH''-76MjS@j/E"oq0`4<BK=-1""%][Dt#(jIuRipjJU3GKhGaR38]\Z*%iG3EaTJ_bkD>c!Ss,%![425JM)%0]cnC>!q@IOKB9/qCpP?6/cKi[[*bCeLfO@#\DSW!L"f>jqPEIMh:dUF,71l=TLBeI&HK&r%9d6BWZ.)e/.l-Z4>r@3Z2;Ak<38>%P$aXa!P'C`Xul;4-he?3F,SK"b,t<$%LHnToN,Y)^^DasHB!,5dg1O<HhVl_40$^JM.8eh:30hBe<c+ZCbU@!(tH+#U]J\[VI6t_%1Sa86#7h1<a<P)1^&^OV!p7uC0f_,GM2;R-$<VsqiipL+?*s4Refls.a@Of?ps%V'^er64aBO<eYt;ei-l_4=S9o'D4]kH)F9":C%IgQ21K.7!TdXWf&l%J:B1t`jQKMYkC;-Q)k\uSjhr!2_uLguu`IPVPgccp#d^G3?*4$a[IF/Hb\Nj]sJk**MqpPu:t9;.8cds^)I%Z6j=(:5o;'r<V&Ea\aPjH7r+inDI<NZV$>+Qja&[Y7k^BhjV8r$MIT"Uo[<mJc3/Sfj-Y(jA[a>QWq6BCa_$U.4a7-5jXI"hJ@5\%16Lo)@aF5UZ0Xg_d">,IGDC68CN)`34'E'$A7tKJY#SBn5(b68K$iUJ4eONUi*h-$<cC<BU/%6f7Mfg3K[1s-'4R][OqM!oUJ/O=%B,JpW,$UE)+8J7a[R.`lH3A@>-X5r`kE3D7f^*)7;CLeRO($^qjPR9-R>RmRrJfefm3(lHX#T!IIQAoCE`\e]C:)tp7&s2kPDZLV%>;<Z$gL`g->rYlGQ"ma%DN@F&?,hH,W-(:%+].%Z-QeHHhKm!1`*HMIZFDrO#D+!<%ZUh@fKFY?DF6*!%+X!uJct!-DBdGBpdDKF%Sb:J4PFQeS$iYLOZX"PkjB;T.8baVu(ugU+3TR)`W#?BAX;(.tKd6FqLVhQLTVK#jNmO9`JaR?\3%s,kb$Ern,u8"\6RJ8%3>=f5%\bkf=#eAg!(##4IcE9NAY2Le@Dj"n%Co:PYLN[.&eO^Pi*3bn=K<9\hWlm80UcY^V;3@rjZBZC+`r$uX/QhuXq5ij1)j<(U'1AX\%TV$$,^a@rB8"Gd&W4Q`gW9FmuA`PD2eOlfgUhf-GgXBQA#Iot<<p<Mka`_g8lKJ<6kBjWfqU21Y&St(m4ceB/gdS7tpkFDZ1OoQC%?IfIZS.m#paah%$F/j"<-G@8kMCY/F2T)BrT>-Z3iJ_DQ9[,/8Y88Yl/ZH3aP"_H1I,lt7fhd#VM21A0P:JX@hp_7(U2us>^#_Zj%k=5+k@q8C(CjE)UalQbiE18uSl*oFmD.!.ip/Ii)1nF@4^!=`R]=Rj=nnsb;n%A38APL@NjJLg]HMkq4gJaF?>HX2T5%IL9:6.(o%G]]p8)`rJE-UlJ9GYpM#p(cB96:fF'7(j@[FUV1A',FPP]!`N$-_$BK!((gp#<G7+Hb.UcWb'_*a%"O2o-GI-,lo>2EPe6sFs[cj%7S)%R01X<`jS"K1U,OM:`D8bXkHi@DLY93o`2;o183X>36+nLgSO#bER/4;P!]#mKBIEae$THfe'6l\C@n<_dW\Bs%pD,3l/ms5T%Rmu5sPAY\fV;iNCM,,V(#=9+HnlgIbSkItd;fj`f]Jir+cSn"eG'>+pn8+ap"G04n6!7*\4Y7;mQU=-K@.MJarG0l_IRqlDC:9!K%X?f*hVWo-ukLhL_N]Xb:`r&PG$c&9l:(tX/np+A\Has>+hG5]s@p&<(\f(+K(U(>JH/1]b]H1'ZO".>'Q.MeRlaNk+SiuAF5$X`Q%rc9#eSqS*L;R!oc'^QnFqa\L%;6YNallQE.8&>2h+22._m*X,Ma)'pap;a=gH2eDkR/6.[7M5:lo,D[TeG05*^1RsYq<gJUQ1#CI%*5.Kh+GL;cQNf!uZOZ!XSe<-'G$9E62D^m6@'#8/()WC!RL)tn^lp$p*AneW-V<7`dp"&B\kA@QI4bgl(1PI*X&ICe.3npLNLV_>%qQs+'98?]dG&[aA]-^n488ns(UK'L);(B^jg6JEgTJ10ZJ?A?)fi>;/q%1nFo(`T55rVqM^g+j?X=pSa\ADjL#EpE<N&noMUme+&%#<"U1g?I\S,HGDsb%ii2JfU+\GMYWh=bTm7OV*'"BZ6@X/WLoKX"A-lZCQ)#HFt=l,k-q9k`]Z(NN:<`DW7Eh&j5$,`uFQhE[./+%o7Sk]`1qg/LE=*B%qUL*lKc;%8k&227`IHlO`,H=6u(8;j>tcg&Oa8#n7FM3<O(#^<$>Jf+giis2I_[]F+[75k(^V#.!-`ll9[.P%/&+RkP<F1s]]13q"1=bQ)/*Pj!R#Z3;<'XlMLfrj7r56c:9(WQ(DEJX*/0g!0f:;41Y?m0@>)qec[WXmFqU`pAs5TNA!gBDUO]os%`h0=?;$u[sSs%4m.noJfCeIr5@5p>V@`AcZ&'GI%4XhH:?*h1J.1?hZZ7-eh@30\e5fH)AebLsnH_p/!$[,'H2>-.Q"/3g0Y)k)<%UNd&.F9Zj3"AL;1DJ'%j#e(g7rG?R*'O?CZjG_]ZK2O!&=@AH+^=JRLHNZZSAh?Aq(5bLnV4`e4`5g#`/(e=@P+uUi/W9)FTSa7V%!/aKgB0\t2XV)B]_'%!FF+EMZ@>VeqY8M+SFoBYS,1NZ,LeO^IrC+$K11Z%_jL1h$A)XA+egt6BgV.^WDbno+Zj,NqMPO"s,AR=$%!>*,Nn9$jD3%UbUChC8^JN-:P!"3;p/T[?*ht;.m[1dPH9Zq6rM6u@'IQ[gTZfZ1_.=Ae)O14cOQMs+`V=-Wh0)mRaQflUEE_tR"%o8T^2iA(lo/=ICgX^[Q]Zdp;=f*r[[E#&4=m*F1=0r_DK\4n$I)o,bC[:B;E\4",'Vs;,q5eqUk5\"'^Me7(WJ4`K:fg<.`Zr7:\%Q!#H=P+Aa3$a!]H8F:5)BEa4i-WXEUD0;Ai>$YBbhN3X#bY!5M0%%FMm_T$],bC9T9X-BR?T'qf/J5UNG%Pqg4095EGb_!PV;W=n%WJOE<*"1=BT/[l7;FUEsh^C^T+hBG'W-4jK373XfW9LcbX'EB%7qQ[?L9hda$>61m?U;55+Ukf)1J,QnB^mMe,)K2B*K504SmYK^%k;r6)nP[3*JIbXZ&$K28pMb</r(ue1jQC#ORi:7?g-2[%/^`A)lp^/i%'?P5O^9A.,E)."T/*YT-`grBpIeUU7rH5ubHn$4$"(Zn%To#VSd41Y+W3KL#^7[`2]AInl``j)J.gLq.FFXB;4?@@)=0EVphTC+[1p#IOaD(EmUal`L?VmCs8-?god,'\%#OF4alU+ZN;t"Y\%&kRS-%]?L'4s`-3hZMs4XW*i.]g;E5A/8jGAo&g98KE]e7\7R;oTX8oZAjVVR))u1F,%I$U[,c!k.:YrLo<*]F;:cmh9-A)qFs6F%SJt[U+j#IJqP5D1c8J"5-ENn=WhQZ0\t]T>)S;t1gU`\g)$dM$)BSLP5%q5*/D_4U(GMI8fl$_)Kb)oV'Cf@C9,`PTCT>M<*%\s-%Zc&cV&EhR.Oa\upo#uG0p;k9jR<KSRko;Uu$FVaC0K)M#]!JEDWV,ncphctY\5IShiG>mt>s-pK<[u-1/Y+--2St9N:Np]uQ@*BT%]1([uZuaN*jN;#,glC;ZDrU>*btTSud@@PK]Yn]o$Ss-Xa3$Sk;!tTY`]h0LQTr;EV?jsV`9dBnJj_+0rjEB'-5c=!g$tDRg!-0I%:[Xd\=JM9BBo%$fC%^eTH]XUt-K(r4r`31oOfNfhWZJ^N5?4lOg$bQPH1p#5fs=1DjcNL;F6-AmrOMMGmsbDDk;cO5Xg1(3`9]=G%13S^f>C9@aAFMLq6VEYVh]g?<&3fQ@T(7e?e>G1:/;X>1X(TFQ6p`o7E9L"b.pr*=:Kbl<kHF4`"[X_0ORqR6JHFUiMZAC8f8nFP%^0L&#%]COmA>^c#4"_F/+e*'%F-UtaY/Q1G6Q`mBE&8eSXZ8=O"@FMHIkGP6>6D`iEc+X98u)YbK/=2rZVnJEPPBWSJm`O\DPpe^%.t%U&,@pr#\,EVMMbhGKhn5e-$F($kP;$p;AUq]TGN@9_%RF-R',LQR$Qat9]-X>XlgZK7+lWI5&E55jI(,*A.!nA0TiNjb8-tV^%J=O;'JRWTCYk'Kh;Soii@e+9>Sm<uf6DW2"=gV+1SsZXbCX.sWU!m&"IGMaP`E.pn.SW?DQ:`7dE-21l8Um"=,mL/H1-YM_fh<r+%Y\#Rlls+B>cNomm1`#Tr1QHCmb'-mt\S.n1J^f9s?A9_Jb>$qm+IFiQn2jjl/cqEH9F)6t<uB>"HGJ`Ki1m#=Fl-EoT_WGhrW:;(%B(-6J2qmZH?e8T'+,WT((AB4`T<Mj-n>F=H@R3N>!0?a<CIf4lN`/#m([TEn`IVgI4mQ2.$_N;CD7^'OYDF%[XJZ/b0E@/0h@sV+%H;E*ni_lZZp=*j<9o0UDA;4Tj=XC%#N.r@S)i.OT3?oQVi%Sc1GWr-D[1bLJ!//'k2G1t7kI)u6$=%IA2.0n=<^`YQ"Li\='@[Im%SFPS+Df`NM"pACHIkLOBZ]=kWS_^k*Q?E`a%pP"NG]U`DMq]DhBp+mk.l1ud%W@Oj'X00,-h?n5D"0E?8:qN-E6hfC`MQcV\l.:3%KYnLYf'=D2>FT@S'qS-,<-TgQ]]PPAksTp7N0NsR&]YRN>L\;oZ`$Z4O@QT"43:,&,p#KY00soNhuoq_EVH=(#[%BWi^\koXF-N]%<#Z_CRh!7IpA,NWP&4YN5S)^aimXA$(ukE'mSTfnV%(O577]c3f$uYTEh#8\)C=7>s!,%B8u9]V#Co_t&Q)8rSGj,58sO5M[iBsV%*mfi'n`4Th[mM1eb4D+JV)Tu=A;Vq$'kC]r<M(&$I0r+Y;+sk,N2kkbg6%l8-J:W%RPAarLeX%k+R;:#dU*,VYC&dWeUd7pe`I5B%R%mo]p&n7J/u")e6W6PadsLR,9%W[PfYgg$*cFo`cX<1FDc'p]BD[cQ-tK-iR0a%Tm+uf-7@Q,^>9mg97#Gn'9*!F5Ma&^-43\4k%mabWqPKOa3O6B88YjcjS<qN(q=)n\W;Wj@_42S]G5;E[5mOLDIVJeh?AeEXL2O/u'Chh7Vm"+?=oC5T85%9l3fuSf4X$M_14iBLI%iQVaS_OS920HJ&WLiFrMYVjoDOhr)Hfe,$*X,2pU5Q2SC.4bk9Dnqf_Tr+V>*Z@=ErjnB-KIa`iY@'Q)ddp*Z[AE%CRO$W'=)aE;%VaS70c`Z3SY)_IWk%nY_i^U+O'1odHP)h%:2eh@[>/A-j7d2)%5't-PRrJgH?0Gp]fo_K++=BCDHs!&_p$%0HO)GJ]9CQRmZP'"*%jfYgf7(F:2`JI%k7anh>i5lTU<<O`O2E5NS9Jeo?$rIFPdP=pdS"Fk\)n`PB/7XK"8Zt82Kgc*k:/i5W@VQ]J#['n;m2T%9Z/f7u%[.8o:(JioZ?lfrrSBj=Y9O0FQ*u5#e6RlB(oL/)b.Nb-*oun7m$mAbonk^_QCf2=lhB==Th"\U)>enG<mCTaidZPgTh/s?9[%m&j%l3@t*rJCX\eZ*/@IE9PE1;:S0?a9oT\<Bb)AgHsW[!&<^fu(3-0K2oV6b5);d\=gn.JrQ%Af.AGZbfbJ#S"#7O;@4]3UhQg_?4Os%Ap-W1DJ/47Ds@36n=kAr,DG9>SCtt74.BcDZ,Zc[@d6j4$!9_-P!Cp2[.Gu_SI.0SI["^=QGpOeA8r\ogd`.SOi;`ZE?A?=7i(i]%`I29:s7BFKB91'98)r3rna"Ttok=:"ZS[,V^<&lPR6N$*R:h!X$E*V#Z(BEIkBYmtPd=g?nfd1j%rjpV9UJr^`f,=%lOOGW9/%eQ%ZsE&sW_&QhgsXK8oGTfP&cAM,k!]A_Tp2]af"tEDaG<RB"n:mp?Y2t(NBR.cZ,c7?I:O7egYKLA;r,.M8]$(\H^54ch3LTXf)6Ym%>F+>L%`WW%8]+F9/dA?g6B"IrEIPK;&UpnDRq7F(*uR:+'OjdT=(U;@CKA7,W]tH6NBEbR*^qR_bUZ7h=X-;57kFfcpWq+76=l.h%6ODJ`-$Won0q'NoHD:tKXQe6J0pOL<`+&gIlZn.CSWfJ?'4L;;1g,4DXUqYUMD-6j/'AuKjU89(*2F,=?8KFXiCVk,>V,X/31Pr8%F=f[)XgQ70Dp]N4s"/;k*j"Ji7@b<RZC&6U6E"2$>,[0BH:UV/B-WI=!GfVtIaO9C"fopN@2*%WHM]FIm<@I9TpqJ3n?'R]&$!2l%,:!le?pSNQq2BJjNJV1mStZm['-f)C-N1IuXP<$&j&@)a_^!fbeLHc/88K?2%t3UFN3%/kK-#"m%d*/sNJL,UiQ&?;lJ$sAOFb:V%FH:C;D9\8^`1!gPrq@3-J+7C+P>sF:WG!b=;?nV9C2:?^9U0AWI1J7,+Jp`sFeCO,k8)#Ld#;no"me9>p*4BQ6%%O7J097cH%2Vs%O7_b#IQc,_rs&>m4RCV#,4cLs:>4^%l'A_JG)q9oHA$lsF"t_aMc2:O7+Fa^W-m6eUu/Dr5[!Hj9GZkYPop`U7qBV.6<rt3&]oXi%TEP=3'>t&`kXqe3g*j1/!a?/'Y`*k`BE\E1HA7EaTnpbr\P2"):T_;u7)3%4^5]co0l$@3k7J+aAl*jnVFV@=SJ^FG'[(EoHA(Kj%PA<n8GfnZ0Hm@/G2UePXK)VO9DojGELZ4m$1b\,hm5\1WTS1e'IT,QqA'gNqgdb91,]"aoLpWD4H?RUU$&Tg;]b/5V!uE<4J8"=d%Ym80QnLd@.GRQ`F)-Mm1h1[P^@2@#I(kESd1ULkLYjYGANcnhKUpeK&F7j4e`O</%;>Z:\:0X+[m!((Z;cjDJf?6^[A`o?fMJWWW%`=^\.-`p(\M=ao.XGklB>1:R8m=f::5P7Iq0INM2:N_KE=udA=__p352/?uraVSi,9=ntBH!IJKrL\7R,T73J3Qiip1bS.=NH\j-%?*NO#LZIj>8hrkbe*4_.f_C9LN*M&f>r2phe4413-D'Z,f'jgenc;+?"\Pn_L&/\blTS5.8#lJXPom!rT-[Kdp4*eQraB"/5Zm>"%aRL@@gIYFqM"Eq,6p..8^$X-N>RRV&XH7a5iO]lJlY@#.H'N%!g>a_cgDJ/3obhAHj=@mg$rU1TDp8W6CLO?*[>#iJ/VCWk)NGhO%kG-U!hQ[jB+1'O\h&YWQ[FRn9M,n3NQdcG=2bPq5fW+`_PBkP^T2s8JJo0G2`N"lEX<l^]Hta<R<]J&,mLm^<!2_VQ(@G@!#\6-n%C*64\`d=1[M=_O5R?30kLn^s*BE9?31)TWnlUi8H<OOQ5Yd[)?LXkgrJ(ZsW"$h7+'-eQM#tmH[c1HfkO%=DM<6q<K=F5$pjlkmG%,5BV<2I$r<>WWV2U)i.N[<L4PX_XlEJ9\f$&fg!o=S30kplqmjjgT<CiS#iuFNT5=G(K(u\"QMHiB.I7j'.B'D;D.e_:_bV[6d/>%m$o;#oX]DB*'<9cJ^%Lo']k$@f(]=DP1Xa#9,o`2qm7D!j",/X1guo[nLdMOK?GLA+qf1g2RbBXQ^-8j^n_]N2r\5BU96"D[:MXt%[Lh$-a\!F;E1G<lgeamfV"eUqoS>kajuE!<B&;ik4K"1<Xpq8NA3/c`Nqa,&A3N=>T<S(kA:IuI+(a5QZ*Sm3"n)&hmN5X17rkl`%nfQM[[iT5X+`-ZNlu'\Ga+jl5b-lO%8Ja3p@f`%4%kfh^dZf_;c2&KX_H2QPkBV/KC#sKp=b3nt;;^fp':@,4736IS]:WNj9"CZ]%0Ws)"[k[p:hX5'&5Jc9Lji,\&2OKY)6Xp3RJ=D9o@^T[()C6]7i8&`QAciESpb]"uUR<:V.!n^W.F(CkV-uW*)@2p;3$o<pO*'Xl%EO2WqIWkERg,;\e)cI-sY!PIJQ,X&hPne_uZ28(`T(@/Eb5hWl$!Q\D/UP,<U=gd71)S7?<BQVA!^mmSVRo69=IY%pg>Y\TLE]8N%52GMCg/5aOf+.*$O$e7`Dr,q2=\J+V$+X>:G1[1l=$KgXDr#)ml::WN`aJp,1uRNg]-#L>e(tH`2]WfK@;f!"\(h@WJ`q>BGU=f^%8(b_o'=>dQZ,9")qb9iC0#O&^i8@4^ObT]`!u36nX;O0ZS/92c!9X!t10c=c-AUBn/8NhZ'4g[ti=F'L?n:&@7g;@bm0G+2!)nk,%R%/A92kh!H@X2cd9+B!bUTBJ0i(Bp^UkLb)7g5lW@<M`h^Gf>Pp'6LQXWF!fHU%R89K=Peg_BOcMHC7?S,pCH)DE>6-GQcM0468i%WcYEX[Y5=$+&V2_+L0O\QEb(+=>PqsC1n:`0N2E+^^83]\5rc4NCconI&^qEW+E[^%Ye>/e1LuDBth4:p^>U"HSWC][)6[tH$SgT%<]MljC^.8&+VGJe-gG6iEcuD@PN,]ph0#G:j,i2"ms'Qc.j;M<`2G0n^O=-P#_K-aB(5pt-5R-<giEIf$E6i6V.]jakb_%9)U'-.%ORT#i"PP8$-f0GACnYY,cp9A2_M--2FJW&P/o%5TZ=0_oS[4]hpKjQ!q^C&jj?deE]bO8J%ZO^a]tWdbNImhk;iPrk:?b=Rd@WE4%#+7f-`HN.Q.>^!U:>bZcO6/W]^c2dsRW8*Z._ei\^p&\.)=ChZO3jGda"7e!+/-i]Jg>O=\9T%ViFL.p6b(_,N!`t(]c0=dmHsCD%?*3,bFoiRUbs5];7s0&k4+7Z"<(\Gm:gJ!9n%/;#1:k?B'`0j$"lKuP,,oEPKm<4$21qh<+$H!77'r@/H<::QUV)umGta>8L\%gH%?\Dh_ZeH^d%Q5M<;ibsGHTi-S`*bN<C8CrAR))0i]Ph<T*`f;6J_9"(@7<r=:*Ee=>9j^O4^u(.70NZI%C-S_2kd,-Vmq77'Vg$7%0-V\^+35&L>?O7a)>9-c@5(/r@SP&_grR;M'k7demb_Wa,n%o*.uYU^XFod7>GaY&QI*:;I90B)Jdhpj$BMHu6D=0k0W`IajGqsN%N\6Vpr;Pj='34lYaN,V1f6FF6f=$mZ(qZ`fg;o?W-3:Z_=Ag4L7gg>?+&Q].oO30T<3LT@e)%uY[<e58frPG0qtb=oAX>**kr8\o%JR3+:6O9'(-"T1%AP;])VgM?>R&HTc]#-,3&]>g?DO&;AgM8'8YVGO>&sYRH7iHD?%>_"h(AB-C"CPOV'Znk842q"$*%sA^SSHoC%fp+b0mA[FBBkGl<@[OE^j`"bGP`6P__dCYR[\;plBKB.KV3Fmp*u(q'LoF1^]F(nj]8:3rK/b5jg'"dWMKtS^JjuR+X5`%<)d57s%eGG[I!lE7mV=6':XO;q-7W*sZ)o)$=HK60"=n>*#L7`7&L?grj^(WoM)bC]@+W6)bOt.QCe38;=e.h'<BnPHNU,W.rnBQA*&S,MX%/AS.^HuDfJ7#nUEA#7uQet#D0!Kf?\3+L]59aQ,iJ''s,<F9qnkm5Q9H7E8Q/FU4lLSodEVWt,<#AIXB+&Z#h0(O-!d&h+oZ[eR^%;a74AlZa&%j'9Njp0d@4ijkBP8Oc^_*.d@_m\]RKlRGGO_QJ9+4*"6'DZ'n57H.VB08lme3a=gr4m:-d^[>#NA)1q!2?@kRX7!&Q%O-B[4C1W>V!8_uq\&ib?n[*mm*:P*F?*iJfWlnA"\j)!K25Eg2h-IlK_19'V*V:ju/c[o<<HoR]:akcYbJ9I(GZUb'HOE[S`oO05%IJ0dX$9$a^E9S@M%Xguo!V=QAS@#SJg;5^5s!e2J[_H?"nQ'Z2Rhtg57(R(59m!19e6#pHc*_7bkk,QWNLaPBLUOMjZtoNN!qNK6%nHk&B'i@g<o_5XBga,D'&C!d0#*!SP'j"?f'"eA3,l)j]m8<&`2PTcr[JDJs]6*Uo3JltlfYHOL(T"Z\1[("YU76AaZEgNO-D',+%q@9Wl]RZ;g5))1<lR]jWR?P4RA7<P/lA,0,Kbo3im0ct'/48'9,Sct1-iGbbFr]HjfiB=cL2`9(C->ZQ!`qij(d>Mp\!ZW1MTL<m%$i+j/aCsorfd$W;8RAgh<o;@:ihZ06f6m&'5Pqo5LdV+TG=rjXXld<]@<HYCA)OTdRuO,+4oK9L6+I!Z:RrL6D;\(-S$<+2,Mo:>%]$6Aq+#k+(95b2[5JBWb;.LDkM:Lo\]4'G&S$)3'Y1l\]-+#1A<8k-WHok_jqoK'kM*BPqVf5ok1fO`\?Xic\@%H;p-/o-UN!rq=%D(O3In.ZO]JEALsBYL:FVKYr!-2m'iM]Ml\%n`bCfss=UN9NE2gP,2_SD.j1gMu:t%%g$O_H.&@#HMHd7/e?GjR/WmHp1`<NOcOM%"A`jZKq??L'Il':4h#qPTCT-dA7UCH>oNs@M0F(qia,6US5.bVp3hf[fL4luOYAg:JRaUg(:'#b;ArqBk=0eJ\osqclTI4QK6]QG%b>'G$hQg02[`ECm;<CcG\U"pJ8An*$4R:S)=Wrj[JsS&Z-`IGVC*5ku.&f>[6*Fj:).9\L<E>AEFq.?FRSkgJ=9\,122/S>7ih`k%_+@fsAS>d_N';uA`<sa'5-0pF(HnK]ROJP-8IV[3d)&hrjJFro0.q"<eg?.-nqi`OBoVirC,n'CEE=_>f!rBA<gKRbIp(j3Z"!,h%1F-<0'M=pSo`K^4T6S/bGU:BJ7UUkWm)%V=(O/Z\qDKW!Cft;eYOpO)c>"NNTJnWQA!\a3"Drt<SS6R;>$(:*UM83iDs3kgaL%R?%5/l);i`ZOl=r"-e]81<(/+Q.Z+TlIRh]j?P^:Y\oqN.A["b4/QP3"%C7bYCBAer!f^8X8/m!`WC6d/"]U;7K&*]3YBNf2^p0Fm;k%Hs?F6P&YcI/(BpT=N1LrU?s0?m/DA`TfuC7;EM=G*oe]W,KjV5LisJd<-]L[G%;&QK3kZ&g-j\.[KB8-S9_lYp$[39,CF6%<b`g#%IQiH$4-0f!EjlIQo)gXK`_3"=(f758Kri7qY\[)C-R!tLR6BOnWK7iK0370b=SVC\:"^tBZosTM"=c87c5S2g%>Se-1FIrB=kCFD%)q*F]moet&VbDHRR,8I1qb2/inN`E!V&5cWAjs/o`Rd6ffek3EZt#(R>TgVZ1Zd77Rm?":,j7dK\hh0[.B]!+lo%Q_@'0_tWlT+u%k:`Q@/aTB+s$n6%?Wmdu=Btu[hG)0#D1h0X]9$p"o]]'#&jf.QIj(eEXuA=q&U!7pVX=R\<koZ47G'AAj.$p4/aj-XX1^X8+g&r!%qc0o6UUHe1aS-LamD8LP8%%,uS)M]I81Xi)W^XtN,udFd%X5`EeZI6E)7>/B/"CElgkR#1ls7u-)H"5!FgVl%YJd4Q&0lAn:<FLO%>$<tu)N%&2eoLu+P?LG392p0P(-4\.YZt:NrA`6?PK^b;c\np<ej`R-Aikj:$s2QpUo%2BrMLPJA2QV9_I0/EYBqPt<FInAe)\1k%*'D+MmK,aH@2?<J>t<rmK2TSpF7"<(.i@`,^^&8Eb/0_kDrJDti5CpBf.)DCJo-e<oS$A7h-BC<:q<ts@KdmFGo=:Y1.RbAKP`Js%L!dtTac$a?pnE:WE]+c*B>'#Q>13ESN.p\.7WPnRVcUY;`"^TTemI;EQf,$S*;?>1EQM^K'IJ?u/8^0P&H]tVNI8Q;)W_cN8<)8h%6FMk1BK%\LJ8K@qB)iFT#`.sC2]-h2r&0o,C(B;;ig5T77lDWt:5t;VdK*-"Zi,E4c^!Qj-TuJM]BLVIHXmqdB=N>jWL)+Fq:7l+%fjbf3ar\kKVJedmlR@A7:$l\sTX*)+gg;TqL"r.<ng2Z[0:%*+0RLS#P4L2o$e,k@2/ValBqZrT:?NJt&FC+'aoU'E=f?aQ_ZG+_%O@-<HnXT3a&!o>T#eTT(`7-;sFDWSF#hPU]V2$c1mJPI\Ei>]PXbR(s7`SQR7kf$9F>eDfJ_`]FJo!Zu<3kN.N,LP8_J*)2QkY/<%&W-bDm5GmVU_rWEN5Xpd29M'\*Ya5S8o#<S@"8EDd%dMK])Wu!58I>3!G=<=A.rg;#V<>X\(9V#;1rU7"M$jk.Tdb2qGb-pFa?[l%C#eY^<'`D!"]ApfNK&N5/D$#b@X$peF#1NHS$JpZOhhhf0:/,lfsD5YdT\'[E6f-Cl:hTo9B`m@(BUIGLCBP,j85!m?UOm[4*If1%ls3V"Zb#8d,TXR4Tt=3^c6K9&kHoIJNuaS5e;RHQ>;KSsa9R;<?(]rqN,-^Y>f%Jg>3[ZM7qAuc1GOtgUm<GP3_^5XD^F*'KK1"%%%`tJV#obRH%8E?K82JI)JcN?'eZ#SQ`)XXEjf=laDH,1a+)gmVPG$\+I)e<iqgfGP)!m1%8BTc5;$,"FN"(.JDD&FihRtB%]Yg"l%*?5.u0!Ok#j$oi!C8bF"c_-G@g+"YR[eD->HOAAWhC9<5B8sd7*U3aiKohNc`Cu][n!I#)<6Z^P`MK7./2S&n(Zh$L+C7?WO%S<$%W1uCP-KQ=0c@*mjg;UZ5h32I^*70+KB<h,O_h!9SV8&5f8$3r&_!slRErrF!b!./QUBZ@!2gY0tr,EhCJJVE9Jt0uI9;0gG;qd2Y%*H:In,`[6Y=%Y`End]4RkFg;gB.P=fRee;_6j\!,2L7iZ%#AYulFb&\Y'"5gjsAHNaGg0,`Gd&p_i8@;%n:N#EsHNL`ORK?)UC5T%2,f'CA%k*sBhQHO=X>kH.@>BnqVeq/VI'Xc7g)r06KnVr/1DQT8oU91J*N_LXsjX<[6ZUR:U3kb_Mku+(,"g5NRLRapp('!X1H2c%UrB[?`:Q5t4T.]ae!;CfIZ&S=@:TPc0=4EX8?]%N`O2^07@"ssb%7*rGd27h1>_:gf."IOfU,[i,7PoPO-M2CPVUe7n67/R2)[ut%T!G@MGnLP=^2\N]QB_q939Dp21MR1:JYHGkmdEZ<q0Z_!`6kWgo=ANk&VY!ORnuN@!K.R1Nm,eV'_PMeZt+G=haHlmD3'tkPk8dS%i&ULQZJ\)0V>"8V_Q(nT)hf49kKCNR0Ltu-NemQ='.*Q",oFeZ"*oGB.VYek$_kf]8Hh'2E_/URaTlZU38Ekbjeh%pLi-U[GSZ]t%;`bX"kFe;^3AN]O-u3<nChUUiN29S]AtcVNauI"5q;a2t6tEm;<rV3HE<[5RH$Jj%9@k:d4$4<q*p\uF\?K!sLnA.^P`#ruW0p2r%P,uVp<Ks<r'@(<IQ\\ru`RuOK8S,C]atTGo0NBFdf18a>=bO3/(HEKMV09&K]\HYJ,$b?Wj7/0t\eCHYSH^Zc7j:jWntFG99A0I%%-6DNu!u!k#]4U-L[>=$,GQjD)-goZ?1Q#_i3+.3`S4p^ZQOAIh+r#R$]\Xs/rq9(^b(IW:?9M't:'Vk+$r9?\YCl!=QG_HP7bMZ%%EGj\)6&IVH*Q=7imPlK/Xmg7P=C_qt=l#9**5TrHln\%]S*"TrVEXG)]u:FAKj$7cq+q.S-$&R/oQ[6n9GJ"A[OlWSMSB.Ld^l:T%2I&""^Y7NWQP\dYgV]e%Jr+CYji'jQV6LNu_S!J4Z^lHO1TH\u<@.UYEQen"Xq9+Q&GD!g*$oN2<BIJ#b7o4^'8(ppOP&r@Z.j<M%M48!iB=s=#3M'<ujAT$LB'^BkUIlCqZ0bk$G$d6&dG.o?Z8=="'G8KVOYg7cPWiE92"iB)]<##sVC1"GA<,<KLj*hr\n@XdP1um9%USNEL?neaL6$m\>J=DKgmTX;1/%g/V.t5@*HAotNi/"[IOh?`$'f*0]5[JSJ;m&9s0NeB!U1,`_,Ki;#iR&:WQuY,%AjJ`D'[oaU%m#jsLTacp0$sCTMML$gNejAUMV_TfXjn@]8.Gr8,O*4s'<+>$51A?W*R2uL!q^h_<IKo(UfsBKGabWh/J2tb(7kfQU`f^SJO>]`;%YA]goH7bO:EHT*7SJ"gQPU+g3&!277fR_C]lo_Jq#VUB9W05"]X&&9:Bd2OD8h*>kPn^Q@\ac]F&HtFME'/QS=(NIVG/U"Spm?<"%O+7pf?Gi0KqAqkT3ormIo;^5GQK?Lsq)(_37`'s^On[BH'TehH'N*AQ!dR.0DF48iascP?CQg!\7]l&W*GtX.C;,BH"(Vr"$r"nU%V+WbPFZme<g+N\_Br$!M9+PF8)tZi[+_-?Lnt#,EW61"m'FGD6o/><>3F+ALI8VC3rY2ml2IL(aoA$gG=?-s=#bcsRG5)m$gE!qB%bf-.'^^0BhA]Mr1MPHs?CT<)>G3$E5!fJXSY88t`-:)=k^qVCRBIJ3[21G:[q-I?::NE[;`6[]e+IYc8[nOZ.,WToL**'V6.0YrH%eH9M0B.M)Q]J`jFI'KF?Y*:FH$<^SU$#A[Nh&+9kQ.()GpLQr>"k]^+:3!J%-[AJh[CKNP:u!RfhSJ9kQX\tKUp:ra<$4fe_T9=$%+.:3[WqOI:b]8L[kpd('`cs"iDPUDSUD*\iEY4VH%aWhY28tjd]bh`?qY4^4HgKL)$sck@Tk,]%K]ingR4M@B%/GUd-r7X8odDm<%YFQsKdqbj;*5\=*$4K4)a>.ItOEdNj$=:?shjU`SdC/ii];E@=7WAU9.;uXLp?N@cCa0iN_5_kg$Wg=T%2'#c&Za'\9e]#A6Io.^%O=2,JVN_.l"@5TqL0rck`;(PMR?m\#e&tu3Lh2uQJ5[@\$QDWoF8A7n7@//g3h5;gn5_BjL^1neX3s='R8E9!,3)1*:;6]C<D8PZ%o.!9)1GP:qB@C(#f#V*EM;E-Yn_QnM\M>:BR9g&PRB,(.4XU\h!Lq#-W;eKh/%(,58,LB-=r=CaTtj=YNcbl',I0:SJupJ$9@[l%%`G"mi0Mg1>red``frc2kJ/G(NYR$3Bo^,*:Pc'#a1YY<+6k\W0Ts>@YR[;r<(hWu&MQp=.?aFCBL;J09#Xd#I.1Q_p<t)(`AB.*4%F/rAW4RTC2\P=o$=dW!34]GT<'PgWnH&0,1]eCfUQ_KP\<:sH&_;rMr06b..0nN&^/p+6dk4'laOV3<m16IgS$(i-';O1!FTtKFV%WAIVB%o>UW[ul"p25IlNG.n+&T(sC_(f3q!ekOfX2+#J(Oo\-Khn>EG"\>FtqQrb(JUUb`l;e@6D_P5r5gA%:DH#DrB+Ne&q[$:i%#(enX:T:-6Y>ZHJdZGBQ*1lXUC/Y/q\^m\-luAJO2sfo="[?hJL4VA,M0i/aHcFsY2c!puHArIO&S1"Vi$2quM<qf/rTE0=^UN,U%6X^fg>ie\dQC02C$*DE,j:3#[0i]:]%oVd/=s@BFcm)@dNNAu9\hLZ8Hr.23_D8-AM'XVC)Dq&!.NA>VH?+l5Hna\KDCb+S^jqq2%W+qbOAB5>bOXloK;@%",/6&glJBJ_B>)2Y]V*2Ao<W[Bj9#b3Ke_:AC,UQuX&$*/_'2fS0NWNq@9Jc#/FsBku2jg@)1cT#r9$^2Q%&mYiM=(+#CA@cel*@9=2CsO>oY(634`Zt^i:eYN$V/at=hj_a0'+f@jKZJDY3U'5sAK.Y*#+2;3gTt(7@K9]Kb%WJCQWCTT;YgQQ%EA$j#$g"7@%4LQRgEu@rALlM%mroM/*`V5"JS2t4E2B!>IFsPO]Bfjgk)<OeqY1?\iDR9W[Pbf>AP`$[_le9.YidKRO7W@%K1mLR%q&PAY19WI$kAb.28K%.G2:nTA[eQN3@E.acPEONh-"u'=1<\)Sdaf^]qkU]*>d9tM0WN,$-;KSgK!AQFf3#QGem1(k?#LW94>n%!%O4R!Ya$)Y8@DJee[$b\D%`Wl!0^C:#8#A4OdOmR[Y[kl05D,u?H!!XF9>=F<_eHqf41\nF;87d<;'qm)g_#""G>Aq.fqorUL$[)a%AH^ZO'h\&n6'YjLhY*0ZLFS^f>44pK^@h[R9t1^H'6AqjO&"kJg/E(?2\H!&M*#QtjsHc>.WKTCJ\Tkh]+&91WJn>FK;l<2I$4bU%UBI/OZhM\l_89QD*l*S,0X:hH\1GiCak+V3X"_4KR&MdO.6ll)h(26G!o$Xu$9C)7eLI*kSPpV#\d;`YG=a-a.F>bj5C^=8<5pbd%;SC)W.CWNaZqBolp;,t\]FPN1I-pfsJF>md;p+K'Od>35a-:QtrqP4q80.^%5G*2jpH#5!K=K+CG^IAp[?V&.[QUZgHOd1j3J\j2%H$Y^@3TVLac?d^.&tX[Y$'7&okm:Wfq?s=[o`-)Ni3gjPr1i]P=DZ3Ae>J7'/As_uVK/]+7ku2E>"#2AU10pl+-iih/(r!7[DK<G%@gejVc+]T&45:hu)/d[Yk<@'??nN%*;3d9Aa..>hJOG5L7:3j;krEi08Y#ZViG_u1r54H91ThJ'A0+]0+A[ukIWh/lVS%4UjOA8<%Kji^Gb\".1(f4A.#1@+&*nO&motsGD1WqA4Ju<?54bFOido7K=O&!;9*F'%chc86p*idmK0W&cka?_kgE/GPrn0PsV[uK?+n0:uf%X/=g?n9]6NT&N='U87G(kh$M8e:X0ni6B7*"eI:qpl)b1INTdl;NDY-[iU*b2qql4Vhu2E9TRi;KD@`nd>6N[ha-#k-!17/>5Jk(%Ga#Y@Ve9o>)SqDiK@U;_C<ERZ(]uVQQq>5QgY+P$W'JX#U*1_h<kk,._M!YDWJDaZd58^@R6Zqol0`Q3l1:@]\W(m(,5MonI@bR3%F%%uUaWQurWAQ.EGS\B)&]$Wd<e)H*]')X0)(Y9(T8k%g[]bb2nQ\Wd[S>VLjof6$1;[r4\E21l6OYDGF3E_\.1P#B6_N[3(9Z(V%SK``i8sn)%F@'XuHV0BU^\%TJ)X0Xu)tS"674(*WP,_[KIGH]u5Zj^=7E:SPWd5`GN#g#A^((ElNZ=%D!Qr5(6%SB*k??-`.cN>=%'!#qd=mYuKYMP?KfqoHB=(r'+<lcu_l/g<[dS`39-#0,f@T0FsRXq2Bfdu9Jrk`o&GHP:J^Op*F&PsB+Pb!Mu>WX*u]@Z>h<%X*;%r#/fL,hom@7)S`_e&GdRjSudm^u/g+afDro.o]ncTW*BV+@4<((I\JW'HO3f>f/RE-q7ZS1hi=?&.u@m!T&c38*D/A_:1#P<hP7T%"gXlk<L2,_5VL_$"UJ=7+BQ6Tbr$5R:TNijVm/Y`U</fEY5c[f3.P4+b_9CN$$f\pAJQt)ja9I(,'5%Nd^6+?CSc!^RK6(t#6K%;%U1=rCZAskG@>7>6&e(r9O;iMAg'kY",&-e1VfC>J,Ph%&[ftiK=OTj3$-1I>h\c19%WZDpHpbo1aK":c04Z`bKV>f[>QpN;b7m<e%LR,=>8uA*HJL%`h8X9D#f[\_<BfEFVKhjG/p-'@<^_G]n2B=G9,eG00$(q+aX&E+YEYFMpn826m%()/[WWcHR9pFX6OP>ZM0(Q^3%;pJ;WG:WH"?S36SZf4>5G1Z98;mCP[=PEoQpDR'A`]4JP>.UUj)WMPSl0%GG^Ms2@9RMK'8]$#d4e;!cmssbMHT9TMJ!u][hmq6"%`ii%:.^[.gFQ-Zh.%P@CbJC6=915WF61f/s*WCG.YNShH5Y9J@3JC,+4J'`PG(W*C(4JY_oC.'6G\!WkhP0jl=Q2]u%gcaA8\dKP%VMri3^T1p7VN7BZ*I=MqX7ClQ-O*[kk`).es'qnO(QSqVD=h5W6Of7^k:)0cc>8Dr/RAst?;SC:<n3')8cObu$lr&F1TXUo+k/nL%dASC2NL2t4-k5!1>Nl?8Dm#>eeP_#mN>,'PmoSgfTKt`hdI5.couG%)H\NZFEj"YT(8q,!QsBT`/MIlnS3bXUH?MopR1#9gPFE1I%$/MVq"l:Y5ShVX6)7<2B1.L&8L>D(_V:h>sc]MVRlGSh`fN3bplkqajlhJrnCNmaR\ZTi/6/f9Baah!K>URm'g79B_AsBg[ina??%V:5tZa28hDogKciY[,tmZ#J22G"C^<JP2PQ;`TiQY=AGBmeN<XCHCd(`59Sr_)">HfU-Gip18%1.R;NEWS2R,aXRZeQ,d*d:EZco%X62X(86j^SL)6hl>U@Dn=G3a%57pIF'MLfN0UUqCjjn90HVY"ph6B-C;</9EoiW&YKZ]']g61;@jf@X&BrUHXO7Y3_;00^g94RE;%mI3;m_4&DAB%/cs)>G#h*k'-g2Idr0_4SSoXNpQ8YDp&Z%!Z,8K4/WffolY.7.urU%T<f,N*K(0+>qu^)AAH?%WZ!J@T-GcOpKM0%Ga3A5Urq=G;hnu?&8o't2ttpAoe,OSGU&:F1>Es3j)?doiEfo@N.iDj;$rdiZs\ZC^e-F>PQ#MNh81lnP./4m727YGU55)9d^X*G%o7CpL%J"I_WTi)/;&a^]%PN`FeW?Y+:;MQX2+r1Mi#9-LGOfs@2i)b4&M4\PB8*^LA\0HR4fY!LEQE$tb_r93k*oMWqO5FZR;EC>%X4"$:7libh#?-L9PHTg?]0^[eLbq&grQ]o=BeOcE_GhT0QHW>`Zed[F3murl1\,)IOM"l;qbrUFG(dE+HX%"FOpO%8`7mHj>c5OH%\f[d'?cW_bXj/QWj'!#N,P3qJlPQBeW<EYKp!?J@Tjs(tb_SNM1c;]\;\HqpMfOM,S]*XF"(/4f]ppL-768KdFN6oF.VWrHC7%U<%"X*E6p&q*upG"==P6eT>ZhQFf>,U+lfEc>\<#W<@-,#n<V]^a#YA`JnMhG,/5crbPRtYRe*gkbBV/W_%@ZdO5(03K7QB=V;TPsDr%EhjRV\HU3phc'\2Xr\8qOoK-j85q?HGN7Ef;)t!UM8aVcb0Z0.89a0U3Z,kG&_lQ&J%7=5i%6SP6>s_7&uMVH8Ode[fHEmuL[]-3%EsXV@;Fer$K-=.9h\i6%9F8-uB-E,C"m(%CmL[Diq%2k*0!dXAPSf;H!:F'>fcu\5khCl#e$nf#Ng`$Ee@9P#Q#"G98*H,s@Pq&)%<*2]pf1Wu4;C+\q+Q=6C6<R^LXnQoi&qA+"3+HnAjQ7/+Rj-'ZZH\r8j(5`&K*`c[;hgVE'7H95g-YN<M&AGsi?XA(lAs0(:F5,>%7k_3H,H(6%Vitda5m-]:Ofhu%]`_uNAhK!.Y`uXZBS!E<:eLB6=Sf(/9g.+?XWskBL>NYnPBbf;m8K!"/DnO(qir2E9BCV\>NgNu%?cpQBDOH(RAij;X;fTU$$/[B>?<K\S_8BU@[j]7BTh?i#*Vk$W%N%m&QHFJJmA(SLp`;/;f/#/JDO^P-%[j$[B$da>R,\21*0;>6%MW?0a\lbdSYXItpgo#p@C-qcgZPIjcfs8nA<M`'\'mp@N`a)_n92WZ$bKUoV)Cs?L&9?aI&'UF%FHqlU6mb-i4PWJB%A\u&G4O)6%fh(M_[/=_,W4<=.;gH(DL+M:B>19$4V%nNM;S[r)DU23gSIoIgf5'.EhrGQ`<NP\Vm3l57>UREC&p,(DfH,NN,>j[djH`c2<:Ndj%Nj=l]'O+Pb;?<Uk%<eoJ9D'6EYj%I>Tn9nmr7u7I;>s'Yr1bS;d1ZImM1;nN5?d%g/b+mfpd\!TUF#oe')uX%J$d-Y>2gVUnW0"2%7n`cT-2sH*9DkP2rm;AYBSh5G`'7Gb+"d#DQM<sCr1bS;d1ZImM1;nN^GnkK_s!_AisA+*"N`Gm)9d!JKN_hfZS.mdF&2+a)qcF)%Ca4Ok'&."F=0nK`:d<o3RSrl6J[Lc?q&8qn>s/9W@@ccGLQ(hqAURsKG:W3F2:OEr_]BY,<*<s?c`Uqm(g09-M?7-ah_V2#5mqZs%dL:W88SK<JSD)(iIgL1S1[4u\@2*d0AS.A5K>[]>XC+H`ckpI,<qW.@\k3_iC),i8_*ZfZN6kd]2)+nZ&i@2eCu_Nj.O/j>QqP8.%N3+B28Zj0&AC?6(D.BFZ_D>ulB!J*\'a.pO@SV=9@#<WJ6n[_hQ4RiPo3%p&59b0*APk:upP?G!r37F._Gi$?kFS*u@s2NC)$V+(%QDcO!4M@8)(5p+j[$$T9*VX0R7WkfBa[/suHs9E>`TFZb)i']]n@ak[rgr?0p/Ml'PZ>&jZ6eB$(.TeYKAMD^>?!51Nma%4LdDgR%"ADPkSJe6COCns&*B%!'%J!2#Bb=a@E"Nu@lmc0oD.='D9n.>0)<=#%bC&E(3ht*@OX;>br/H$QO]k/gbe!l!V;*Z$]#;Pt(CXsD%E;t(W>7i<@nj`E(49A8=&<7Zma,(@:A"%a@2&Y%$Wk/AP,AGuE,Djcd@kD=Y,c,B0pOqC\:S[IFQf,d^1G>@Uq2eFlKk<@HPo(O<%A9h)LRK04S[-=`s=VuL,Se1l4iIO?QLQdMBer?LJiVVO=\\%fUG37I\MIuR6fpSen5'1E\q.M@:5tBIl1dlSF-?F%G>k(=X&(m'9%mm4"ojJW*H*P4ou\?oeQO$odU[Bc!#[e+(`GlgVE^Tba=g9-PH&JCOZN3$HV2%-pfmM[EQ<"X4MZ\J"Ri?[g%YKZEpqL]b2EhgOP%kVGCOP8mZ(*0a&TN'R.`cEnG)/%IQ*&66qk/GN[.eWiS[T(o-Ts*AV/43_&t!hE.\dQKCHBh"BT?sKTC:,t^__`b$!->MG+Ge96+%'mB?@Y^ik(bBE=gG>XURCT?hhoH:hn:%^Y;>=cJ'Whi_h8uX`.)I13(IgZrSQ[bM%FMR>'=C#&9H#IuK<N+V$<qF2I6a4iG?arYZ%1_rD!F<`e\hUI^l72/6ur4on/&P*7A'0/H4'2m;gOe`2c--;DINZI@u!tD.m[/'K76Y@CiDf[eAlH>T=(GL%`3hdh'km.18Q)%]u%9d<a]j;2pq^7ItLiB7r%c>24o*X424a[`%;eXkXZMj@/i?m`OkVLRTu#m^3$KHo6:fTRJUD[h]!eOMAU^#lqYgnJt!9@WQm)VX?B%=:'!@Y,Hq_B?@-@9ZQ0(S"<r&(,-V?%]k*+Xkri)[%6PsVY`<QRRV8_D-MIeWmH`JG4G:iq.ralLf[5b^Lm1*+E#<@8K:oX`0j.f%CV/H!=G3"\`OG[,[1SUZKYUUkf=nBGfP"Gl,B[r\-*\>*ef-2#Rt`cImd;$NgtK3#qR*8"htHPj9F;.O@qXUa_G>BlD!,NoX9bi=%0C8u")pGtAp@-^b,1ZWR78TF%F[-'&-n>JR?mAtZI-CMRH";iY8H%,4\=G:1%C#+jLQJ3Jasl*>FL=O4!V<_RpH0STJ>BY;>S<6D%__oPM6EhR\2+b!lTG);"oF[*S?4+%^N<u3W3.:WqP5sIR6&'cadPic])@l-/^6>CE&^]cEgKSt=GF^=D*?-4i*8'=S\qC[s\Dju@%$#d,XM%*c`\r6h,'<91?fn&Cs4J%8+b:flKDc4YH4jK/4%1u=/0<?5r7k6#-MQ>S019&Bo172=Ad*+>W8%Q.u96;MAQ,4Js+aG:5%F6g`h]$6VpAPpL;7-*k,MGj"6SmW]j,%\9b`m)36a,tBQ@sapA.dI2lJ6"!*QRu_qlO9nLqb$87q@/gmm3cHmo$GO:El$[A,>8b,%+%Z%.LWcm#)L!6Y7Y9BLqnC0WSU1pr#^<2hK52MuQ5INR358Y"pNO1'hd%N;<YU1o@q=[q(u!g"JbPO;%Z-iOn7L#kd9A6gPs_b@%;`oYqJOSE)=%AM(0HJupK9"r#Uc`KdNkQ1Ip-$**<).WJq+>5u!0XYTTJib94k4&#cnjGDEYk7#d#Bu)Xd."NoK9'$A[r7s">P\?%fbT<:dB+7me72F!T/rNGYQ<J):)a<3PBn/(N-=[,@![/k4<(5VS55DJa.\C](Bn@*5^9"b3<[-6*F&;X6i"@[Nlm>lUP9MU*bqT5%n!R3<@4E`8O*EaY-!YH;BWs9-,MqMR#pX<s`rrGr^1Gh[+I"HnrmX(g/uCNRCG'I=gEp_(H<!`HjG>M*]4Rp,o37<\RX:o(c_rt!%&ZN:ZQeJg;#t6LT/9ZYK9\$9^X^1@dqkF$[K@M"GCsA^8Eo`ebG@t@I=QiNA64<AgMeV@sBhl/)f2QN,8X.Y@RXSob@@`J(QIkL1%F(`(P%ODl2<JK-_M&p*2"jYKL\'i`H@nf(mik`,E5!;4&LVDu/\8a3#"G#fu_J-NXB6@J,WVd="7SnYTBbS$?68+S$FS*Kg9dBU^%[s4"4l;L#?m>n_4a87)5+KB$qe]]c"]InJD=V:u,j@Cl#GOu\/;OWUlS\\;3lXGfleh26YrKrZ(,&\"FD:0uq$-TuH>,nG(JU"`r%d7,)<kgk\Z>,ZY#>Cn,rAWs/]ghq2!1ZfMqE]%)5>QS81ie72ZNOkpY$UotnVG"F"_p-$:k!^KbEb'*OBk%V$W!N$8YOPRf/nBu'%]I2e8+PqENKi>XEl@ZCD2_DJ\ZL4+;iJ'IC2pC`aVY_"^]!13m:bH(C[Tf/./jZ/0eU1EP%7F&@X(^VRV"ieSc;5OTccV^Fa-t:g%/Ahi8&JaXh]pnW-S2XMiW+G[V0rbAZ[A\$W4,`hIXdfPS<+_h^+rrP=-GF@^dUVEc=WU++5omd)-8'NL4`g*gP>e0`*AE>a7BBB]%'h;\s"p18n&BP9,@9kIE?\QpID_:j-#<kgL\fpmO!%,(`R]uZXYU8?5T<K]\-jBYUhIUTf>fNA<7+9bWf[@j@:S5'7(*>T,bC8nS%dq`+jn7C#j*"9U"iCP4s=9)bB9V;FZ]3K)c'!%$8Pm+RZ2Dj]8>@ZH'cQql^ZW96!]TaF`Y[u-%JDOK5,/6<.g1q9Wa'^47Z&UYn%51Zi/D`A6KgoK`]qF6D+XaVC[qC8YV(E(+5IQ0iJfk"G7[QF+.\JZ4H"FH#m.+0%9^JT%OKlmG/Zq*cO5.)0G\4-EtXX6on?]Yl&%S11b&GkBd5bl0NrC,j0t.nUHFeNbXe+BCP%Y5lM9e.s215e_c?"`LDfR"s!.!*.uM["-Wg`HEti3<(OoqO$QJ(mc(:Z<B;(@2?l*%p8i<MHdT_KiV#CimH7ZO]/N%0GTBmi<F<nP,&V>^&[0p0J5Mo^?OeOIUU1au$:@6):2J*%Oi$%iN@uN`&ep`K,#T70#bG7(KPT+l%c/hD:E,R>!+e-6DP8K#cdZm3!NYunY,EM"f\X)4CrBSoNO\S3/P-tre<doS*S/>>kRQRP6R,]*5>F-Q:[u):+'XuVkibAa,G(5n8%pN0+Z>j:'Xk):kNj%L[kE@jL0SJs+_orbUi((;O1@$/WlR=>@7mKr"t4e2k]`_p6CkqNo_?gGd@5*+(l8.2Q$h@."nF@NSE1im-T%.r0Q8Lj"hFS`+H9mM+'F2$tYW*NIe(i_F7+l]Rk4@V8>ip#sYW>uA_/k'YLo:+F>(g@6L"G@c;H3#9=Y\&n0k>ogPX3WiS_Sc.KS%6cBGiD:3t3):l-5d?%/e#`5^1^l%AL[fH5FCoVIB/5&?*e-Ib>NJ?*u0P:N7`o#p_l$"/cL=.P+9@Ojk^'E."UFXA_3&\4\(Vf1\%Lh&ba&PWeF/NQpAbbB\giAB?]*e`G:%5*,9CapPBNlgi;<`Lbgn>:'Ge'csR:XET4(&PVlWT;of0\u,F:XoV-dqlpA+jG'l_i6BZ%&+_ri7U"Ub$7XrIP4b>T*2*EkkPm]_>,mHN_Mq8e6Rm&eB3]\X+qcC;CRj9om-D;^ObT@U]8r\"dRJ$CrH.EMb:>R(*ECjjhk!!:%>=_P8U$$%:,I-LeP8EW^-0r[mb60$K3!U6+"VOV;Aautiq>70o?M'nas$!?C0rZ)>\6-=J.a#:C=];H)gu'&NDhDA;bbiNc*pm+=%XBTLPX^T[F]H&$d_?%q;ZH3!hHlT#F8V@g9LS\JdNl;*4[k-1C3YMin\&;WQ(:HR(8!FQP4(I,uqD+1&]:DWu<U9>j<"cpUf+#/5%guNW=Up%o\iMHk\k]MjQbcGP$EoiR\3\9qV1Y:H"fi&IGe:#Ln2taVu%O'd9$orj[04+'snEL9L6H'Z[_(p`i+Zqn31!egu*Q6gX%FKK((n2?)u&CIY6_,YO\9VPj)X<m]nC?7,1,!S37(Z3>*S_p9YNn.rJ&rq5jbr6ime&gkfAqG]<97CU7c]j+arB%')E^MQ;(\SE.%:^Ji\A50Oc8q.blW7'&BG_aafYHl#"gcZigP#ti"i98F"!9@pD8\8SeHp(q<ho:hbBk:fVQj[2d3d=IIo8;HpZ+pYWa=UdpNF7UC%fhP48+B$"lpl!$6UN=i.='LU0S5.5bn[Q7Oj'6=I7<OM>^J#u>ng2dDSR,a'8l-%Jen^N?_PoV2[Zim?'`o/2\$F$tLJ[,)nocU[%L)O"N5fVZ`>"+Y[,#s5IS7$e%i.&PeV;$PUT,3rPHAL%F-03npdB4U&*eq8E'e,OT9Y%S3'ClBE9jcpQ++OasA-O@LNfe^Jr[>R!%*Cl=eJ,6UqppEj\c;$3Ig:Ace?)f/k.Mo>4/ar`\Kt-9g;T(7?q*%W[b#VB:m7-F16)/n')_!qE#[Mo'@+b(AECkV;H])M+l;M>Q%i'>$"iV*D@,O-WLHWR`4V?#DBff7?FF-T61+0b@;6h\\TYQY&b:'!8=L'NC?[`fD*OP9k5&U@Xl):@Ze@rj&O9OXG<KY[%W>G9lP%Bep\(EXdBE^58=_ZCQ/Y*8673@_QC&SO(kX8T<=IWafStI$f&Xg`Kb2G%Jl>>3:j-[Z4W0G"afVmK*tEM%nu'^a9_[UWuDWc7YhG%C)WD<Zq<cn@`206@RPAGqh)%,Yf^ocWL;V=/=;S8L#lqug;CmTe<.:?G5(6lZtX1g)RfT*VR.FZXH\Ee'!o#020NchG[/O_U`!.a%*]93^fF46QhmJBlP"mJVZS(\=6BKTXHHRU+a-6TS(-t?b<DQh7#csLHZCH;<$aLWC4rI(+N.R$S]h/+Me&Wu5DkASiHKj0pOJ_iW%LC86nVg=6h)g,.ZQr-V]A0NGjX3*s],MBa#+qZO3^;ASe`OMp_WGSGm.Y<&[Z;sQSdA,^eTqb8cJ*]!P:?(SI]UtaF6Md\?S4_OR%)/?7b3X58(]qp9K&q6VbS=2n'Z,d2/+6X9LltMG#<Qg8UBscoR1]PUrMN//s#%12A,=j@U8CYm;8'[pkp58jD2lSSY1QJ3sbe&Y`%\b:<tFp94mPn&+eN7<[ng2!?ch2Vla7$8dVG7/1dPKknTJMAFoV>uX?n_U\_$_Ca)?8IVQcR7Q@k";s6UktQDlPkK'Ks"A.X*[L@%[1L:#9-VVOSZrc9`+d=F$7k#0+mgQQ9BltuPj`SQPqeAj"L:tjpe^)*AaLb"aq9Cs4uEe+$n0D)fmT'#Q:TYr!sb-7ATt+O^SD"h%anAJDVl1e/X!mkW1(?PWl5"d9,5tD]k!Jldb/>W0r^`i$E[F*%[1Zrj&S9(q]%:,"42+(Lhb',75&.*!2t9+%B#/ic)F<J<',9aQ%@JC^OL`ge[j&tP*UAC>rYX=l;<jPe"+nE5":=V.]ORWSte5B.gWi&Ctf9MV;Js`9CdS5Sq!A%+V.&RRq?)[ca(b\"VZVe1N_QbR#%.t?P(bQI!2]i;?LWCW@Ue=IV9!3i8VIVkG4D/RA+eiGZ8@R4BN<JfGdCY_t>XM-FOhFDOqR6<r>YH>G-/A&:NhTt%jHTi\+*bZ/m%DFC^U$ehd:WF`BY2Mc*p$?$@Q1S\YB1\D/aoL]oYgIimJV*@%JQUn6kqE4=KL0K'g)j,VO@R9Ih6U&&3/\gr]a`rN8:?pApCJu9=%7*N4"Q&9q(G!5IP]-a(j\>o\n(m6OS"R6kK\oLd(Cbrp8*/a4,Y'9t.&tkLXmG9:u-?fe6ZXRH]"B=BXH^X%_mt-HpLDZE.G]`3(%PBfWP\:r/565#"m!ll!-;7Uh%q)YXC9k8p*$*@kVhW"<#G?l<IiFjUHNS`VuB*:Ts<G=@X#l[>36d+MUIc3i<k)"&C8<jeK_r5j8%(SK+ZDAg!L@Y1eX3=><MQBbUaP&2kZ/AppIXBD6hZhYdob9HPTRKo(g@mtTd0hqUlrZ.g^7W?&'N&?1ln=`e$219TY88M'V'Qfc9%aq_j1VC@+pJ<B6lU1?AbSkV,`Kc.4q=,L7VJ:nM.R=W^Wk)@G6>&+7J7*54m!BFa0e"G-jbB.6X@r_TPb6i;=Kc-^AgYnUsZ)Zu/%2Kpnc>IFI!7ae"Sd^-);eZmuZfYS5@gQf+o'CP?<(_UK9^2h\@:Xp0c##`_LYscctBh4WQf^i>[2BG+'L=!`@9eT-^cB?UiU#Fds%fP7311j2KrR(,e\")j%STZd6*&1l:8n3Ku\Z!6"3FsA*`7M4&mfOOto7LQR2HP(,,(+H>'S'kH!Cfg7GB%`j]+.n8kT9bot;gtF*%-`PfUiIk*q=mYZu@6_2R=aIb#[pVh&--J*a&<1,TA;^k^J]eR5Sd<ltF&oD4^ZdcIRs'%7oT@E^H8`P*#Qf8G@lNR0K4D(G`7[RR%%ORKlQ9o6iNYtK\>1)C=9ndAJ@=/%nJhrT#F5^pe6(!^8(L#NDiE.DM.J#ta)Ap9>7:J4pB$a:mQRf`^YnEo_nI&j2V@`brl/#TU%&Z6]$<l^&u<Omr19<9EG`,fMFY^b?]#QmUC3FMJ)G,FQJ7MFJgVEqRFc#L!Vm2VB/VCWZ-f<@lo3FS&7i5jN-#7/pJ^TC0NBup^Q%7#Zr_04Y<bX'Z6G<V+Gro&X\T^"&D$'/MdY?1U@G;6_mYl]P6[C=2%)5Ce)],>!f:S[Q`k[(Jk_:#6C/k4uGrb(@2NTq2U)GkT(`%C'@:[3]0gt&KHP&esM1%Oth0U.6HQNdS<-<A"6=s7J4MB8Og.0c2&>VSdemd`FP?(pqTTN3QCfg<N,/M_/G;U`+KD3.&YrAaD'[X%Uh)j6^p_<.*;N`"4?m5[_*I/IffX5GjrZk*SoJJ_G3X,tM;9,(e1s2W+gB]6P0l8MXoLE')Dm>I4LqIZn,#r0<$h>BgSfKg#Q8=p%jV5[Lb!EO*P-2lIfHUdT":NtK,jQn]EeqFVQnX*D6&m$YUnbQCk.Jsp)<%0mg`FW8hU9%3TH_^fj(MOU`0dAt'"pLmY\^Hs&`9Fn%Uq0r8IUb)5#G^m*`n!3$opj'2*?bqMjY,.giM_1G6poT4h8k$nlg^Fs0GtpL16]Ee3so+:1N8d$%qcPY3Q:QJ-1aZB>boZ3b+)]O%<."I`kE]r+[`,J=2?iK<1!#;U]C],p2b=FidW$,p@mTms[&DsqWiVAK!;\u)^q@aV]iZiS"B3H):iXK:d1VI?3pM\rlXndG'%Tr:%5;Jdk9&uiUXX0EM9?*,Tas0i]KRcru%=#;3$^OQsM6hSYMVD)di/0=L3,88#j0#TgBU0Xs>Bk*W%L[s,(\cEcpm==]mB83OrXeac%*o2`=$9^4T0PL@Jp=O[IE]];9itYHs3)NA\TK4tI+A#EASK1-"o1\Q1T`Z*(Anp3J0NmX$n>QJ`iAb9,'+.RN6#bNLo_%c@YL?Kc%)IVdo*QfWoI>eWW)!@op_dgs*RW@UBH9;"bZ3#QeF&H=5GT-&ib83@?+$&\^.ZS'OdKnpATYT3&#a2NfXO(B16gT1Q`B>;:+/6V6%b^0\!eYgA(Y_heX",208MXA:m:7p7&Rjl*&doI@/_RIEAf^^=JXR(eZOlh?M:G),V[_f7uHcrsDL&N5bltsUnf;++BgZ2LSX9T91%0WT^a<VV=^Mctc:WU*HPnfALVeCo[Q,qU<NE+VF&jf,fSY%X#rDi7r5GSKYL@nDT;O(d.56U18r\m'4bSdW,@@NCOZ5"*9F\QR=8%Na9/N:A\k([RE'L@f+T.KSrA2i%*%lo$b(a\se8.ThR\7Ysu,0E7Kg.`I/u/(Dj4mltkb!9>mo?QaFUL:3#mBXiq_sM<9$k/+^r8%_:HKSi".Z%`[^u%Y*l/C.>aoqpuW1U)mJI0aK-)eJ&$g">\(rL\5L@l"nTj$SmOOX/Np#ZoXI<+6qc(BnE&+jY:d`H"0&k7c2H+m%IM<B3XdVf/e^]j\=f+;u#]hhJ1fcI)Mc@OqfDX`G`fY!TIWU$p:ppqQ(8fB_(RG70ZBS-<Sl^;T-sXVHDJE4jkI@RaXWjJt/BtB%%/6ME+gF*F2_jhrp$(D?2K>Y^O7+:b$Nu5"`Tf8I4T6?&1]SOkZ6V%E4HB`'S0UBoR&TXdA[Yrcl`bM6=@gWW$roHR!B(%t$[I^'G%-"'CUG3F%rh<@`Kq3#dEZ0SbqD/mr"%_YI'4.1%3fc!aAG^>!:nf(O<rb_-R<lDqr"cVlPq_!G#Jh$\8>klVBaZH9FTES.I8\mM&%]5%fJ+[o&$ESGcl_9,B:Z'/"K.<?4@B@CJZTi)'<2+9D#F*H?*c"Vp%Jp[s95+rduc3ddp+uI(N9$;#up!e[h.m]Lk-:d)b;KLHd%Qt4Pgq;r7G`IX;UYM%rRpX%!'8Z"rQS\BuJhQi*=Mu@nRM0#4MA-q#'nY+f>jJiC8BtWF)hq6Vj>&mkLp_V/(\6fAZLnf:\Wp3>C%8_=&r+[O^,q.9hV+q&cTAi,P<^X)8[f35f33?o3RJ>h5cSF5ZgfsP1Ye^E>2+B@X.']'"SS!GR.F_A:Ge\Jb#pSC8j%V_M6Oh4*'%PP1<O6H=F#o8]M#CFL/$dT)I!m+c"2IWmOCHY1g.kITm,i`S_8X6s)^jk(P)G@Fk00Uo-D,i;ZO\#ep1]SbM17Fq&.\u72SGKZ6n%%jU)t),]F,dk5]).,QJ6F:dPHAL1KK9LR1O]^F;D%=1Q7XsY.,,IJ$3QG*M!h_5(#9qU!jK_J=Wi5srf>rStoN_IUH/a!-``(0`+%=E?/E^,:3H$\$dMJ1='>RFaGt+B1)D01B71(dsnZWgPY3:GC6rV'jOIlqt"U:26:?F?.PR'O(Pu6q#,q4i"AX63>G4o=:H!K=nZn%p*Y[P.fJcqEZ>1][foLBrd6)oA\l?>]l(GWY@7,&m>#8BSi#ur*9)2"F%0=noF!Bk5.,AG+1,k8k0RYBltm,?G\t/e[4TYK"$"1m%)q!B61hEN/n"]bXW6#O*_\TaA8:cXl9V(p0d[pjs?Mt^F*m=U[H4O)*ack_-Pn'3p(kV0FMf[kb$dqB_r;IAL;F-&2QUo,n4a!jl%FS:q];KON5<Vp5Nb=(-O[\BVRT*T#JM*`"!ZL!U;-:U^b"p13ZX@M:Ah%\n_BqrmNnc=9<A#8eR@X<J-&)*3^9-D#DFWURZS)YT#%E6R+9(AoF6974h*Zo5(RM_:<;jbZ%O2pCccfpa_1k?B*N/IF-,rOAkAL%&p7!UIG*9^^_7I/]VE`=(EOoE.[N]7k\b*]2<V5>GOO%LQ?933:qkC5@gdH6s$a42TE;<r[CBn_0X2_XP*$N)s?;Tr*&?%$Rb':RXQ"59oXCG`mKt<&C2F:#Eks9oRt#+k+6[+#bqi,RfN8r%-65W)Y,1<nO]g.ib9Yrk%TJ=)kTj-(qSFUp=,E,p4KheNj;\b>CS4aMKf?g^r3cahBNjtK0>qMj1?!T<3bUB\'bY+l):K^q.&-+u%\Kf_X;?d[s/Pn"_g^jhpD,E<?nZ$j'Ia[ZqA>.Vr19^i-Oe*bL:d_[K8;/L#j<#gpGG2Iog>quuXa1\`,JmX>MeqA90ZpB^AJq@%%apS3-Q9Qf=0>8&8Zc/9)K$p12gbK3JB9r%d3!GJom'B@t\DSP#Uf%UPapD4BYc^?:Xl\k7@VGRnoXnC].5(*k4AD8qQ3m5DWQ!7l%?:`gfTck!<m/,:RqU&9q]*:-%;N]uHD80B*k!HJ":m`;un8"5rJju;jln,:Ac*H`CSL\!lW4q>-H>9)r7:;s(j+V;bY7S3_;8hTu%Aj4n7=a)LK>IFnIb<t$4>(WCDSkansa"GF3^9Y9;N*s-N*=((#QMi.#(_Y.H[!<K9-[+;!BYg5[4$lu]Sfn'c&E%Qd"Cu*`(*5In%;p*f0>JdBoK9Q(@m/!:c8s6I519k9(Pn`MKfE@<:?ssjgDR;u)\j!XM3\%+<$e1]nYNjl^rX8_.pEk;fr`i%<D\>Y;pd^q5bQm&b%G7`b__GIM%)VTrokWIG9",I[(H'^Kd")U#^6jYeW&3(3T]!d#Fk$9Y9)fQ'd<Y[4ICn!G.\58R8=B1gu4ggmM)?=`g9Ht-U=MN-'%p-NYLXn"Sj?'CaUVGCG5\$!)L$]H&%"WVU=>KL7)ORaQmeW+aTilL(=Im_iH@?5MQiWsJ5@7rd^Im$MXTB8e+Z/0)=IL!FeGZ/Yo%qu56s.9DWSC5I.fmT0$cn*-f@pR6RS58k'_jccsmn5^o<:9SSpEEMfnmS-3r=9G?$XGr9+P.]mZ.>WR`K4XI$!.juWMgrlPIo+oW%SZ@`'Fqt93:n$X,Bh#8"KAA#=H$O%V3f*(Ck.KN"=E1@]ZVdrN.+C%#m8@H_5c7.29P("LAAuJCo),\;N4gfrUlJ%Ucp`4&<<nEg%>e:shN[o:JZ-1O/f>Xq:-/6obq-GCDUot0RHK-l>7#Z.Iq]lSPqmMU<l8nhUk@E39UHPo.X;f+W"jPZ'7i4F!"IZJ,V3!`18$%]r%cr&;+(aZGb-@S:5Ut-5=f9C09$;=/p<b5Cdg*dH];,pf!79FgNoG2i/!UjBtd`&XQn%"[-H?B^7BNMIh.)@$0e>tF.")4)Z2;md;%P`_-FB>Z-8YA(0sft!=(8("8<n_*lP#mn,=>Z&t;Mg*o6Grg+7;\[F/@e;KO>_<fIqH&krV`G""hjP1g:&3(.&q=WKjFV\0onQ=r%5AQ-FRY5j+EteGG?Fo0u\gn$+%s):iEg7Vd"e3Of*aSN@aWJkZQ-NRq1dS*#GZ[KbXr)CR<k01RD+!/dVGc(4'U&HpnWqUthNf@"%n]Fahn+lTg?V'Rf?bQ9BO;op'HXgf@!6.go@I.ss5@NOg"Kn9r-QZnuj\?M8hQcS:Gj)JF'1:L-jInH)5<"Yl,c0kM&/a>j\#h6)%Hg2J?^Es<-E<]9U]8Fe)I\WrYd2j,["M#)r"!""k5apI0L<(X`FN_blRT,KZ(;C<:aTI,ho^p@0Tac4\24IJ$_/Zj.RPa;G95`NQ%MNQ*'pcOrUp8TA+*u[:B1bP8gnQdG0\N,R\Q9b3r%Lg&YFR1po,_*>4c\i\`8^0'3VbM@3BJ@X&m"S*RB6Or@lXHKK_Ki,$deXQM%1DIK/3:3)\5V/dJ:lIZBE4nq\PH<Vu)/\@;l>?;PCm5/QDo&Y8nHALg8hNeHJa\8l'rLsqZJ@q-qcK"0YuNRkY;V^/mTJkF7TOTF%>,-bt8<-/,f\P6sZ[e`9Q[\pgj>+J"nq-Ds8*\Q&Gh6Tj=a?Q-W+BXUH(M*Q?QEUtR?'+PoFRqQo::<^+!SQlSOUgff(r?Vn!KbT%@sW;,q[6t&[6iuTYQ7gAWOU1:[dhVrV6[$5PM.a&BoqoJ$YmJZNV0d)Eo0?US-10]Z,V48-7+Xfe</GRIe5Q)m[;]2->79h6D!W1%MBS-8ZII']l`>Wq_!Kd"'6=50KoIZM`+-gE%5$hS1h[3O4AjbO6BeWmTgD^SfFuaPqnG6;Tj0jA&=O7F>\t_c!6F6Y:F6JAEE'Ma%iP6:1Au(R(12p_n!duK[d5#0BeOPT`&1sD$>6#N)o%(bLd3+O[8anQiHYe,l$+`H$C1ab=C'j1!lD2?/rHbmA0".L.LS9YF9+&%C%qCrc\$#,cLV&Q(JgJ(DWKqq!NQ3(B/U&I=#e1EQDXDJW,EYS&3;goc%m@*kX<qk9;<MKd\dsdUVk8E\df9WH53bZMYpW:Xmcs(;8%O/#HV8KuKTDJ6#Kr.N9[h`Kht_5jqm5</$V7<nD(:lN^lpGn:--F,'0[K7%.8eEPLb(L"(,YE&J4]WWZ%nI7K9fTW.+Z%CVAO;bu%84LX_;*sDZ$eSco`Q`Chfb*!,-:N6TC=PN%kdSr/+W3L4iq=Ie"3GG6AX88.:If$4W/hH5`R[]tV(7#rI=sFF%lT00.OjFOHU:L5%(%=VTWIM+Sk(W?PW/thhT")+$no#!frl?qd&5t"@WB/389qf9KkIbI);HN>.MWO'Z[`-iqm!Q;94fkB8@8<gUc83Tb;D`,OMFK0-%(GDSq4am+O:6J)ibhVC%EW%-o@r,n],5$IPC2Lg,;laghb37d]C7K(.Jip)oH0!@3P.hBp9ln%"$8[E+rIZ0<BIAiaFuusZ2%;4f%#]bREg1VukM0cOo7sdcuO1$43UU"L=jBXPHH.:>sTqJ_8pp%HD\m$FR_pT0k9RXcP/#NudQ*M*IH4.-?.j^[@DEH>"D4C;+:U(Aa%g,k6K+/E-r)!mRE(oW>4e51CsVb"5i:8>,W.>KZMf%/L5Xpmr6fJ<]H^?/;(brB(a<H.t35H*4'=Q:p\CH(d8b2cWfGbA'lTL%V1%V<AVJZaC+?>BZICU"b.2pmI8PG>s?Rd\G_8#2ms%o9SZ,_\cg[:8G^h?cmWfW2BU)D,rV+Qj<N,]\sI`7('#%D;Q.X4&`-XC`&EG%6^]u5%.Ta`^afiJ0mfLbJSuW/VKtBc87tM>Uk+:qI!r]&$H>,lYKGjPI`r[nNXN);`W4`9Y49-.EsCLt"V8ipKQ\)6VF0Ko.oBb2%4tWNT@MGhc*[I]6b*J"YernGf7&*_%oaamk/\p\4(_^0t:o?X3h#n\f.Q?1qS6a\]a/i$:>_PpC8*Z^(`0^3,$W`q=L)6KB#D!j6%4dddbPGpKi4ja,%lSN>7JN.)HQ)30$j\>_NCC4RP&[g1jC4i`tgVUI9>>9I\:hcmO_fC#%/F3&HF)oe716j4OgBf]t:pPKe.[:C5%.CD\$e*]BKZ@M4Rq#CD4"73Wa^qk/hh:4;_XQJk+\?\R;IKH<3P&np6N$BP/:R9"399Rgos'F;E$24=TI!7Efl7q6?\$d'TbJJlJ%>6^DkZ-mtUn6cr`W"N0:\\-BaCMg=E$q-CtoB)'R7-o@rh<X[HmnQ,G.W"tc+k$hqA"Y<oi@,D51*\m%P;'KmF+dMqI[9[7W`V8A%qddjX1-&OA>Qs'1agdHb4#,YS\QYh;^o>u:FPoJ8VWm#ID7DO\DnVeg@D<[uiSmFC]B\IQCb(iRG.P":i^KB&__q2c2;+H[Ln"95%F,M*CeT5%hI4dkP2MPr'/7`FRN"=KrF+FdMq!:gaCnHZ+1Q1T?g,A!NCfXi:NBp8kmOdSuM*=f\FesM#:X:'Ka_]^;b*n*:'FP:[%m3")F<oWF2bhDC`ede.Z&1cP/$`taMDU@1>)t44W/BWmUb@%R9\o!Mn0<fO!n1:a0_n;eKAq30YVLrb&[@WP@Z52[>d62EbotK/r%SGt/H&!<Y%Nj*o^:e$p9;D$D6P%&]-8;tJZTu,+AgW'InI&PlI'C1n(X(1h9`&?c>behYh*G(!QE\OJYD<ZCXA-GJDCj@n&eMDP>%D$Z/j`MS;?R#iQ#fhM\(bi7PAJ"g+d$sE/X(>"E(\Yt^V>S-3F+$5e$9".s52pDn2*`0hf5"8l0@&"d"d0)5L/-X$q/qe46LQ\s+%\406s+:GO#0MpcWM'(r'9ek>E9Ef-g5n:!^-!6TbQ57">,q[[\p+6HRQKRML9si;(`PYJ(#0oF]\;Dh^o,OBH'323Cc!^9$Ki!1Z%P(A&.YePgslcc3s2,NabJe9]1;][OL>W?(pPFO[XcX35i+AT/q8hjp-2;(Iafms/eWe+ak0'0::[Q::-*P:0?%%<W0d!>15Pm\MX%N;Hd9#G3O6ge$2'.f!#dr!@Mslqaf'pZG=?VUhTdA?7MqfF$lR;4Q[+(C=984Q=s%Grp:J9EgUNjB6A9>?Etf$9iip7Al$VB!2:W%X^ed>b]]*0mp=FF9cP^Jc"nEPB)r_&"T*jN(aUnfV@CYTIAVW[[Z;X,):Rt2h-+CY\c*hY$RE#L-';TS/("A6Z>XR,:3>NQUh1J4%2h1gj>HH6TcSVK,jWiVX,;$#?G1otDMT-$B8M=MPV>VNBZV8KjXRIF>Jt$.S'Z1t:;h\PsHI,U0',57F&0kHp>up?SL6Ce`&gD_K%<(0feIr&8KIgJMRW!+PMl5ZGDRXSE[DHT?7fg&k'dX7Th]-A8PQ"N.`H`dL_%VQcM5Y/#P.UAW?bi@B$d%UL37,<SZY)5!]66j0p%:i#`V=FN%F]5T>pWBdL6`ZZ:noZC9o\u<T^h7]n"$6%hOM/b#ur9:-\d31pW?TY7.f.5#fH%ubq!,H'Yn0qh?=9e#GU\J_Po9Q%0%hS$p#Y=h#gW]8;>qm5R8J+mfXbT<`3>KJLo`^q7a>IYFjOfNr%,>1\,-/"D<E32+*>1uD!*^A*t#,q>l"3J0aOh+;4BI3-*Xp(?B%<6I`PPZPD=3?Fq$-lKV\A[LJ1-2nAt9PNlQ$IPXT[M7c'.T]pOk`(8U/`=NCk1NpaH:=P*P@45K9tIc9W#Z),TY*4-3(2_gblsn6%Ms#;lA-S2eEh;Ns5[LT>BM.Lr4L<*:"WoE0\Jq9^1(q7#LaQ)lOj@;)nK_].<)03Zc@R*ZWZ]Qm--@P?AJYB#SE"%@rEj(9gNE%h%Qe^.SrSP!`.VE1cE8-CFD2>;?"=1EQs#<+""S_-A\@JXE)WN,8G3r.Zi+S8Zi!s@.R=XP!)c:WN1BZ@LrOGJ7SZ^[Gb3H$#AgNU"%B!X>\%aq=&kg\)[E"pHmgtc*]h5,8qJ$a-CA2Okk9AWQA/qL8&9V\F3/%TnVgE2-tPDQ6))W&O;=C8_DlNt.!mJ20VoK;1uoh[aP%o"jtn2fB(8R++/VaLtAP'[O73mC\T%7]IH2Cm&mHP+'<)<s8*N+m3BPMPtC`?HH`_+qRdKJ[q9E&$YFI"kueXpc%FsOn%m_o0gr$%h7O&KY[2l[ifJ!IH8iD_VZk:n)lD%BI(\Je:F*u&\43-LQN\lA.Lm6LULOGt*''``kHA-Ymt#!<[aKJ1T4<>(;)[mKZZQeUc*R[!%o42T4jGR3`=;V#Id:q(D7HR"u5a+0b1F'sBQeKt:;j7??PVl83)auGs<L2bK%Ybb0<\;lo\\05gX9`;q"U8rap3+2+]@XlcoHT:>%,'1]Rl9tqI!F&f,m2#faaVLd@]R:S4!K5allZj:.c(%V6s!PKbYd3ZTYDNS+D/(.o>dj?GQ0Hq%S,lT9gW*K"*;=;)[#Xc]N6%;K%1'cU(HppY=-MO'b>#V$;$rJ&+pP\4^K>J*elcbI%mafqhnh(XMY2i=o;YHrgRmJ6m;Q:rPQ\1_\gDlQa_57\k"nRl>DCQihnJH)X%T("SQ\`<q/4he.$aqA$SH<Ba_R((KK[CM$P]B)tlUu""TC:s9&8,aVu8@MuY]R2$4HI<S?2?=AR%UWFSB'6j<mP$d<Rpr!)[`(YF%Fsfh2o1f<]UCaP_;+B^j/C&=uCaI*QZ@iI_(7nm[/\SLAp!cVO4T0\3qe8n9KYUOAa$q)'Wu"9F#WL"jhZ[kT:&%8SNXKkg:EB\!%XUR"[9F%AD_6tm>Fn=k1K/6>+d$aM^$Pma=qKB.V3S$q`gdXpP.ia4F(;8&Jan[P=s'lsu3>@`J5Wu?G9QaM+elMM)gk-&aF%UVW%Oi\>\j#\Xqa0&\dbBFR2ba8p9IjST0HDWL[2EP[IXG_0[=QF()D(G9lS[Gpu1X@2^8KJRC8ipIEhfs[,2QgRRitup[VBp-MQl5G\%,\ruu`%uSDA*Xb*\.7'$.`gm)#QkSULhL#7:7YR=]h@'g-R'i[+-%Zq8:sjPDqGK;Qq7\0!"$L3":2HE+o,R_0j8E76mkd2jK[j!%_:Z615/*>/&_3E^U5CuEb6[1_A^IZ+oi\K@d%e:#i[ek>80J?Ub2Nt@H9bn!qon?sdeIZbDi9`JcV6g",PL>[!N]pf#L@[-Op*b\%N>b]u#+267UR&oNqZUlU_NF@`V^atHU9o;=*XnJ(@CQp"WLPs$g7jN%,o/FU2"5h.%U):-2^cmk)tVRZ)h>p3]?ZSn_(!JJ?(C"W%_2L.?"k\i\^uH8iX:VuO55QPF@Wgho(Z'fF3dt(VEb1fXh9fJ14P*"-4UQp]gM8B$&.9&_[eR+"LUHhWMDuD))'r"8$<NIYcZ@=8%LPtGc=p$8.4Bl@Y'3pf*0V'KHW`!#7I1'X5)<2/C-fZ>;Wf`&JM"HV>'+=WU)H8O`<4h8brlDpM\%oT^0D9+4;%D1!4,W*&X6>+Z%N5q@]`X0h#%!aH431RPt[1,7$%G4d9e3GG_/&K4)3u9VB>2l(l&bI4lpfNH8PM,Zo&9nd6]U^a@I0O0)SLZWEm;\7:7^g0VnH`2J%^H(!N-*jb$'W59CB<lBXb`)NhV@\(Bk*9I"Y@f0@74q4FlH>J7+RjGn.aZ:nJ4f/.L"M"$hmSc.i!5cBNb(beqcSZa9kpHZ`0JrG%KNT3.4SC-LMYGe\5!)VSM"7R3q;:n7UIeL[Xc=2f0:/!*jUCLgNok95C@V#:i%"-.\(b2,1Ke>mm_=)C'%g@fc(_KJqp:`g1Bd4/%MXC#`=Y?#mLN%%pC!qgAc\8Z;,n1r.UJe@[`]o>1oL_IIhF;(^WS0/Y]7_+dWoVFH*OjWh.UrpHr@T/onRhGZKT*.j+%^:A*6P^J%-`)5a/@\(m(7YH%[NpTa/'],T"oL9]g4h1$4!R*l=b7NK(pDV^jWMd;nVol(/'4W2%@Da2Og.Y^i$M&^SV*_"qBulRR69@5`Eq"-%]SQ*W>I]`kb-iHIgpbJVkkdtMbHFXA6#_1^cAVJNgM`=(JLG5Rc;]Dc$`%`0"0$9ZWuH#S:baAplDTh\4WnYIRHb*I@QKCWOqaPM%7lMF`7B<)@SNS&FAm<sYK`6fYBEJ`_+6HQbB@723-J-?M<(k,qpET5#"`L)Q$m6Il,RQWP,Y\$`G$,NZ3(e4N,!j&q'Bk7H"O*"9%>3k+^:Nl_h?b%7PA>!,j#$p(L.?q1P)=6]%SRK"i04iKhYm.\trg9$^#?)e)OO@WUlA_"3rh1PJ<HfId9cQ?X#"^u8Y$61`1iULt%9Xp_q1f^aHqb<IPq;0_[;7S8LFpNLqq`,#f!Ns'O8:[h4$3hshjdiN6%c4BpXQ$=g^BJeVIdhdj?9ALa=nqaL&='TbhW&f-P&]W)%:oOj[;V0kL$YO/$HsSdBd3Q;d8L3O/lo#C2r*@GFnka02"qZ"8PA.C#b-Y$W?ZWsJW^LW#>\KU.jFD(k7$%Cl9k_hQ35(fDUJK<o%5BE)q#ZJ:4"8*9t'g#@CFEJc2n(O:SEb28P*GO<;ZD/Ai/?0mugQ`<.Hl^te*i>oZ\^l[q?[tB?osp-YgI%6dKnWj.hpB5#1`3MD%#<;rd>8iGf1i)K%%QE?aa*0L'I]BoSjt-^a3ItD8:uX$]kj#_520PI2jWs.SW)M;l0&1sk)X#ej0J"tZI`@',UbC%gRu#SWXc8UI%RjM2L.GKRkYXtLQ[%R?^ju8;0H0f<\gh#A3Yf#p1G/PCrUD[LH,pb*j$JdA2XF&OWI\'BEU3fA(-r)6u&"5CY`igY?4atuD3b3gG%4S?-9-6!k`H?YiKk2DNtD,8u4$aOJ+"!j#u:`SVsDAW5@#QUlA40G%Ln,@RNX6m!Dpdc_,0`3.Tn05?:T(4l[@3shj>H&C3R<FJH%YP/D5QW*^;Q22=TCC7-IWN]*NEJpI&/"R(jaI0DlL5I7g59;:Y,=mq%mtNkJ4&DV/$Ug178IZ.%!d5ET=,;!$G3mXQOrJL[96>?"%Ku`6Id)g\t1UdEl>eN\pQ=FdL-ea^7]ba[PA+_m5@U+0aL)m^Po#-!W?\m0A*'3DNA=$+8F1G"m*D%Mn:Vqkl``*G%U**Nu3L0">%M]ZVQqCPgQmY571aGHI\SB5uj^bF@ccaqf<AW7gQAp>0(ksoE?gbj(cfKM>ac5cTJgh/Rac.g)M?uFh@2k+iB]maRRh6sbh1Q]/2%i[qQ[j:/W:>:(!;?&%KJ'Cs`.JgIq?c(VVgHGa_b%)JQ_AflV#cAA%&T"Q@M8iTk/!bRmj'j1_-:f'P2ZF'a4<oV\K?9I@;fE)uM%njZa)_\A?N"CEMh0[L#_Q,Oj/g1aM<4;,?[#WY)sESUVdZ5aSCF$cG6g8*bcX?dAXVR&#6dmu!OR1F0t0Q#or!,+,J"0SMl!6[b=%X'AfO8O6#7:A&"Sg14-b(+?"[6,VOB!"7;(d=b6fM`f[]R]e,`GFg?Q8=`D_\BD(TX6We/P/A5r)[sq^bH-[K3_F9)WN-dm>mt#X%@%AmAK2g!]7[MiKH4!5HRo[`eWTeD4LYkEV2!BmW#f6#]Hf@-7c8Gu4[^H07SOqjP%:Js4ELV[6D7[`,9##..S]fmE*-0fRAj\O9%[`.S?nuJ)SILd1X>"*>$fk)Ye*4t,qRRPH^5a:XeWh8*p39Vrj[Yhg7PG=[_If.tXcS%9L.@so0m5$CNKD;Zp]E63]ar$^o8QuV"%M+gfC4mIpDCCO;]Ih2^PdtrnBaFR%Oo#06c1:E8:G%lh.DLnN+:B2G9;_ZDTG&7a20\;b$ZZ5INQ*Gn?HeYYJ)n0[5$K*.Ag;>d!%#6U%&_E'"?aSj+)j._`&hGUWr"0Sm,B6j>'j5*4@8IPO)F0N[>pq-V,DDjMV,Pr^lHN]R>)e?Orgt=*e2L:"kS(#\g$%Cb^Po&$t%WAiXZ:IjKd9H^DC2^Or<3WsMG"uaqmSr9k`ki\(Q+D0eN&h,Yn[4RT/*]qPX"#L.o`Y6g5!XW%O:SO/K`n>.k9cL+[njSZA9T=*L%L_O9PoX0rJD@5&_0:_8@DBoE]Y+#mI'8o"&;_U\I8$+Nq0J)mBAX`,KI[A6risKo"jY&Nq.H%qpPl+S<2U:^89'ZaI=?lSl]D'5+%0)VX)^\Rht0E1Ikf,m3UlA+glrp]p-[ibVKnun[ScFR>rqY&b"5JMUAol%""hq\5%rkldCDr1Nea$9Rqo"4XGq8LNAJ%Fo<429Hu%^NfS>p#CfLIf03,bAY,jqRc4qHMdF7a1(brET&Q8c/5/l\o6GTr:p7,(E.AX+'e[0&)[EO@pF<YU[*C+mXK3/^O>tQk'Hjo(GGge%?Z1Djc'pB#rlt5UYCHK1Dr:Qmh1oA:o$%tXr9)i'hu2u\gE6Fmm_bO_IsV",mp=lMpnQ[D]>&aibKKW%hYm*:rJ,SM5Q0jFhlPqg%7sOhG?i9abrr(+A!I/3V)Z~>%AI9_PrivateDataEnd